
MAIN MODEL Main_Sudoku2

  DECLARATION SECTION 

    PARAMETER:
       identifier   :  N
       definition   :  3 ;

    PARAMETER:
       identifier   :  NN
       definition   :  N*N ;

    PARAMETER:
       identifier   :  Problem
       index domain :  (i,j)
       definition   :  data
                       { ( 1, 1 ) : 7,  ( 1, 4 ) : 1,  ( 1, 6 ) : 6,  ( 1, 7 ) : 8,  ( 1, 8 ) : 2,  ( 2, 3 ) : 3,  ( 3, 3 ) : 8,  ( 3, 5 ) : 9,
                         ( 3, 7 ) : 4,  ( 4, 3 ) : 7,  ( 4, 4 ) : 9,  ( 5, 5 ) : 5,  ( 5, 6 ) : 3,  ( 5, 8 ) : 1,  ( 6, 1 ) : 1,  ( 6, 3 ) : 9,
                         ( 6, 4 ) : 2,  ( 6, 7 ) : 6,  ( 7, 7 ) : 9,  ( 7, 8 ) : 3,  ( 8, 4 ) : 5,  ( 8, 9 ) : 2,  ( 9, 4 ) : 4,  ( 9, 8 ) : 7 } ;

    PARAMETER:
       identifier   :  Blocks
       index domain :  (i,j)
       definition   :  1+N*Div(i-1,N)+Div(j-1,n) ;

    CONSTRAINT:
       identifier   :  FillData
       index domain :  (i,j)
       definition   :  if (Problem(i,j) > 0) then
                          x(i,j) = Problem(i,j)
                       endif  ;

    SET:
       identifier   :  ii
       subset of    :  Integers
       indices      :  i, j, k
       definition   :  {1..NN} ;

    CONSTRAINT:
       identifier   :  C1
       index domain :  (i)
       definition   :  cp::AllDifferent(j, x(i,j)) ;

    CONSTRAINT:
       identifier   :  C2
       index domain :  (j)
       definition   :  cp::AllDifferent(i, x(i,j)) ;

    CONSTRAINT:
       identifier   :  C3
       index domain :  k
       definition   :  cp::AllDifferent( (i,j) | Blocks(i,j) = k, x(i,j) ) ;

    VARIABLE:
       identifier   :  x
       index domain :  (i,j)
       range        :  {1..NN} ;

    MATHEMATICAL PROGRAM:
       identifier   :  Sudoku2Plan
       direction    :  minimize
       constraints  :  AllConstraints
       variables    :  AllVariables
       type         :  Automatic ;

  ENDSECTION  ;

  PROCEDURE
    identifier :  MainInitialization
    body       :  
      empty x;

  ENDPROCEDURE  ;

  PROCEDURE
    identifier :  MainExecution
    body       :  
      ShowProgressWindow ;
      solve Sudoku2Plan;
      
      if (Sudoku2Plan.ProgramStatus <> 'Optimal') then
         empty x;
      endif;
      
      DialogMessage(GMP::Solution::Count('Sudoku2Plan') + " solutions");

  ENDPROCEDURE  ;

  PROCEDURE
    identifier :  MainTermination
    body       :  
      if ( CaseSaveAll( confirm:2 ) = 1 ) then
          return 1;
      else
          return 0;
      endif ;

  ENDPROCEDURE  ;

ENDMODEL Main_Sudoku2 ;
