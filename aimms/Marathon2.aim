
MAIN MODEL Main_Marathon2

  DECLARATION SECTION 

    SET:
       identifier   :  S
       index        :  i
       initial data :  data {Dominique, Ignace, Naren, Olivier, Philippe, Pascal} ;

    VARIABLE:
       identifier   :  x
       index domain :  (i)
       range        :  {1..6} ;

    CONSTRAINT:
       identifier   :  alldiffX
       definition   :  cp::AllDifferent(i, x(i)) ;

    CONSTRAINT:
       identifier   :  c1
       definition   :  x('Olivier') <> 6
       comment      :  "Olivier not last" ;

    CONSTRAINT:
       identifier   :  c2
       definition   :  x('Dominique') < x('Naren') and
                       x('Dominique') < x('Olivier') and
                       
                       x('Pascal') < x('Naren') and
                       x('Pascal') < x('Olivier')and
                       
                       x('Ignace') < x('Naren') and
                       x('Ignace') < x('Olivier')
       comment      :  "Dominique, Pascal and Ignace before Naren and Olivier" ;

    CONSTRAINT:
       identifier   :  c3
       definition   :  x('Dominique') < 3
       comment      :  "Dominique better than third" ;

    CONSTRAINT:
       identifier   :  c4
       definition   :  x('Philippe') <= 4
       comment      :  "Philippe is amongh the first four" ;

    CONSTRAINT:
       identifier   :  c5
       definition   :  x('Ignace') <> 2 and
                       x('Ignace') <> 3
       comment      :  "Ignace neither second nor third" ;

    CONSTRAINT:
       identifier   :  c6
       definition   :  x('Pascal') + 3 = x('Naren')
       comment      :  "Pascal three places earlier than Nare" ;

    CONSTRAINT:
       identifier   :  c7
       definition   :  x('Ignace') <> 4 and
                       x('Dominique') <> 4
       comment      :  "Neither Ignace nor Dominique on fourth position" ;

    MATHEMATICAL PROGRAM:
       identifier   :  Marathon2Plan
       direction    :  minimize
       constraints  :  AllConstraints
       variables    :  AllVariables
       type         :  CSP ;

  ENDSECTION  ;

  PROCEDURE
    identifier :  MainInitialization

  ENDPROCEDURE  ;

  PROCEDURE
    identifier :  MainExecution
    body       :  
      ShowProgressWindow;
      solve Marathon2Plan;
      
      if (Marathon2Plan.ProgramStatus <> 'Optimal') then
        empty x
      endif;
      
      DialogMessage(GMP::Solution::Count('Marathon2Plan'));
      display x;

  ENDPROCEDURE  ;

  PROCEDURE
    identifier :  MainTermination
    body       :  
      return DataManagementExit();

  ENDPROCEDURE  ;

ENDMODEL Main_Marathon2 ;
