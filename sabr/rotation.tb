#
# Solves Rotation puzzle in SABR
#
# From GAP mailing list:
#
# http://www-groups.dcs.st-and.ac.uk/~gap/ForumArchive/Harris.1/Bob.1/Re__GAP_.59/1.html 
# """
# Since you asked about what the puzzle actually is, the fellow who posted it
# at rec.puzzles (Kevin Buzzard <buzzard@ic.PUZZLE.ac.ELZZUP.uk>) had found it
# on his nokia cell phone. It is called "rotation" at Nokia's web site
# http://www.nokia.com/games
# I think this variant is level 5.
#
# The puzzle is a 4x4 square of numbers. There are four operations, each of
# which involves rotating the numbers in a 3x3 square clockwise. So, in the
# diagram below, one move is the cycle (1,2,3,7,11,10,9,5). The numbers
# maintain orientation-- they don't rotate; if they did, that would add
# another layer of complexity for the solver.
#
#      1  2  3  4
#      5  6  7  8
#      9 10 11 12
#     13 14 15 16
#
# """
# Here is the original question:
# http://www.gap-system.org/ForumArchive/Harris.1/Bob.1/GAP_comm.1/1.html

# # The GAP code for this:
# gap> f := FreeGroup(["a","b","c","d"]);;
# gap> a := f.1;; b:= f.2;; c:= f.3;; d := f.4;;
#
# gap> pgens := [(1,2,3,7,11,10,9,5),               
# (2,3,4,8,12,11,10,6), 
# (5,6,7,11,15,14,13,9), 
# (6,7,8,12,16,15,14,10)];;
#
# gap> puzzle := Group(pgens);;
#
# gap> h := GroupHomomorphismByImages(f, puzzle, [a,b,c,d], pgens);
# [ a, b, c, d ] -> [ (1,2,3,7,11,10,9,5), (2,3,4,8,12,11,10,6), 
#   (5,6,7,11,15,14,13,9), (6,7,8,12,16,15,14,10) ]
# gap> gword := PreImagesRepresentative(h, (15,16));;
#
# Generate a random problem:
# gap> r:=Random(puzzle); ListPerm(r); PreImagesRepresentative(h, r);
# (1,2,4,11,14,5,15,13,10,9,8)(3,16,6,7,12)
# [ 2, 4, 16, 11, 15, 7, 12, 1, 8, 9, 14, 3, 10, 5, 13, 6 ]
# a^2*b^-1*d*b^-1*a^2*d^-1*a*d*a^-1*c*a^-2*d*a^-1*d^-1*c^-1*a*b^-1*c*b*c*b^-1*c^-1*b*a^3*c*b^-2*c^-1*b^2*a^
# -3*c*b^-1*c^-1*b*c*a^-1*b^-2*c^-1*b^2*c*a*c^-1
# (See below.)
#
#
# Author: Hakan Kjellerstrand (hakank@bonetmail.com)
#
# For more about SABR, see http://sabrlang.org/index.html
# 
#

# Symbols used
Sym{ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 }

Board{
   a1  a2  a3  a4;
   a5  a6  a7  a8;
   a9 a10 a11 a12;
  a13 a14 a15 a16;
}

# Empty problem
# Start{
#     ?  ?  ?  ?;
#     ?  ?  ?  ?;
#     ?  ?  ?  ?;
#     ?  ?  ?  ?;
# }


# Start{
#     2  3  7  4;
#     1  6 11  8;
#     5  9 10 12;
#    13 14 15 16;
# }


# 15<->16
# Start{
#    1  2  3  4;
#    5  6  7  8;
#    9 10 11 12;
#   13 14 16 15;
# }

# 4,4,4,1,2,3,2,2,3
Start{
   8 12  7 15;
   1 14 16 13;
   3 10 11  9;
   5  2  4  6;
}


# Reversed matrix.
# Start{
#    16 15 14 13;
#    12 11 10  9;
#     8  7  6  5;
#     4  3  2  1;
# }

# Random from GAP (see above)
# Random problem from GAP
# Start{
#     2  4 16 11;
#    15  7 12  1;
#     8  9 14  3;
#    10  5 13  6;
# }



End{
   1  2  3  4;
   5  6  7  8;
   9 10 11 12;
  13 14 15 16;

}

#
# The legal rotations
#
# Trans Rotate1:Rotate{
#   v1 v2 v3 v4 v5 v6 v7 v8
# =>
#   v2 v3 v4 v5 v6 v7 v8 v1
# }


Trans Rotate2:Rotate{
  v2 v3 v4 v5 v6 v7 v8 v1
=>
  v1 v2 v3 v4 v5 v6 v7 v8
}


DesObj R1:Rotate{  a1 a2 a3  a7 a11 a10  a9  a5 }
DesObj R2:Rotate{  a2 a3 a4  a8 a12 a11 a10  a6 }
DesObj R3:Rotate{  a5 a6 a7 a11 a15 a14 a13  a9 }
DesObj R4:Rotate{  a6 a7 a8 a12 a16 a15 a14 a10 }

