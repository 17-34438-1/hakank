# Solves 1D Rubik's cube in SABR
#
# Author: Hakan Kjellerstrand (hakank@bonetmail.com)
#
# For more about SABR, see http://sabrlang.org/index.html
# 
# This model was inspired by the Machinarium encoding in
# http://sabrlang.org/mach.html
# "machinarium puzzle, puzzle on the grate"

#
# Problem from
# http://www.mail-archive.com/programming@jsoftware.com/msg05817.html
# """
# 1D Rubik's Cube
#
# Oleg Kobchenko
# Mon, 11 Jun 2007 19:09:55 -0700
#
# I found an interesting game, as found on Andrew Nikitin's 
# MSX-BASIC page http://nsg.upor.net/msx/basic/basic.htm ,
# and I am not sure if its solver has been given as a puzzle.
# Here it goes.
#
# 1D Rubik's Cube is a line of 6 numbers with
# original position:
#
#   1 2 3 4 5 6
#
# which can be rotated in 3 different ways
# in groups of four:
#     _______                _______
#    (1 2 3 4)5 6  --(0)->  (4 3 2 1)5 6
#       _______                _______
#     1(2 3 4 5)6  --(1)->   1(5 4 3 2)6
#         _______                _______
#     1 2(3 4 5 6) --(2)->   1 2(6 5 4 3)
#
# Given a scrambled line, return the shortest sequence of 
# rotations to restore the original position.
#
# Examples:
#
#    solve 1 3 2 6 5 4
# 1 2 1
#    solve 5 6 2 1 4 3i
# 0 2
#    solve 6 5 4 1 2 3
# 0 1 2
#
# """


# Testing with
#  $ cd SABR
#  $ ./sabr 4 -all < ../1d_rubik.tb
#
# Output will be in ./result.out
# 
# For more systematic testing:
# $ perl -e 'for(1..10) { print `./sabr $_ -all < ../1d_rubik.tb`}' 
#
# 

# Symbols used
Sym{ 1 2 3 4 5 6 }

Board{
a0 a1 a2 a3 a4 a5
}

# Problem 1.
# Should be R1 R2 R1
Start{
    1 3 2 6 5 4
}

# Problem 2
# Should be R0 R2
# Start{
#   5 6 2 1 4 3
#}

# Problem 3
# Should be R0 R1 R2
# Start{
#    6 5 4 1 2 3
# }

End{
   1 2 3 4 5 6
}

# The reverses
Trans Reverse0:Reverse{
  v1 v2 v3 v4 v5 v6
=>
  v4 v3 v2 v1 v5 v6	
}

Trans Reverse1:Reverse{
  v1 v2 v3 v4 v5 v6
=>
  v1 v5 v4 v3 v2 v6
}

Trans Reverse2:Reverse{
  v1 v2 v3 v4 v5 v6
=>
  v1 v2 v6 v5 v4 v3
}


DesObj R1:Reverse{ a0 a1 a2 a3 a4 a5 }

