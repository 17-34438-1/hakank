/*

  Crypto problem in Comet.

  
  This is a standard benchmark "crypto" problem.
 
  From GLPK:s model cryto.mod.
 
  """
     This problem comes from the newsgroup rec.puzzle.
     The numbers from 1 to 26 are assigned to the letters of the alphabet.
     The numbers beside each word are the total of the values assigned to
     the letters in the word (e.g. for LYRE: L, Y, R, E might be to equal
     5, 9, 20 and 13, or any other combination that add up to 47).
     Find the value of each letter under the equations:
 
     BALLET  45     GLEE  66     POLKA      59     SONG     61
     CELLO   43     JAZZ  58     QUARTET    50     SOPRANO  82
     CONCERT 74     LYRE  47     SAXOPHONE 134     THEME    72
     FLUTE   30     OBOE  53     SCALE      51     VIOLIN  100
     FUGUE   50     OPERA 65     SOLO       37     WALTZ    34
 
     Solution:
     A, B,C, D, E,F, G, H, I, J, K,L,M, N, O, P,Q, R, S,T,U, V,W, X, Y, Z
     5,13,9,16,20,4,24,21,25,17,23,2,8,12,10,19,7,11,15,3,1,26,6,22,14,18
 
     Reference:
     Koalog Constraint Solver <http://www.koalog.com/php/jcs.php>,
     Simple problems, the crypto-arithmetic puzzle ALPHACIPHER.
  """


  Compare with the MiniZinc model http://www.hakank.org/minizinc/crypto.mzn


  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

 */

import cotfd;

int t0 = System.getCPUTime();

int num_letters = 26;
range Letters = 1..num_letters;

int BALLET     =  45;
int CELLO      =  43;
int CONCERT    =  74;
int FLUTE      =  30;
int FUGUE      =  50;
int GLEE       =  66;
int JAZZ       =  58;
int LYRE       =  47;
int OBOE       =  53;
int OPERA      =  65;
int POLKA      =  59;
int QUARTET    =  50;
int SAXOPHONE  = 134;
int SCALE      =  51;
int SOLO       =  37;
int SONG       =  61;
int SOPRANO    =  82;
int THEME      =  72;
int VIOLIN     = 100;
int WALTZ      =  34;


Solver<CP> cp();

var<CP>{int} A(cp, Letters);
var<CP>{int} B(cp, Letters);
var<CP>{int} C(cp, Letters);
var<CP>{int} D(cp, Letters);
var<CP>{int} E(cp, Letters);
var<CP>{int} F(cp, Letters);
var<CP>{int} G(cp, Letters);
var<CP>{int} H(cp, Letters);
var<CP>{int} I(cp, Letters);
var<CP>{int} J(cp, Letters);
var<CP>{int} K(cp, Letters);
var<CP>{int} L(cp, Letters);
var<CP>{int} M(cp, Letters);
var<CP>{int} N(cp, Letters);
var<CP>{int} O(cp, Letters);
var<CP>{int} P(cp, Letters);
var<CP>{int} Q(cp, Letters);
var<CP>{int} R(cp, Letters);
var<CP>{int} S(cp, Letters);
var<CP>{int} T(cp, Letters);
var<CP>{int} U(cp, Letters);
var<CP>{int} V(cp, Letters);
var<CP>{int} W(cp, Letters);
var<CP>{int} X(cp, Letters);
var<CP>{int} Y(cp, Letters);
var<CP>{int} Z(cp, Letters);


var<CP>{int} LD[Letters](cp, Letters);
LD[1]  = A; LD[2]  = B; LD[3]  = C; LD[4]  = D; LD[5]  = E; LD[6]  = F; 
LD[7]  = G; LD[8]  = H; LD[9]  = I; LD[10] = J; LD[11] = K; LD[12] = L; 
LD[13] = M; LD[14] = N; LD[15] = O; LD[16] = P; LD[17] = Q; LD[18] = R; 
LD[19] = S; LD[20] = T; LD[21] = U; LD[22] = V; LD[23] = W; LD[24] = X; 
LD[25] = Y; LD[26] = Z; 


Integer num_solutions(0);

exploreall<cp> {

  cp.post(alldifferent(LD));

  cp.post(            B + A + L + L + E + T == BALLET);
  cp.post(                C + E + L + L + O == CELLO);
  cp.post(        C + O + N + C + E + R + T == CONCERT);
  cp.post(                F + L + U + T + E == FLUTE);
  cp.post(                F + U + G + U + E == FUGUE);
  cp.post(                    G + L + E + E == GLEE);
  cp.post(                    J + A + Z + Z == JAZZ);
  cp.post(                    L + Y + R + E == LYRE);
  cp.post(                    O + B + O + E == OBOE);
  cp.post(                O + P + E + R + A == OPERA);
  cp.post(                P + O + L + K + A == POLKA);
  cp.post(        Q + U + A + R + T + E + T == QUARTET);
  cp.post(S + A + X + O + P + H + O + N + E == SAXOPHONE);
  cp.post(                S + C + A + L + E == SCALE);
  cp.post(                    S + O + L + O == SOLO);
  cp.post(                    S + O + N + G == SONG);
  cp.post(        S + O + P + R + A + N + O == SOPRANO);
  cp.post(                T + H + E + M + E == THEME);
  cp.post(            V + I + O + L + I + N == VIOLIN);
  cp.post(                W + A + L + T + Z == WALTZ);

  labelFF(cp);

} using {
      
  labelFF(cp);

  num_solutions := num_solutions + 1;

  cout << LD << endl;

}

cout << "\nnum_solutions: " << num_solutions << endl;

int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << cp.getNChoice() << endl;
cout << "#fail    = " << cp.getNFail() << endl;
cout << "#propag  = " << cp.getNPropag() << endl;

