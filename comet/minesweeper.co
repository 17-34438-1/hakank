/*
  Minesweeper in Comet.


  From gecode/examples/minesweeper.cc:
  """
  A specification is a square matrix of characters. Alphanumeric 
  characters represent the number of mines adjacent to that field. 
  Dots represent fields with an unknown number of mines adjacent to 
  it (or an actual mine).
  """
  
  E.g.
       "..2.3."
       "2....."
       "..24.3"
       "1.34.."
       ".....3"
       ".3.3.."
  """
  
  Also see 
   
  * http://www.janko.at/Raetsel/Minesweeper/index.htm
 
  * http://en.wikipedia.org/wiki/Minesweeper_(computer_game)
 
  * Ian Stewart on Minesweeper: http://www.claymath.org/Popular_Lectures/Minesweeper/
 
  * Richard Kaye's Minesweeper Pages
    http://web.mat.bham.ac.uk/R.W.Kaye/minesw/minesw.htm
    * Richard Kaye: "Some Minesweeper Configurations"
    http://web.mat.bham.ac.uk/R.W.Kaye/minesw/minesw.pdf
 

  Compare with my other Minesweeper models:
 
  - MiniZinc: http://www.hakank.org/minizinc/minesweeper.mzn
  - Choco   : http://www.hakank.org/choco/MineSweeper.java
  - JaCoP   : http://www.hakank.org/JaCoP/MineSweeper.java
  - Gecode/R: http://www.hakank.org/gecode_r/minesweeper.rb
 


  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

 */

import cotfd;
// import cotls;
// import cotln;
int t0 = System.getCPUTime();

int r;
int c;
int X = -1; // the unknowns
set{int} S = {-1,0,1}; // relative positions

//
// Game matrix:
// encoding: -1 for unknown, >= 0 for number of mines in the neighbourhood
//

// Default problem from "Some Minesweeper Configurations",page 3
// It has 4 solutions
r=8;
c=8;
int game[1..r,1..c] = 
  [
   [2,3,X,2,2,X,2,1],
   [X,X,4,X,X,4,X,2],
   [X,X,X,X,X,X,4,X],
   [X,5,X,6,X,X,X,2],
   [2,X,X,X,5,5,X,2],
   [1,3,4,X,X,X,4,X],
   [0,1,X,4,X,X,X,3],
   [0,1,2,X,2,3,X,2]
  ];

int nbArgs = System.argc();
string[] args = System.getArgs();
string fileName = "";
forall(i in 2..nbArgs-1) {
  fileName = args[i];
}


if (fileName.length() > 0) {
  cout << "Using problem file: " << fileName << endl;

  ifstream f(fileName);

  r = f.getInt();
  c = f.getInt();
  cout << "r: " << r << " c: " << c << endl;

  int t_game[1..r, 1..c];

  string s;
  forall (i in 1..r) {
    s = f.getString();
    // unfortunately s.split("") don't work
    forall(j in 1..c) {
      string c = s.substring(j-1,1);
      int t = X;
      if (c != ".") {
        t = c.toInt();
      }
      t_game[i,j] = t;
    }
  }

  game = t_game;

} // end if fileName

/*
// Print the game
forall(i in 1..r) {
  forall(j in 1..c) {
    cout << game[i,j] << " ";
  }
  cout << endl;
}
*/

Solver<CP> m();

// the mines
var<CP>{int} mines[i in 1..r, j in 1..c](m, 0..1);


Integer num_solutions(0);

exploreall<m> {

  forall(i in 1..r, j in 1..c) {

    //
    // sum the mines in the neighbourhood of this cell
    //
    if (game[i,j] >= 0 )
      m.post(       
             game[i,j] == sum(a in S, b in S:
                              i+a > 0  && j+b >  0 &&
                              i+a <= r && j+b <= c
                              )
             (mines[i+a,j+b])
            );

    // If this cell (game[i,j]) is > X then we know that 
    // it cannot be a mine.
    if (game[i,j] > X) 
      m.post(mines[i,j] == 0);

    // Redundant constraint, but it make the model slower.
    // m.post(mines[i,j] == 1 => game[i,j] == X);

  }


} using {
      
  // forall(i in 1..r, j in 1..c : !mines[i,j].bound()) {// by (-mines[i,j].getSize()) {
  //  label(mines[i,j]);
  // }
  labelFF(m);

  num_solutions := num_solutions + 1;

  // Print the solution
  forall(i in 1..r) {
    forall(j in 1..c) {
      cout << mines[i,j] << " ";
    }
    cout << endl;
  }
  cout << endl;
  
  // cout << game << endl;

}

cout << "\nnum_solutions: " << num_solutions << endl;
    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << m.getNChoice() << endl;
cout << "#fail    = " << m.getNFail() << endl;
cout << "#propag  = " << m.getNPropag() << endl;

