/*

  Added corner puzzle in Comet.
 
  Problem from http://www.delphiforfun.org/Programs/AddedCorners.htm
  """
  This puzzle requires that you enter the digits 1 through 8 in the circles and 
  squares (one digit in each figure) so that the number in each square is equal 
  to the sum on the numbers in the circles which  adjoin it.  
  ...
  
     C F C
     F   F
     C F C
  """

  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

*/

import cotfd;

int t0 = System.getCPUTime();

range Digits = 1..8;

Solver<CP> m();
var<CP>{int} A(m,Digits);
var<CP>{int} B(m,Digits);
var<CP>{int} C(m,Digits);
var<CP>{int} D(m,Digits);
var<CP>{int} E(m,Digits);
var<CP>{int} F(m,Digits);
var<CP>{int} G(m,Digits);
var<CP>{int} H(m,Digits);

var<CP>{int} x[1..8](m, Digits);
x[1]=A; x[2]=B; x[3]=C; x[4]=D;
x[5]=E; x[6]=F; x[7]=G; x[8]=H; 

Integer num_solutions(0);

exploreall<m> {

  m.post(alldifferent(x));
  m.post(B == A + C);
  m.post(D == A + F);
  m.post(E == C + H);
  m.post(G == F + H);

} using {

  label(x);

  num_solutions++;

  cout << A << " " << B  << " " << C << endl;
  cout << D << "   " << E <<  endl;
  cout << F << " " << G << " " << H << endl;
  cout << endl;
}


// cout << x << endl;
cout << "\nnum_solutions: " << num_solutions << endl;
    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << m.getNChoice() << endl;
cout << "#fail    = " << m.getNFail() << endl;
cout << "#propag  = " << m.getNPropag() << endl;
