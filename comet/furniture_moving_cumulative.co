/*

  Furniture moving (simple scheduling problem) in Comet.
 
  Problem from Marriott & Stuckey: 'Programming with constraints', page  112f


  This model use the cumulative constraint, as the MiniZinc model 
  http://www.hakank.org/minizinc/furniture_moving.mzn .

  Compare with the other models
  * Comet: http://www.hakank.org/comet/furniture_moving.co (uses Schedule)
  * MiniZinc: http://www.hakank.org/minizinc/furniture_moving.mzn
  * Choco: http://www.hakank.org/choco/FurnitureMoving.java
  * JaCoP: http://www.hakank.org/jacop/FurnitureMoving.java


  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

 */

import cotfd;
int t0 = System.getCPUTime();

int n = 4; // number of things
int Durations_init[1..n] = [30,10,15,15];
int Resources_init[1..n] = [3,1,3,2];
int upperLimit = 160;

Solver<CP> m();

var<CP>{int} Starts[1..n](m, 0..upperLimit);
var<CP>{int} Durations[1..n](m, 0..upperLimit);
var<CP>{int} Resources[1..n](m, 0..upperLimit);
var<CP>{int} EndTimes[1..n](m, 0..upperLimit*2);

var<CP>{int} numPersons(m, 0..10); 

Integer num_solutions(0);

// exploreall<cp> {
minimize<m>  numPersons subject to {

  copy_a(Durations_init, Durations);
  copy_a(Resources_init, Resources);

  m.post(cumulative(Starts, Durations, Resources , numPersons));

  // setting EndTimes
  forall(i in 1..n) 
    m.post(EndTimes[i] == Starts[i] + Durations[i]);

  //
  // Some extra constraint to play with:
  // 
  //  How many persons if everything should start at the same time
  // forall(i in 1..n) m.post(Starts[i] == 0);
  
  // Must be finished in 60 minutes
  // forall(i in 1..n) m.post(Starts[i] + Durations[i] <= 60);
  
  // limitation of the number of people
  // m.post(numPersons <= 3);

  // must start on an even 10 minutes 
  // forall(i in 1..n) m.post(Starts[i] % 10 == 0);

} using {

  labelFF(m);
  num_solutions++;

  cout << Resources << endl;
  cout << Starts << endl;
  cout << Durations << endl;
  cout << EndTimes << endl;
  cout << endl;

}

cout << "\nnum_solutions: " << num_solutions << endl;
    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << m.getNChoice() << endl;
cout << "#fail    = " << m.getNFail() << endl;
cout << "#propag  = " << m.getNPropag() << endl;


/*
  This is heavily borrowed from the cumulative constraint in MiniZinc globals.mzn .
  """
  Requires that a set of tasks given by start times 's', durations 'd', and
  resource requirements 'r', never require more than a global resource bound
  'b' at any one time.
  Assumptions:
  - forall i, d[i] >= 0 and r[i] >= 0
  """
*/
class cumulative extends UserConstraint<CP> {
  var<CP>{int}[] s;
  var<CP>{int}[] d;
  var<CP>{int}[] r;
  var<CP>{int} b;
  
  cumulative(var<CP>{int}[] _s, 
             var<CP>{int}[] _d, 
             var<CP>{int}[] _r, 
             var<CP>{int} _b
             ) : UserConstraint<CP>() {
    s = _s;
    d = _d;
    r = _r;
    b = _b;
  }

  Outcome<CP> post(Consistency<CP> cl) {

    Solver<CP> cp = s[1].getSolver();
    set{int} tasks = collect(j in filter(i in s.rng()) (r[i].getMax() > 0 && d[i].getMax() > 0 )) j;

    range times = (min(i in tasks) s[i].getMin())..(max(i in tasks) (s[i].getMax() + d[i].getMax()));
    
    forall( t in times ) {
      cp.post(b >= sum(i in tasks) ( ( s[i] <= t && t < s[i] + d[i] ) * r[i] ));
    }
    
    return Suspend;
  }

}


//
// copy_a(init_x, x)
// copy an int[] -> var int[]
//
function void copy_a(int[] init_x, var<CP>{int}[] x) {
  Solver<CP> cp = x[1].getSolver();
  forall(i in x.rng()) {
    cp.post(x[i] == init_x[i]);
  }
}


