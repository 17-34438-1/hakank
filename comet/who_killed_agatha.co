/*
  Who killed agatha? (The Dreadsbury Mansion Murder Mystery) in Comet.

  This is a standard benchmark for theorem proving.
 
  http://www.lsv.ens-cachan.fr/~goubault/H1.dist/H1.1/Doc/h1003.html
  
  """ 
  Someone in Dreadsbury Mansion killed Aunt Agatha. 
  Agatha, the butler, and Charles live in Dreadsbury Mansion, and 
  are the only ones to live there. A killer always hates, and is no 
  richer than his victim. Charles hates noone that Agatha hates. Agatha 
  hates everybody except the butler. The butler hates everyone not richer 
  than Aunt Agatha. The butler hates everyone whom Agatha hates. 
  Noone hates everyone. Who killed Agatha? 
  """

  Originally from 
  F. J. Pelletier: Seventy-five problems for testing automatic theorem provers. Journal of Automated Reasoning, 2: 191â€“216, 1986.
  
  Compare with the MiniZinc model http://www.hakank.org/minizinc/who_killed_agatha.mzn

  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

 */


import cotfd;
int t0 = System.getCPUTime();

range r = 1..3;

// persons
int agatha  = 1;
int butler  = 2;
int charles = 3;

Solver<CP> m();
var<CP>{int} the_killer(m, r);
var<CP>{int} the_victim(m, r);

var<CP>{int} hates[r,r](m, 0..1);
var<CP>{int} richer[r,r](m, 0..1);



Integer num_solutions(0);
exploreall<m> {

  // Agatha, the butler, and Charles live in Dreadsbury Mansion, and 
  // are the only ones to live there. 

  // A killer always hates, and is no richer than his victim. 
  
  // The following two constraint gives the error:
  //    "Element on matrix of var not yet implemented"
  // It works in version 1.1rev2
  m.post(hates[the_killer, the_victim] == 1);
  m.post(richer[the_killer, the_victim] == 0);

  // This works, though.
  /*
  forall(i in r) {
    m.post(i == the_killer => hates[i, the_victim] == 1);
    m.post(i == the_killer => richer[i, the_victim] == 0);
  }
  */

  // define the concept of richer: no one is richer than him-/herself
  forall(i in r)
    m.post(richer[i,i] == 0);


  // (contd...) if i is richer than j then j is not richer than i
  forall(i in r, j in r : i != j) {
    /*
    m.post(richer[i,j] == 1 => richer[j,i] == 0);
    m.post(richer[j,i] == 0 => richer[i,j] == 1);
    */
    m.post((richer[i,j] == 1) == (richer[j,i] == 0));
  }


  // Charles hates noone that Agatha hates. 
  forall(i in r)
    m.post(hates[agatha, i] == 1 => hates[charles, i] == 0);
  
  // Agatha hates everybody except the butler. 
  m.post(hates[agatha, charles] == 1);
  m.post(hates[agatha, agatha] == 1);
  m.post(hates[agatha, butler] == 0);
  
  // The butler hates everyone not richer than Aunt Agatha. 
  forall(i in r) 
    m.post(richer[i, agatha] == 0 => hates[butler, i] == 1);


  // The butler hates everyone whom Agatha hates. 
  forall(i in r) 
    m.post(hates[agatha, i] == 1 => hates[butler, i] == 1);
  
  // Noone hates everyone. 
  forall(i in r) 
    m.post(sum(j in r) (hates[i,j]) <= 2);
  
   // Who killed Agatha? 
   m.post(the_victim == agatha);


} using {
      
  label(m);

  num_solutions := num_solutions + 1;
      
  cout << "the_killer: " << the_killer << endl;
  cout << "hates:\n" << hates << endl;
  cout << "richer:\n" << richer << endl;

}


cout << "\nnum_solutions: " << num_solutions << endl;
    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << m.getNChoice() << endl;
cout << "#fail    = " << m.getNFail() << endl;
cout << "#propag  = " << m.getNPropag() << endl;

