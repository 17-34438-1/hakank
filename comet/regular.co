/*

  Global constraint regular in Comet.

  See Gilles Pesant: 
  "A Regular Language Membership Constraint for Finite Sequences of Variables" 
  (2004)


  This implementation was inspired by the MiniZinc builtin regular predicate.


  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

 */

import cotfd;

int t0 = System.getCPUTime();


/*
// The regular expression 123+21
//                states: 123 45
// 
int len = 10;
int n_states = 5;
int input_max = 3;
int initial_state = 1;
set{int} accepting_states = {n_states}; // This is the last state
int transition_fn[1..n_states, 1..input_max] = 
 [
  [2, 0, 0], // transitions from state 1: "1" -> state 2
  [0, 3, 0], // transitions from state 2: "2" ->  state 3
  [0, 4, 3], // transitions from state 3: "2" -> 4 | "3" -> state 3 (loop)
  [5, 0, 0], // transitions from state 4: "1" -> state 5
  [0, 0, 0]  // transitions from state 5: (none)
  ];
*/


//
// example: nonogram splice [3,2,1]
//
int len = 10;
int pp[1..3] = [3,2,1];
int[,] transition_fn = make_transition_matrix(pp);
int n_states = transition_fn.getRange(0).getSize(); // create the transition matrix
int input_max = 2;
// Note: we use "1" and "2" (rather than 0 and 1) since 0 represents the failing state.
int initial_state = 1;
set{int} accepting_states = {n_states}; // This is the last state


Solver<CP> m();
var<CP>{int} reg_input[1..len](m, 0..input_max);



//
// Global constraint regular
//
// This is a translation of MiniZinc's regular constraint (defined in 
// lib/zinc/globals.mzn). All comments are from the MiniZinc code.
// """
// The sequence of values in array 'x' (which must all be in the range 1..S)
// is accepted by the DFA of 'Q' states with input 1..S and transition
// function 'd' (which maps (1..Q, 1..S) -> 0..Q)) and initial state 'q0'
// (which must be in 1..Q) and accepting states 'F' (which all must be in
// 1..Q).  We reserve state 0 to be an always failing state.
// """
//
function void regular(var<CP>{int}[] x, 
                      int Q,     // number of states
                      int S,     // input_max
                      int[,] d,  // transition matrix
                      int q0,    // initital_state
                      set{int} F // accepting states
                      ) {
  Solver<CP> cp = x[1].getSolver();

  assert(Q > 0); // "regular: 'Q' must be greater than zero",
  assert(S > 0); // "regular: 'S' must be greater than zero",

  // d2 is the same as d, except we add one extra transition for
  // each possible input;  each extra transition is from state zero
  // to state zero.  This allows us to continue even if we hit a
  // non-accepted input.
  int d2[0..Q, 1..S];
  forall(i in 0..Q) {
    forall(j in 1..S) {
      if (i == 0)
        d2[i,j] = 0;
      else
        d2[i,j] = d[i, j];
    }
  }


  // If x has index set m..n, then a[m-1] holds the initial state
  // (q0), and a[i+1] holds the state we're in after processing
  // x[i].  If a[n] is in F, then we succeed (ie. accept the
  // string).
  range x_range = x.rng();
  int m = min(i in x_range) i;
  int n = 1+max(i in x_range) i;
  var<CP>{int} a[m..n](cp, 0..Q);

  cp.post(a[m] == q0);     // Set a[0].
  forall(i in x_range) {
    cp.inside(x[i], 1..S); // Do this in case it's a var.
    cp.post(a[i+1] == d2[a[i], x[i]]); // Determine a[i+1].
  } 

  cp.inside(a[n], F); // Check the final state is in F.


}

Integer num_solutions(0);

// explore<m> {
exploreall<m> {
  regular(reg_input, n_states, input_max, transition_fn,
          initial_state, accepting_states);

} using {
      
  label(m);

  num_solutions++;

  // cout << reg_input << endl;

  cout << "reg_input: ";
  forall(i in 1..len)
    cout << reg_input[i] << " ";
  cout << endl;

}


cout << "\nnum_solutions: " << num_solutions << endl;
    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << m.getNChoice() << endl;
cout << "#fail    = " << m.getNFail() << endl;
cout << "#propag  = " << m.getNPropag() << endl;





//
// Build the transition matrix for a nonogram pattern.
//
function int[,] make_transition_matrix(int[] pattern) {

  int p_len = pattern.getSize();
  int num_states = p_len + sum(i in 1..p_len) pattern[i];
  int t_matrix[1..num_states, 1..2];

  // convert pattern to a 0/1 pattern for easy handling of
  // the states
  int tmp[1..num_states];
  int c = 1;
  tmp[c] = 0;
  forall(i in 1..p_len) {
    forall(j in 1..pattern[i])
      tmp[++c] = 1;
    if (c < num_states) 
      tmp[++c] = 0;
  }
  
  t_matrix[num_states,1] = num_states;
  t_matrix[num_states,2] = 0;
  
  forall(i in 1..num_states) {
    if (tmp[i] == 0) {
      t_matrix[i,1] = i;
      t_matrix[i,2] = i+1;
    } else {
      if (i < num_states) {
        if (tmp[i+1] == 1) {
          t_matrix[i,1] = 0;
          t_matrix[i,2] = i+1;
        } else {
        t_matrix[i,1] = i+1;
        t_matrix[i,2] = 0;        
        }        
      }
    }
  }
  
  cout << "The states:" << endl; 
  forall(i in 1..num_states) {
    forall(j in 1..2) {
      cout << t_matrix[i,j] << " ";
    }
    cout << endl;
  }
  cout << endl;

  return t_matrix;

}

