/*

  Calculs d'enfer puzzle in Comet.

 
  Problem from Jianyang Zhou "The Manual of NCL version 1.2", page 33
  http://citeseer.ist.psu.edu/161721.html
  
  The solution is the manual is:
  """
  a = -16, b = -14, c = -13, d = -12, e = -10,
  f = 4, g = 13, h = -1, i = -3, j = -11, k = -9,
  l = 16, m = -8, n = 11, o = 0, p = -6, q = -4,
  r = 15, s = 2, t = 9, u = -15, v = 14, w = -7,
  x = 7, y = -2, z = -5.
 
  max_{#1\in [1,26]}{|x_{#1}|} minimized to 16
  """
 
  Also, see the discussion of the Z model:
  http://www.comp.rgu.ac.uk/staff/ha/ZCSP/additional_problems/calculs_enfer/calculs_enfer.ps
  (which shows the same solution).

  And compare with the MiniZinc model http://www.hakank.org/minizinc/calculs_d_enfer.mzn

  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

 */

import cotfd;
int t0 = System.getCPUTime();

int N = 26;
range R = -100..100;


Solver<CP> cp();

var<CP>{int} a(cp, R);
var<CP>{int} b(cp, R);
var<CP>{int} c(cp, R);
var<CP>{int} d(cp, R);
var<CP>{int} e(cp, R);
var<CP>{int} f(cp, R);
var<CP>{int} g(cp, R);
var<CP>{int} h(cp, R);
var<CP>{int} i(cp, R);
var<CP>{int} j(cp, R);
var<CP>{int} k(cp, R);
var<CP>{int} l(cp, R);
var<CP>{int} m(cp, R);
var<CP>{int} n(cp, R);
var<CP>{int} o(cp, R);
var<CP>{int} p(cp, R);
var<CP>{int} q(cp, R);
var<CP>{int} r(cp, R);
var<CP>{int} s(cp, R);
var<CP>{int} t(cp, R);
var<CP>{int} u(cp, R);
var<CP>{int} v(cp, R);
var<CP>{int} w(cp, R);
var<CP>{int} x(cp, R);
var<CP>{int} y(cp, R);
var<CP>{int} z(cp, R);

var<CP>{int}  A[1..N](cp,R);
 A[1] = a; A[2] = b; A[3] = c;A [4] = d; A[5] = e; A[6] = f; A[7] = g;
 A[8] = h; A[9] = i;A[10] = j;A[11] = k;A[12] = l;A[13] = m;A[14] = n;
A[15] = o;A[16] = p;A[17] = q;A[18] = r;A[19] = s;A[20] = t;A[21] = u;
A[22] = v;A[23] = w;A[24] = x;A[25] = y;A[26] = z;

// The objective is to minimize the maximum of the absolute values of A[i]
var<CP>{int} A_abs[1..N](cp, R);
var<CP>{int} a_max(cp, 0..N);

Integer num_solutions(0);

// exploreall<cp> {
minimize<cp> a_max subject to {

  forall(i in 1..N) 
     cp.post( A_abs[i] == abs(A[i]));
  
  // maximum(a_max, A_abs)
  forall(i in 1..N)
    cp.post(a_max >= A_abs[i]);

  cp.post(alldifferent(A));

  cp.post(z+e+r+o == 0);

  cp.post(o+n+e == 1);

  cp.post(t+w+o == 2);

  cp.post(t+h+r+e+e == 3);

  cp.post(f+o+u+r == 4);

  cp.post(f+i+v+e == 5);

  cp.post(s+i+x == 6);

  cp.post(s+e+v+e+n == 7);

  cp.post(e+i+g+h+t == 8);

  cp.post(n+i+n+e == 9);

  cp.post(t+e+n == 10);

  cp.post(e+l+e+v+e+n == 11);

  cp.post(t+w+e+l+f == 12);

  // cp.post(a_max <= 16);


  // the NCL solution
  //
  // A= [-16,-14,-13,-12,-10,4,13,-1,-3,-11,-9,16,-8,11,0,-6,-4,15,2,9,-15,14,-7,7,-2,-5]
} using {
      
  forall(i in 1..N : !A[i].bound()) by (A[i].getSize()) {
     label(A[i]);
  }

  // num_solutions := num_solutions + 1;
      
  cout << "A: " << A << " a_max: " << a_max <<  endl;

}

cout << "\nnum_solutions: " << num_solutions << endl;
    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << cp.getNChoice() << endl;
cout << "#fail    = " << cp.getNFail() << endl;
cout << "#propag  = " << cp.getNPropag() << endl;

