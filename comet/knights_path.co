/*

  Knights path problem in Comet.
  
  Create a knights path in a n x n matrix for all integers from 1..n*n-1.
  The integer n*n is placed whatever it may fit...

  
  Compare with the MiniZinc model http://www.hakank.org/minizinc/knight_path.mzn .


  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

 */

import cotfd;

int t0 = System.getCPUTime();

int n = 5;

Solver<CP> m();

var<CP>{int} x[1..n, 1..n](m, 1..n^2);

set{int} C = {-2,-1,1,2};

Integer num_solutions(0);
explore<m> {
// exploreall<m> {

  m.post(alldifferent(all(i in 1..n, j in 1..n) x[i,j]));

  // note: When placing here this construct only generates 1 solution,
  //       but when placed in the using section it generates all solutions.
  //       The reason is that tryall (seems to) work different in these
  //       places.
  /*
  // place all integers 1..n^2
  forall(k in 1..n*n-2) {
    tryall<m>(i in 1..n) {
      tryall<m>(j in 1..n) {
        m.post(k == x[i, j]); // fix this k
        // the knight moves
        tryall<m>(a in C) {
          tryall<m>(b in C :
                    i+a >= 1 && j+b >= 1 
                    &&
                    i+a <= n && j+b <= n
                    &&
                    abs(a)+abs(b) == 3) {
            m.post(k + 1 == x[i+a, j+b]); //find the next k
          }
        }
      }
    }
  }
  */
 
} using {
      
  // place all integers 1..n^2
  forall(k in 1..n*n-1) {
    tryall<m>(i in 1..n) {
      tryall<m>(j in 1..n) {
        m.post(k == x[i, j]); // fix this k
        // the knight moves
        tryall<m>(a in C) {
          tryall<m>(b in C :
                    i+a >= 1 && j+b >= 1 
                    &&
                    i+a <= n && j+b <= n
                    &&
                    abs(a)+abs(b) == 3) {
            m.post(k + 1 == x[i+a, j+b]); //find the next k
          }
        }
      }
    }
  }

  labelFF(m);

  num_solutions := num_solutions + 1;

  forall(i in 1..n) {
    forall(j in 1..n) {
      cout << x[i,j] << " ";
    }
    cout << endl;
  }
  cout << endl;
  cout << flush;

}


cout << "\nnum_solutions: " << num_solutions << endl;
    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << m.getNChoice() << endl;
cout << "#fail    = " << m.getNFail() << endl;
cout << "#propag  = " << m.getNPropag() << endl;

