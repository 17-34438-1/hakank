/*

  Global constraint global contiguity in Comet.

  From Global constraint catalog
  http://www.emn.fr/x-info/sdemasse/gccat/Cglobal_contiguity.html
  """
  Enforce all variables of the VARIABLES collection to be assigned to 
  0 or 1. In addition, all variables assigned to value 1 appear contiguously.
  """

  The implementation of global contiguity below was inspired by 
  Toby Walsh's presentation "Sliding Constraints"
     http://www.cse.unsw.edu.au/~tw/samos/slide.ppt
  where he defines it in terms of the global constraint slide.


  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

*/

import cotfd;

int t0 = System.getCPUTime();

int n = 10;

Solver<CP> m();
var<CP>{int} x[1..n](m, 0..1);

Integer num_solutions(0);


exploreall<m> {

  m.post(global_contiguity(x));

} using {
      
  label(x);

  num_solutions++;
      
  cout << x << endl;

}


cout << "\nnum_solutions: " << num_solutions << endl;
    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << m.getNChoice() << endl;
cout << "#fail    = " << m.getNFail() << endl;
cout << "#propag  = " << m.getNPropag() << endl;


//
// contiguity: all variables assigned to value 1 appear contiguously.
//
class global_contiguity extends UserConstraint<CP> {
  var<CP>{int}[] x;
  
  global_contiguity(var<CP>{int}[] _x) : UserConstraint<CP>() {
    x = _x;
  }

  Outcome<CP> post(Consistency<CP> cl) {
    Solver<CP> cp = x[1].getSolver();
    
    int len = x.getSize();
    var<CP>{int} y[1..len](cp, 0..2);
    
    forall(i in 2..len) 
      cp.post(y[i-1] <= y[i]);
    
    forall(i in 1..len) {
      cp.post(x[i] == 1 => y[i] == 1);
      cp.post(y[i] == 1 => x[i] == 1);
    }
    
    return Suspend;    
  }

} // end contiguit

