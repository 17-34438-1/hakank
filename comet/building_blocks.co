/*

  Building Blocks puzzle Dell Logic Puzzles) in Comet.

  From http://brownbuffalo.sourceforge.net/BuildingBlocksClues.html
  """
  Each of four alphabet blocks has a single letter of the alphabet on each 
  of its six sides. In all, the four blocks contain every letter but 
  Q and Z. By arranging the blocks in various ways, you can spell all of 
  the words listed below. Can you figure out how the letters are arranged 
  on the four blocks?

  BAKE ONYX ECHO OVAL
 
  GIRD SMUG JUMP TORN
 
  LUCK VINY LUSH WRAP
  """

  Compare with the Labeled Dice problem:
  http://www.hakank.org/comet/labeled_dice.co


  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

 */

import cotfd;

int t0 = System.getCPUTime();

int n = 4;
range Cube = 1..n;
int num_words = 12;

enum letters = {dummy,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,R,S,T,U,V,W,X,Y};
letters words[1..num_words, 1..n] = 
  [
   [B,A,K,E],
   [O,N,Y,X],
   [E,C,H,O],
   [O,V,A,L],
   [G,I,R,D],
   [S,M,U,G],
   [J,U,M,P],
   [T,O,R,N],
   [L,U,C,K],
   [V,I,N,Y],
   [L,U,S,H],
   [W,R,A,P]
   ];

Solver<CP> m();

var<CP>{int} dice[1..24](m, Cube);

Integer num_solutions(0);

// here we just take the first solution (of 24)
solve<m> {

  // the letters in a word must be on a different die
  forall(i in 1..num_words) 
    m.post(alldifferent(all(j in 1..n) dice[words[i,j]]));

  // there must be exactly 6 letters of each die
  forall(i in 1..n)
    m.post(sum(j in 1..24) (dice[j] == i) == 6);

} using {

  labelFF(m);

  num_solutions := num_solutions + 1;

  cout << dice << endl;

  cout << "letters -> cube: " << endl;
  forall(i in letters : i != dummy) {
    cout << i << ": " << dice[i] << endl;
  }

  cout << "\nwords with cube label: " << endl;
  forall(i in 1..num_words) {
    forall(j in 1..n) {
      cout << words[i,j] << "(" << dice[words[i,j]] << ") ";
    }
    cout << endl;
  }
  cout << endl;

  cout << "Letter: "<< endl;
  forall(s in 1..6) {
    forall(i in letters : i != dummy) 
      if (dice[i] == s) {
        cout << i << " ";
      }
    cout << endl;
  }
  cout << endl;

}

cout << "\nnum_solutions: " << num_solutions << endl;
    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << m.getNChoice() << endl;
cout << "#fail    = " << m.getNFail() << endl;
cout << "#propag  = " << m.getNPropag() << endl;
