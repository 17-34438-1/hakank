/*
   SEND + MORE = MONEY in any base in Comet

   Standard alphametic problem, using any base.

 */

import cotfd;

function void toNum(Solver<CP> m, var<CP>{int}[] x, var<CP>{int} num, int base) {
  m.post(num == sum(i in 1..x.getSize()) 
         base^(x.getSize()-i)*x[i]
         );

}

Integer total_solutions(0);

//
// Check many bases
//
forall(base in 2..100) {

  int t0 = System.getCPUTime();

  range Digits = 0..base-1;

  Integer num_solutions(0);

  Solver<CP> m();
  var<CP>{int} S(m,Digits);
  var<CP>{int} E(m,Digits);
  var<CP>{int} N(m,Digits);
  var<CP>{int} D(m,Digits);
  var<CP>{int} M(m,Digits);
  var<CP>{int} O(m,Digits);
  var<CP>{int} R(m,Digits);
  var<CP>{int} Y(m,Digits);
  
  var<CP>{int} x[1..8];
  x[1]=S; x[2]=E; x[3]=N; x[4]=D;
  x[5]=M; x[6]=O; x[7]=R; x[8]=Y;
  

  exploreall<m> {
  
    m.post(alldifferent(x));
    m.post(M != 0);
    m.post(S != 0);
    m.post(                 base^3 * S + base^2 * E + base * N + D +
                            base^3 * M + base^2 * O + base * R + E ==  
                            base^4 * M + base^3 * O + base^2 * N + base * E + Y);
      
  
  } using {
    
    forall(i in 1..8 : !x[i].bound())  by (-x[i].getSize()) {
      label(x[i]);
    }
    
    labelFF(m);
    
    // cout << "x: " << x << " base (" << base << ")" << endl;

  num_solutions := num_solutions + 1;
    
    // labelFF(x);
  }

  cout << "\nbase: " << base << " num_solutions: " << num_solutions << endl;
  int t1 = System.getCPUTime();
  // cout << "time:      " << (t1-t0) << endl;
  // cout << "#choices = " << m.getNChoice() << endl;
  // cout << "#fail    = " << m.getNFail() << endl;
  // cout << "#propag  = " << m.getNPropag() << endl;

 total_solutions := total_solutions + num_solutions;

}


cout << "\ntotal_solutions: " << total_solutions << endl;
