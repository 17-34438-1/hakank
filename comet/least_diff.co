/*
   Least diff problem in Comet

   The program solves the following problem:

   What is the smallest difference between two numbers X - Y
   if you must use all the digits (0..9) exactly once.

   Compare with the following models:
   * MiniZinc: http://www.hakank.org/minizinc/least_diff.mzn
   * Gecode/R: http://www.hakank.org/gecode_r/least_diff.rb
   * Choco: http://www.hakank.org/choco/LeastDiff.java
   * JaCoP: http://www.hakank.org/JaCoP/LeastDiff.java

 */

int t0 = System.getCPUTime();

import cotfd;

range Digits = 0..9;

Solver<CP> m();
var<CP>{int} A(m,Digits);
var<CP>{int} B(m,Digits);
var<CP>{int} C(m,Digits);
var<CP>{int} D(m,Digits);
var<CP>{int} E(m,Digits);
var<CP>{int} F(m,Digits);
var<CP>{int} G(m,Digits);
var<CP>{int} H(m,Digits);
var<CP>{int} I(m,Digits);
var<CP>{int} J(m,Digits);

var<CP>{int} x[1..10];
x[1]=A; x[2]=B; x[3]=C; x[4]=D;x[5]=E;
x[6]=F; x[7]=G; x[8]=H; x[9]=I;x[10]=J;
  
var<CP>{int} Diff(m, 0..100000);
var<CP>{int} X(m, 0..100000);
var<CP>{int} Y(m, 0..100000);


minimize<m> Diff subject to {
// exploreall<m> {
  m.post(alldifferent(x));
  m.post(X == 10000*A+1000*B+100*C+10*D+E);
  m.post(Y == 10000*F+1000*G+100*H+10*I+J);

  m.post(X > Y);
  m.post(Diff == X - Y);


} using {

  forall(i in 1..10 : !x[i].bound()) by (-x[i].getSize()) {
    label(x[i]);
  }


}

cout << x << endl;
cout << "Diff: " << Diff << endl;
cout << "X: " << X << endl;
cout << "Y: " << Y << endl;

int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << m.getNChoice() << endl;
cout << "#fail    = " << m.getNFail() << endl;
cout << "#propag  = " << m.getNPropag() << endl;
