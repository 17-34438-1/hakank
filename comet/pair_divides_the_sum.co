/*

  Pairs divides the sum puzzle in Comet.

  From comp.lang.prolog
  """
  Date: Sat, Feb 28 2009 3:55Â am
  From: Nick Wedd

  Here is a puzzle which I found surprisingly easy to program Prolog to
  generate solutions to.  If any of you teach Prolog to students, you
  might use it as an example (like the goat-wolf-cabbage thing).

  Find a set of four distinct positive integers such that, for every pair
  of them, their difference divides their sum.

  Find lots of such sets.

  As above, but sets of five distinct positive integers.
  
  As above, but sets of six ...
  """


  For n = 7, max_val = 100 there are 3 solutions:

  x[39,46,53,60,67,74,81] sum: 420
  0 7 14 21 28 35 42
  7 0 7 14 21 28 35
  14 7 0 7 14 21 28
  21 14 7 0 7 14 21
  28 21 14 7 0 7 14
  35 28 21 14 7 0 7
  42 35 28 21 14 7 0
  
  x[55,58,59,60,61,62,65] sum: 420
  0 3 4 5 6 7 10
  3 0 1 2 3 4 7
  4 1 0 1 2 3 6
  5 2 1 0 1 2 5
  6 3 2 1 0 1 4
  7 4 3 2 1 0 3
  10 7 6 5 4 3 0
  
  x[57,58,59,60,61,62,63] sum: 420
  0 1 2 3 4 5 6
  1 0 1 2 3 4 5
  2 1 0 1 2 3 4
  3 2 1 0 1 2 3
  4 3 2 1 0 1 2
  5 4 3 2 1 0 1
  6 5 4 3 2 1 0
  


  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

*/

import cotfd;

int t0 = System.getCPUTime();

int n = 7;
int max_val = 100;
Solver<CP> m();
var<CP>{int} x[1..n](m, 1..max_val);
var<CP>{int} z(m, 1..max_val*n);

Integer num_solutions(0);

exploreall<m> {

  m.post(alldifferent(x));

  // ordered
  forall(i in 2..n) 
    m.post(x[i-1] < x[i]);

  m.post(z == sum(i in 1..n) x[i]);

  m.post(z % n == 0);

  forall(i in 1..n, j in 1..n : i < j) {
    // m.post(abs(x[i]-x[j]) > 1); // not allowing differences of 1.
    m.post(z % abs(x[i]-x[j]) == 0);
  }

  
} using {
      
  labelFF(x);
  /*
  forall(i in 1..n: !x[i].bound()) {
    tryall<m>(v in 1..max_val : x[i].memberOf(v)) 
      m.post(x[i] == v);
    onFailure
      m.post(x[i] != v);
  }
  */

  num_solutions++;
      
  cout << x << " sum: " << z << endl;
  forall(i in 1..n) {
    forall(j in 1..n) {
      cout << abs(x[i]-x[j]) << " ";
    }
    cout << endl;
  }
  cout << endl;
      

}

cout << "\nnum_solutions: " << num_solutions << endl;
    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << m.getNChoice() << endl;
cout << "#fail    = " << m.getNFail() << endl;
cout << "#propag  = " << m.getNPropag() << endl;

