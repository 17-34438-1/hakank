/*

  Word square in Comet.

  This model creates a word square, i.e. a square matrix with 
  different words. 

  Compare with the cross word model:
  * http://www.hakank.org/comet/crossword.co


  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

 */

import cotfd;

int t0 = System.getCPUTime();

enum alpha = {zzz, a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z};
string az[0..26] = ["", "a","b","c","d","e","f","g","h","i","j","k","l","m","n","o",
                       "p","q","r","s","t","u","v","w","x","y","z"];


//int len = 5;

// Definition of the words. 
// include "word_len3";
// include "word_len4";
// include "word_len5";
include "word_len6";
// include "word_len7";
// include "word_len8";



Solver<CP> cp();

//
// E contains which word (position in words) to select for the overlappings.
//
int n = word_len*2; 
var<CP>{int} E[1..n](cp, 1..num_words);


Integer num_solutions(0);

explore<cp> {

  cout << "start explore" << endl;

  // Ensure that the words are distinct
  cp.post(alldifferent(E));


  //
  // check all overlapping positions
  //
  forall(i in 1..word_len) {
    forall(j in 1..word_len) {
      cp.post(words[E[i], j] ==  words[E[j+word_len],i], onDomains);
    }
  }


} using {
      
  cout << "labeling" << endl;
  // labelFF(E);
  labelFF(cp);

  /*
  forall(i in 1..n: !E[i].bound()) by (E[i].getSize()) {
    // label(E[i]);
    tryall<cp>(v in 1..num_words) by (v)
      cp.label(E[i], v);
    onFailure 
      cp.post(E[i] != v);

  }
  */


  num_solutions++;

  //
  // The words in the word square.
  //
  cout << "Words: " << endl;
  cout << E << endl;
  forall(i in 1..n) {
    forall(j in 1..word_len) {
      cout << az[words[E[i], j]]; 
    }
    cout << endl;
  }

  // The square consists of the first len words, i.e. the horizontal words.
  cout << "\nSquare: " << endl;
  forall(i in 1..word_len) {
    forall(j in 1..word_len) {
      cout << az[words[E[i], j]]; 
    }
    cout << endl;
  }

  

  cout << endl;

}

cout << "\nnum_solutions: " << num_solutions << endl;
    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << cp.getNChoice() << endl;
cout << "#fail    = " << cp.getNFail() << endl;
cout << "#propag  = " << cp.getNPropag() << endl;


