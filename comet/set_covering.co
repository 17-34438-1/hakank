/*

  Simple set covering problem in Comet.

  Placing of firestations, from Winston "Operations Research", page 486


  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

 */

import cotfd;

int t0 = System.getCPUTime();


int min_distance = 15;
int numCities = 6;

Solver<CP> m();
// where to place the fire stations
var<CP>{int} x[1..numCities](m, 0..1);
// objective: minimize the number of fire stations
var<CP>{int} z(m, 0..10000);

// distance between the cities
int distance[1..numCities, 1..numCities] =
[
 [ 0,10,20,30,30,20],
 [10, 0,25,35,20,10],
 [20,25, 0,15,30,20],
 [30,35,15, 0,15,25],
 [30,20,30,15, 0,14],
 [20,10,20,25,14, 0]
];



Integer num_solutions(0);
// exploreall<m> {
minimize<m> z subject to {

  // for exploreall
  // m.post(z <= 2);

  m.post(z == sum(i in 1..numCities) x[i]);

  forall(i in 1..numCities) 
    m.post( (sum(j in 1..numCities : distance[i,j] <= min_distance) x[j])  >= 1);

} using {
      
  label(m);

  num_solutions := num_solutions + 1;
      
  cout << x << endl;

}

cout << "\nnum_solutions: " << num_solutions << endl;
    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << m.getNChoice() << endl;
cout << "#fail    = " << m.getNFail() << endl;
cout << "#propag  = " << m.getNPropag() << endl;

