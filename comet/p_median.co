/*

  P-median problem in Comet.

  Model and data from the OPL Manual, which describes the problem:
  """
  The P-Median problem is a well known problem in Operations Research. 
  The problem can be stated very simply, like this: given a set of customers 
  with known amounts of demand, a set of candidate locations for warehouses, 
  and the distance between each pair of customer-warehouse, choose P 
  warehouses to open that minimize the demand-weighted distance of serving 
  all customers from those P warehouses.
  """

  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

 */

import cotfd;

int t0 = System.getCPUTime();

//Data
int P = 2;
enum Customers ={Albert, Bob, Chris, Daniel};
enum Warehouses = {Santa_Clara, San_Jose, Berkeley};
int Demand[Customers] = [100,80,80,70];
float Distance[Customers, Warehouses] = 
[
 [ 2, 10, 50],
 [ 2, 10, 52],
 [50, 60,  3],
 [40, 60,  1]
];

Solver<CP> m();

//Variables
var<CP>{bool} OpenWarehouse[Warehouses](m);
var<CP>{bool} ShipToCustomer[Customers,Warehouses](m);


Integer num_solutions(0);

minimize<m>

  sum(c in Customers, w in Warehouses) 
     Demand[c]*Distance[c,w]*ShipToCustomer[c,w]

subject to {

  forall(c in Customers)
    m.post(sum(w in Warehouses) 
           ShipToCustomer[c,w] == 1);

  m.post(sum(w in Warehouses) 
         OpenWarehouse[w] == P);

  forall( c in Customers , w in Warehouses )
    m.post(ShipToCustomer[c,w] <= OpenWarehouse[w]);

} using {
      
  label(m);

}

cout << endl;
cout << Warehouses << endl;
cout << OpenWarehouse << endl;
forall(c in Customers) {
  cout << c << ": ";
  forall(w in Warehouses) {
    cout << w << ":" << ShipToCustomer[c,w] << " ";
  }
  cout << endl;
}
cout << endl;


int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << m.getNChoice() << endl;
cout << "#fail    = " << m.getNFail() << endl;
cout << "#propag  = " << m.getNPropag() << endl;

