/*

  Stable marriage in Comet.

  Problem and OPL model from Pascal Van Hentenryck
  "The OPL Optimization Programming Language", page 43ff.


  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

 */

import cotfd;

int t0 = System.getCPUTime();

Solver<CP> cp();

enum Women = {Helen,Tracy,Linda,Sally,Wanda};
enum Men = {Richard,James,John,Hugh,Greg};

int rankWomen[Women,Men] = 
  [
   [1, 2, 4, 3, 5],
   [3, 5, 1, 2, 4],
   [5, 4, 2, 1, 3],
   [1, 3, 5, 4, 2],
   [4, 2, 3, 5, 1]
   ];

int rankMen[Men,Women] = 
  [
   [5, 1, 2, 4, 3],
   [4, 1, 3, 2, 5],
   [5, 3, 2, 4, 1],
   [1, 5, 4, 3, 2],
   [4, 3, 2, 1, 5]
   ];


var<CP>{Women} wife[Men](cp,Men);
var<CP>{Men} husband[Women](cp,Women);

Integer num_solutions(0);

solveall<cp> {
  forall(m in Men)
    cp.post(husband[wife[m]] == m);
  
  forall(w in Women)
    cp.post(wife[husband[w]] == w);
  
  forall(m in Men, o in Women)
    cp.post(rankMen[m,o] < rankMen[m, wife[m]] => rankWomen[o,husband[o]] < rankWomen[o,m]);
  
  forall(w in Women, o in Men)
    cp.post(rankWomen[w,o] < rankWomen[w,husband[w]] => rankMen[o,wife[o]] < rankMen[o,w]);
  
} using {
  
  label(cp);
  cout << wife << endl;
  cout << husband << endl;
  cout << endl;
}


cout << "\nnum_solutions: " << num_solutions << endl;
    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << cp.getNChoice() << endl;
cout << "#fail    = " << cp.getNFail() << endl;
cout << "#propag  = " << cp.getNPropag() << endl;
