/*

  Another set_covering problem in Comet.

  Problem from 
  Katta G. Murty: "Optimization Models for Decision Making", page 302f
  http://ioe.engin.umich.edu/people/fac/books/murty/opti_model/junior-7.pdf
  
  10 senators making a committee, where there must at least be one 
  representative from each group:

  group:        senators:
  southern      1 2 3 4 5
  northern      6 7 8 9 10
  liberals      2 3 8 9 10
  conservative  1 5 6 7
  democrats     3 4 5 6 7 9
  republicans   1 2 8 10

  The objective is to minimize the number of senators.
 

  Also, compare with the MiniZinc model 
  http://www.hakank.org/minizinc/set_covering3.mzn

  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

 */

import cotfd;

int t0 = System.getCPUTime();

int num_groups = 6;
int num_senators = 10;

// which group does a senator belong to?
int belongs[1..num_groups, 1..num_senators] =
[
 [1, 1, 1, 1, 1, 0, 0, 0, 0, 0],   // 1 southern
 [0, 0, 0, 0, 0, 1, 1, 1, 1, 1],   // 2 northern
 [0, 1, 1, 0, 0, 0, 0, 1, 1, 1],   // 3 liberals
 [1, 0, 0, 0, 1, 1, 1, 0, 0, 0],   // 4 conservative
 [0, 0, 1, 1, 1, 1, 1, 0, 1, 0],   // 5 democrats
 [1, 1, 0, 0, 0, 0, 0, 1, 0, 1]    // 6 republicans
];


Solver<CP> m();

//  decision variable: should this senator belong to the committe
var<CP>{int} x[1..num_senators](m, 0..1);

// number of assigned senators (to minimize)
var<CP>{int} z(m, 0..num_senators);

Integer num_solutions(0);

// exploreall<m> {
minimize<m> z subject to {

  // m.post(z == 2); // for exploreall

  m.post(z == sum(i in 1..num_senators) (x[i]));

  forall(i in 1..num_groups) 
    m.post(sum(j in 1..num_senators) (x[j]*belongs[i,j]) >= 1);


} using {
      
  label(m);

  num_solutions := num_solutions + 1;
      
  cout << x << " z: " << z << endl;
  cout << "Assigned senators: ";
  forall(i in 1..num_senators) 
    if (x[i] == 1) 
      cout << i << " ";
  cout << endl;

}

cout << "\nnum_solutions: " << num_solutions << endl;
    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << m.getNChoice() << endl;
cout << "#fail    = " << m.getNFail() << endl;
cout << "#propag  = " << m.getNPropag() << endl;

