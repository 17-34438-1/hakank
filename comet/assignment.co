/*

  Assignment problem in Comet.

  Assignment problem from Winston "Operations Research, page 393f.


  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

 */

import cotfd;

int t0 = System.getCPUTime();

int rows = 4;
int cols = 5;

// I added the last column to make it more interesting...
int cost[1..rows, 1..cols] = 
 [
  [14,  5,  8,  7, 15],
  [ 2, 12,  6,  5,  3],
  [ 7,  8,  3,  9,  7],
  [ 2,  4,  6, 10,  1]
   ];

Solver<CP> m();

var<CP>{int} x[1..rows, 1..cols](m, 0..1);
var<CP>{int} total_cost(m, 0..100);


Integer num_solutions(0);

// exploreall<m> {
minimize<m> total_cost subject to {

  m.post(total_cost == sum(i in 1..rows, j in 1..cols) x[i,j]*cost[i,j]);

  // all rows must be assigned
  forall(i in 1..rows) 
    m.post(sum(j in 1..cols) (x[i,j]) == 1);

  // at most one assignement per column
  forall(j in 1..cols)
    m.post(sum(i in 1..rows) (x[i,j]) <= 1);


} using {

  label(m);

  num_solutions++;

  cout << "total_cost: " << total_cost << endl;
  forall(i in 1..rows) {
    forall(j in 1..cols) {
      cout << x[i,j] << " ";
    }
    cout << endl;
  }
  
  cout << endl;
}


cout << "\nnum_solutions: " << num_solutions << endl;
    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << m.getNChoice() << endl;
cout << "#fail    = " << m.getNFail() << endl;
cout << "#propag  = " << m.getNPropag() << endl;

