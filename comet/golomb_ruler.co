/*

  Golomb ruler in Comet.

  CSPLib problem 6
  http://www.cs.st-andrews.ac.uk/~ianm/CSPLib/prob/prob006/index.html
  """
  These problems are said to have many practical applications including 
  sensor placements for x-ray crystallography and radio astronomy. A 
  Golomb ruler may be defined as a set of m integers 
  0 = a_1 < a_2 < ... < a_m such that the m(m-1)/2 differences 
  a_j - a_i, 1 <= i < j <= m are distinct. Such a ruler is said to contain 
  m marks and is of length a_m. The objective is to find optimal (minimum 
  length) or near optimal rulers.

  Note that a symmetry can be removed by adding the constraint that 
  a_2 - a_1 < a_m - a_{m-1}, the first difference is less than the last. 
  """

  Also see:
  * http://mathworld.wolfram.com/GolombRuler.html
  * http://en.wikipedia.org/wiki/Golomb_ruler
  * http://www.research.ibm.com/people/s/shearer/grule.html


  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

 */

import cotfd;

int t0 = System.getCPUTime();

int n_marks = 12;
int maxval = n_marks^2;
int numOfDifferences = (n_marks*(n_marks-1)/2);
range diffValues = 1..maxval;

Solver<CP> cp();

var<CP>{int} ruler[1..n_marks](cp, 0..maxval);
var<CP>{int} distance[1..numOfDifferences](cp, diffValues);

Integer num_solutions(0);
// explore<cp> {
// exploreall<cp> {
minimize<cp> ruler[n_marks] subject to {

  cp.post(ruler[1] == 0); 


  forall(m1 in 1..n_marks, m2 in 1..n_marks: m2 > m1){
    cp.post(distance[((n_marks*(n_marks-1)/2) - ((n_marks-m1+1)*(n_marks-m1)/2) + (m2-m1))] == ruler[m2] - ruler[m1]);
  }


  cp.post(alldifferent(distance));

  forall (i in 1..n_marks-1)
    cp.post(ruler[i] < ruler[i+1]);

  cp.post(((ruler[2] - ruler[1]) < (ruler[n_marks] - ruler[n_marks - 1])));




} using {

  label(cp);  
  num_solutions++;

  cout << ruler << endl;
  int tx = System.getCPUTime();
  cout << "time: " << (tx-t0) / 1000.0 << endl;



}

cout << "\nnum_solutions: " << num_solutions << endl;
    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << cp.getNChoice() << endl;
cout << "#fail    = " << cp.getNFail() << endl;
cout << "#propag  = " << cp.getNPropag() << endl;

