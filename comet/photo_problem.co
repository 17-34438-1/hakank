/*

  Photo problem in Comet.

  Problem statement from Mozart/Oz tutorial:
  http://www.mozart-oz.org/home/doc/fdt/node37.html#section.reified.photo
  """
  Betty, Chris, Donald, Fred, Gary, Mary, and Paul want to align in one row for taking a photo. Some of them have preferences next to whom they want to stand:
 
     1. Betty wants to stand next to Gary and Mary.
     2. Chris wants to stand next to Betty and Gary.
     3. Fred wants to stand next to Mary and Donald.
     4. Paul wants to stand next to Fred and Donald.
 
  Obviously, it is impossible to satisfy all preferences. Can you find an alignment that maximizes the number of satisfied preferences?
  """
  Oz solution: 
    6 # alignment(betty:5  chris:6  donald:1  fred:3  gary:7   mary:4   paul:2)
  [5, 6, 1, 3, 7, 4, 2]
  
  
  Cf my MiniZinc model http://www.hakank.org/minizinc/photo_hkj.mzn


  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

 */

import cotfd;
int t0 = System.getCPUTime();

int n = 7; // number of persons


int preferences[1..n, 1..n] = 
//1 2 3 4 5 6 7            
//B C D F G M P
[
 [0,0,0,0,1,1,0], // Betty  1
 [1,0,0,0,1,0,0], // Chris  2
 [0,0,0,0,0,0,0], // Donald 3
 [0,0,1,0,0,1,0], // Fred   4
 [0,0,0,0,0,0,0], // Gary   5
 [0,0,0,0,0,0,0], // Mary   6
 [0,0,1,1,0,0,0]  // Paul   7
 ]
;


Solver<CP> m();
var<CP>{int} positions[1..n](m, 1..n);
var<CP>{int} z(m,0..10000); 



Integer num_solutions(0);
// explore<m> {
exploreall<m> {
// maximize<m> z subject to {

  m.post(alldifferent(positions));

  m.post(z == sum(i in 1..n,j in 1..n : preferences[i,j] > 0) 
         (abs(positions[i]-positions[j]) == 1)
         );

  // for exploreall
  m.post(z >= 6);

} using {
      
  label(m);
  num_solutions := num_solutions + 1;

  cout << positions << " z: " << z << endl;

}

cout << "\nnum_solutions: " << num_solutions << endl;
    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << m.getNChoice() << endl;
cout << "#fail    = " << m.getNFail() << endl;
cout << "#propag  = " << m.getNPropag() << endl;

