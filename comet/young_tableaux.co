/*
  Young tableaux in Comet.

  See 
  http://mathworld.wolfram.com/YoungTableau.html
  and
  http://en.wikipedia.org/wiki/Young_tableau
  """
  The partitions of 4 are
   {4}, {3,1}, {2,2}, {2,1,1}, {1,1,1,1}
 
  And the corresponding standard Young tableaux are:
 
  1.   1 2 3 4
 
  2.   1 2 3         1 2 4    1 3 4
       4             3        2
 
  3.   1 2           1 3
       3 4           2 4
 
  4    1 2           1 3      1 4 
       3             2        2 
       4             4        3
 
  5.   1
       2
       3
       4
  """  
  
  Also, compare with the following models:
  - MiniZinc: http://www.hakank.org/minizinc/young_tableaux.mzn
  - JaCoP: http://www.hakank.org/JaCoP/YoungTableuax.java
  - Choco: http://www.hakank.org/choco/YoungTableuax.java


  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

 */

import cotfd;
int t0 = System.getCPUTime();

int n = 7;

Solver<CP> m();

//
// alldifferent except n+1
// It is variant of alldifferent except 0.
// Unfortunately it is quite slow
//
function void alldifferent_except_n_plus_1(Solver<CP> m, var<CP>{int}[] x, int nn) {
  int start = x.getLow();
  int end = x.getHigh();
  forall(i in start..end, j in i+1..end) {
    m.post(
           x[i] <= nn && x[j] <= nn 
           => 
           x[i] != x[j]
           );
  }
}

//
// The empty cells in x are represented as the number n+1 for simplifying the
// comparisons. In the output n+1 is replaced with " ".
//
var<CP>{int} x[1..n, 1..n](m, 1..n+1); // Young tableaux
var<CP>{int} p[1..n](m, 0..n+1);       // partition structure

Integer num_solutions(0);

exploreall<m> {

  //
  // 1..n is used exactly once (0 may be used many times)
  //
  // This works but is much slower than the version below.
  //alldifferent_except_n_plus_1(m, all(j in 1..n, k in 1..n) x[j,k], n);

  // This is faster.
  forall(i in 1..n) 
    m.post(sum(j in 1..n, k in 1..n) (x[j,k] == i) == 1);


  // always start with 1 in upper left corner
   m.post(x[1,1] == 1);

   // row wise: all rows should be increasing
   forall(i in 1..n) {
     forall(j in 2..n) {
       m.post(x[i,j] >= x[i,j-1]);
     }
     // m.post( (all(j in 1..n) (x[i,j]).sortPerm()); // This don't work...
   }


   // column wise: all columns should be increasing
   forall(j in 1..n) {
     forall(i in 2..n) {
       m.post(x[i,j] >= x[i-1,j]);
     }
   }

   // calculate the partition
   forall(i in 1..n) {
     m.post(p[i] == sum(j in 1..n) (x[i,j] <= n));
   }

   m.post(sum(i in 1..n) p[i] == n);

   forall(i in 2..n) 
     m.post(p[i-1] >= p[i]);

} using {
      
  label(m);

  num_solutions := num_solutions + 1;
      
  cout << p << endl;
  forall(i in 1..n) {
    if (p[i] > 0) {
      forall(j in 1..n) {
        if (x[i,j] <= n) {
          cout << x[i,j] << " ";
        } else {
          cout << " " << " ";
        }
      }
      cout << endl;
    }
  }
  cout << endl;

}

cout << "\nnum_solutions: " << num_solutions << endl;
    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << m.getNChoice() << endl;
cout << "#fail    = " << m.getNFail() << endl;
cout << "#propag  = " << m.getNPropag() << endl;

