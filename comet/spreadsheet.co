/*

  Simple spreadsheet in Comet.
 
  From Krzysztof Apt "Principles of Constraint Programming" page 16ff. Spreadsheet.
  Cf Winston "Artificial Intelligence", 3rd edition, page 235 
  (not the same values though)

  Compare with the MiniZinc model http://www.hakank.org/minizinc/spreadsheet.mzn


  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

 */

import cotfd;
// import cotls;
// import cotln;
int t0 = System.getCPUTime();

int n=10;
range Digits = 0..9;

float low = 0.0;
float up  = 1000.0;

Solver<CP> m();
var<CP>{float} B1(m, low,up);
var<CP>{float} B4(m, low,up);
var<CP>{float} B5(m, low,up);
var<CP>{float} C4(m, low,up);
var<CP>{float} C5(m, low,up);
var<CP>{float} D4(m, low,up);
var<CP>{float} D5(m, low,up);
var<CP>{float} E7(m, low,up);
var<CP>{float} E8(m, low,up);

Integer num_solutions(0);

exploreall<m> {

  m.post(B1 == 0.17);
  m.post(B4 == 3.5);
  m.post(B5 == 1.7);
  m.post(C4 == 1.5);
  m.post(C5 == 4.5);
  m.post(D4 == B4 * C4);
  m.post(D5 == B5 * C5);
  m.post(E7 == D4 + D5);
  m.post(E8 == E7 * (1.0 + B1) );

} using {
      
  label(m);

  num_solutions := num_solutions + 1;

  cout << B1 << " " << B4 << " " << B5 << " " << C4 << " " << C5 << " " ;
  cout << D4 << " " << D5 << " " << E7 << " " << E8 << endl;

}

cout << "\nnum_solutions: " << num_solutions << endl;
    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << m.getNChoice() << endl;
cout << "#fail    = " << m.getNFail() << endl;
cout << "#propag  = " << m.getNPropag() << endl;

