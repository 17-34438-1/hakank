/*

  Extensional support/conflict in Comet.

  A.k.a globel constraint in_relation:
  http://www.emn.fr/x-info/sdemasse/gccat/Cin_relation.html

  In OPL this is called allowedAssignments and forbiddenAssignments.


  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

 */


import cotfd;

int t0 = System.getCPUTime();

range R = 1..6;

//
// extensional suppprt
// Example from  http://www.emn.fr/x-info/sdemasse/gccat/Cin_relation.html
//
int allowed[1..3, 1..3] = 
  [
   [5,2,3], 
   [5,2,6], 
   [5,3,3]
];


//
// for extensional conflicit
//
int forbidden[1..6, 1..3] = 
  [
   [1,1,1],
   [2,2,2],
   [3,3,3],
   [4,4,4],
   [5,5,5],
   [6,6,6]
   ];

 

Solver<CP> m();

var<CP>{int} x[1..3](m, R);


//
// allowed assignments
//
function void extensional_support(var<CP>{int} [] x, int[,] allowed) {

  range R1 = allowed.getRange(0);
  range R2 = allowed.getRange(1);
  Solver<CP> m = x[1].getSolver();

  m.post( or(c in R1) (
                       and(i in R2) 
                         allowed[c,i] == x[i]
                       )
          );  
}

//
// forbidden sssignments
//
function void extensional_conflict(var<CP>{int} [] x, int[,] forbidden) {

  range R1 = forbidden.getRange(0);
  range R2 = forbidden.getRange(1);
  Solver<CP> m = x[1].getSolver();

  forall(c in R1)
    m.post(or(i in R2) forbidden[c,i] != x[i]);

}



Integer num_solutions(0);
// explore<m> {
exploreall<m> {
// minimize<m> z subject to {

  extensional_support(x, allowed);
  // extensional_conflict(x, forbidden);



} using {
      
  label(m);

  num_solutions := num_solutions + 1;


  cout << x << endl;

}

cout << "\nnum_solutions: " << num_solutions << endl;
    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << m.getNChoice() << endl;
cout << "#fail    = " << m.getNFail() << endl;
cout << "#propag  = " << m.getNPropag() << endl;

