/*

  Test of builtin constraint minAssignment in Comet.


  From
   "SAS OR 9.1 User's Guide Mathematical Programming"
  """
  Consider assigning five programmers to five programming jobs. Each
  programmer prefers specific programming job over others. [...]
  Suppose you ask each programmer to rank the jobs according to preference
  (using 1 for the most preferred job and 5 for the least preffered job).
  PROC ASSIGN maximizes the total preference of the group by minimizing the
  sum of the preferences.
 
     PROGRAMMER     JOB1 JOB2 JOB3 JOB4 JOB5
     PROGRAMMER1    4    1    3    5    2
               2    2    1    3    4    5
               3    3    2    4    1    5
               4    2    3    4    5    1
               5    4    2    3    1    5
 
  """

  The solution should be:
 
    P1 -> 2
    P2 -> 1
    P3 -> 4
    P4 -> 5
    P5 -> 3
 
  And so it is:

    cost: 8
    0 1 0 0 0  2
    1 0 0 0 0  1
    0 0 0 0 1  4
    0 0 1 0 0  5
    0 0 0 1 0  3

  Which is a unique solution.


  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

 */

import cotfd;

int t0 = System.getCPUTime();

int n = 5;
range R = 1..n;

int w[R, R] = 
 [
  [4, 1, 3, 5, 2],
  [2, 1, 3, 4, 5],
  [3, 2, 4, 1, 5],
  [2, 3, 4, 5, 1],
  [4, 2, 3, 1, 5]
   ];
  


cout << "R: " << R << endl;

Solver<CP> m();
var<CP>{int} x[R](m, R);
var<CP>{int} cost(m, 0..1000);



Integer num_solutions(0);

minimize<m> cost subject to {

  m.post(minAssignment(x, w, cost));
  

} using {
      
  label(m);

  num_solutions++;

}


cout << "cost: " << cost << endl;
// cout << x << endl;

forall(i in R) {
  forall(j in R) {
    int c = 0;
    if (x[j] == i)
      c = 1;
    cout << c << " ";
  }
  cout << " " << x[i] << endl;

}


cout << "\nnum_solutions: " << num_solutions << endl;
    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << m.getNChoice() << endl;
cout << "#fail    = " << m.getNFail() << endl;
cout << "#propag  = " << m.getNPropag() << endl;

