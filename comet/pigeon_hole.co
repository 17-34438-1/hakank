/*

  Pigeon hole problem in Comet.

  ftp://ftp.inria.fr/INRIA/Projects/contraintes/publications/CLP-FD/plilp94.html
  """
  pigeon: the pigeon-hole problem consists in putting n pigeons in m pigeon-holes 
  (at most 1 pigeon per hole). The boolean formulation uses n - m variables to 
  indicate, for each pigeon, its hole number. Obviously, there is a 
  solution iff n <= m.
  """
 
  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

 */

import cotfd;

int t0 = System.getCPUTime();

Solver<CP> m();
int N = 3; // N pigeons
int M = 10; // M pigeon holes

// i pigeon at j pigeon holes
var<CP>{int} pigeon_holes[1..N,1..M](m, 0..1);

assert(N <= M);

Integer num_solutions(0);

//
// integer programming version
//
function void pigeon(int N, int M, var<CP>{int} [,] p) {
  Solver<CP> cp = p[1,1].getSolver();

  // max 1 pigeon per pigeon hole
  forall(j in 1..M) 
    cp.post(sum(i in 1..N) p[i,j] <= 1);

  // all pigeon must be placed and only at one hole
  forall(i in 1..N) 
    cp.post(sum(j in 1..M) p[i,j] == 1);
}


exploreall<m> {

  pigeon(N, M, pigeon_holes);
  m.post(pigeon_holes[1,1] == 1); // some symmetry breaking

} using {
      
  label(m);

  num_solutions++;
      
  forall(i in 1..N) {
    forall(j in 1..M) {
      cout << pigeon_holes[i,j] << " ";
    }
    cout << endl;
  }
  cout << endl;

}


cout << "\nnum_solutions: " << num_solutions << endl;
    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << m.getNChoice() << endl;
cout << "#fail    = " << m.getNFail() << endl;
cout << "#propag  = " << m.getNPropag() << endl;

