/*
 OPL code from Karsten Konrad:
 http://lookforlight.tumblr.com/post/996786415/lets-do-real-cp-forbiddenassignment

*/
/*********************************************
 * The n x m grid is c-colorable if there is a way
 * to c-color the vertices of the n x m grid so that
 * there is no rectangle with all four corners the
 * same color. (The rectangles I care about have the
 * sides parallel to the x and y axis.)
 *
 *
 * Is there a 17x17 solution?
 * see: http://blog.computationalcomplexity.org/2009/11/17x17-challenge-worth-28900-this-is-not.html
 *
 * OPL 6.3 Model
 * Author: karsten.konrad
 * Creation Date: 19.08.2010 at 10:39:14
 *********************************************/

/*
  Solution of 14x14x4:
1 3 4 4 2 2 1 1 4 3 4 2 3 3 
2 1 2 2 3 1 4 3 1 4 3 4 2 1 
1 4 2 3 4 1 2 2 3 1 1 2 1 3 
3 2 1 1 4 3 3 4 1 1 2 2 2 3 
4 1 2 3 1 4 3 1 2 1 3 3 4 2 
1 1 3 2 2 3 2 4 4 3 3 1 4 4 
3 2 4 2 4 2 4 2 3 1 3 1 3 1 
4 4 1 3 3 3 1 2 4 2 2 4 3 1 
4 1 1 4 3 2 2 4 2 2 1 3 2 3 
2 4 4 1 2 1 1 2 2 4 3 1 4 3 
2 2 3 4 4 4 3 1 1 2 1 4 3 4 
2 4 1 4 3 2 3 1 3 3 2 1 1 2 
3 3 3 2 1 4 1 4 1 2 4 2 1 2 
1 3 2 1 1 3 4 3 3 2 4 3 4 1 


num_solutions: 1
time:      1159080
#choices = 2837522
#fail    = 3705868
#propag  = 601044076
comet -q 17_b.co  1155.92s user 0.10s system 99% cpu 19:19.71 total

 */

// using CP;
import cotfd;

int t0 = System.getCPUTime();
Solver<CP> cp();
// cp.setSearchController(DFSController(cp));
// cp.setSearchController(BDSController(cp,1));
cp.setSearchController(BoundedDiscrepancyDFSController(cp, 10));

/*
int NbColumns = 14;
int NbRows = 15;
int NbColors = 4;
*/

int NbRows = 13;
int NbColumns = 13;
int NbColors = 4;
cout << "NbRows   : " << NbRows << endl;
cout << "NbColumns: " << NbColumns << endl;
cout << "argc: " << System.argc() << endl;

range Columns = 1..NbColumns;
range Rows = 1..NbRows;
range Colors = 1..NbColors;

// dvar int space[Rows][Columns] in Colors;
var<CP>{int} space[Rows,Columns](cp, Colors);

/*
int forbidden[Colors, 1..4];
forall(i in Colors) {
  forbidden[i,1] = i;
  forbidden[i,2] = i;
  forbidden[i,3] = i;
  forbidden[i,4] = i;
}
*/
// much easier:
int forbidden[i in Colors, j in 1..4] = i;
cout << "forbidden:" << endl;
forall(i in Colors) {
  forall(j in 1..4) {
    cout << forbidden[i,j] << " ";
  }
  cout << endl;
}
cout << endl;

int occur_min[1..4] = 0;
int occur_max[1..4] = 3;
cout << occur_min << endl;
cout << occur_max << endl;

Integer num_solutions(0);
// cp.restartOnFailureLimit(1000);

// minimize 0;
// exploreall<cp> {
explore<cp> {

  // cp.post(space[1,1] == 1);
  // cp.post(space[NbRows,NbColumns] == 2);
   
  forall(r in Rows, r2 in 1..r-1, c in Columns, c2 in 1..c-1) {

    var<CP>{int} tmp[1..4] = [space[r,c],space[r2,c],space[r,c2],space[r2,c2]];
    cp.post(cardinality(occur_min,tmp,occur_max), Auto);
    // cp.post(atmost(occur_max,tmp), onDomains);


    // forbiddenAssignments(tmp, forbidden);

    // explicit gcc, which should be slower than using cardinality()
    /*
    var<CP>{int} gcc[1..4](cp, 0..NbColors);
    cp.post(cardinality(gcc,tmp));
    forall(i in 1..4) {
      cp.post(gcc[i] < 4);
    }
    */
  }


} using {

  // labelFF(cp);
  // label(space);

  num_solutions++;

  // cf Comet Tutorial Value heuristics, page 214ff
  /*
  forall(i in Rows, j in Columns: !space[i,j].bound()) {
    int mid = (space[i,j].getMin() + space[i,j].getMax()) / 2;
    tryall<cp>(v in space[i,j].getMin()..space[i,j].getMax() : space[i,j].memberOf(v)) by (abs(v-mid))
      cp.label(space[i,j],v);
    onFailure
      cp.post(space[i,j] != v);        
  }
  */

  // random version using select
  while (!bound(space)) {
    select(i in Rows, j in Columns: !space[i,j].bound()) {
      // cout << "i: " << i << " j: " << j << endl;
      int mid = (space[i,j].getMin() + space[i,j].getMax()) / 2;
      // tryall<cp>(v in space[i,j].getMin()..space[i,j].getMax() : space[i,j].memberOf(v)) by (abs(v-mid))
      // tryall<cp>(v in space[i,j].getMin()..space[i,j].getMax() : space[i,j].memberOf(v))
      tryall<cp>(v in space[i,j].getMin()..space[i,j].getMax() : !space[i,j].bound() && space[i,j].memberOf(v))
      // tryall<cp>(v in Colors : space[i,j].memberOf(v)) by (abs(v-mid))
        cp.label(space[i,j],v);
      onFailure
        // cp.post(space[i,j] != v);
        cp.diff(space[i,j], v);
    }
  }

  forall(i in Rows) {
    forall(j in Columns) {
      cout << space[i,j] << " ";
    }
    cout << endl;
  }
  cout << endl;
}
onRestart {
  int numFailureLimit = cp.getRestartFailureLimit();
   cout << "too many failures => restart! " << numFailureLimit  << " ";
   int t1 = System.getCPUTime();
   int diff = (t1-t0);
   cout << " time from start: " << diff/1000 << " seconds" << "  " << diff/(1000*60) << " minutes " << endl;
   cp.setRestartFailureLimit(numFailureLimit + 1000);
}


cout << "\nnum_solutions: " << num_solutions << endl;
    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << cp.getNChoice() << endl;
cout << "#fail    = " << cp.getNFail() << endl;
cout << "#propag  = " << cp.getNPropag() << endl;


//
// forbiddenAssignment
//
function void forbiddenAssignments(var<CP>{int} [] x, int[,] forbidden) {

  range R1 = forbidden.getRange(0);
  range R2 = forbidden.getRange(1);
  Solver<CP> m = x[1].getSolver();

  forall(c in R1)
    m.post(or(i in R2) forbidden[c,i] != x[i]);

}

