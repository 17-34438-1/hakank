/*

  Furniture moving (simple scheduling problem) in Comet.
 
  Problem from Marriott & Stuckey: 'Programming with constraints', page  112f


  Compare with the other models
  * MiniZinc: http://www.hakank.org/minizinc/furniture_moving.mzn
  * Choco: http://www.hakank.org/choco/FurnitureMoving.java
  * JaCoP: http://www.hakank.org/jacop/FurnitureMoving.java


  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

 */

import cotfd;
int t0 = System.getCPUTime();

/*
  Note: With Scheduler it seems not to be possible to use capacity as
        as a decision variable, so we cant minimize over the number of people
        to use.
        And for this simple model, using Scedule at all is probably overkill...
 */

int nbTasks = 4;
range Tasks = 1..nbTasks;

int duration[Tasks] =  [30,10,15,15];
int totalDuration   = sum(t in Tasks) duration[t];
int demand[Tasks]   =  [3,1,3,2];

// Precedence requirements
tuple P { int before; int after; }
set{P} setOfPrecedences = {P(1,2)};

// Solver<CP> m();
int capacity = 4; // Number of people to us.e
// var<CP>{int} capacity(m,0..4);

Scheduler<CP> cp(totalDuration);
Activity<CP> a[t in Tasks](cp,duration[t]);
DiscreteResource<CP> d(cp,capacity);
Activity<CP> makespan(cp,0);

Integer num_solutions(0);

// exploreall<cp> {
minimize<cp>  makespan.end() subject to {


   forall(t in Tasks)
      a[t].precedes(makespan);
   
   forall(p in setOfPrecedences)
      a[p.before].precedes(a[p.after]);

   forall(t in Tasks)
      a[t].requires(d,demand[t]);

   // cp.post(makespan.start() <= 60); // for exploreall

} using {
  
  forall(t in Tasks)
    label(a[t]);

  labelFF(cp);

  forall(t in Tasks) {
    cout << "task " << t << ": " << a[t] << " ";
    cout << endl;
  }

  cout << "Makespan: start " << makespan.start() <<  " end: " << makespan.end() << endl;
  cout << endl;

  num_solutions := num_solutions + 1;


}

cout << "\nnum_solutions: " << num_solutions << endl;

forall(t in Tasks) {
  cout << a[t] << " ";
  cout << endl;
}

cout << "Makespan: start " << makespan.start() <<  " end: " << makespan.end() << endl;

    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << cp.getNChoice() << endl;
cout << "#fail    = " << cp.getNFail() << endl;
cout << "#propag  = " << cp.getNPropag() << endl;

