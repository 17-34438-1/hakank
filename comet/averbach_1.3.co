/*

  Recreational Mathematics in Comet.

  Problem 1.3 from 
  Averbach & Chein "Problem Solving Through Recreational Mathematics", page 2.
  """
  Armand Alloway, Basil Bennington, Col. Carton Cunningham, Durwood Dunstan, and 
  Everitt Elmsby, Esq are the five senior members of the Devonshire Polo Club. 
  Each owns a pony that is named of the wife of one of the others.
  
  - Mr Alloway's pony is named Geogette; 
  - Col Cunningham owns Jasmine
  - Mr Elmsby owns Inez
  - Francine, owned by Mr Dunstan is named after Alloways wife
  - Georgettes husband owns the pony that is named after Mr Bennington's wife
  - Helene Cunningham is the only wife who knows how to ride a horse.
  
  Who is Jasmine's husband? Who owns Helene?
  """

  Compare with the following models:
  * MiniZinc: http://hakank.org/minizinc/averbach_1.3.mzn
  * ECLiPSe: http://hakank.org/eclipse/averbach_1.3.ecl
  * SICStus Prolog: http://hakank.org/sicstus/averbach_1.3.pl
  * Gecoge: http://hakank.org/gecode/averbach_1.3.cpp

  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

*/

import cotfd;
int t0 = System.getCPUTime();

// the men
int Alloway = 1;
int Bennington = 2;
int Cunningham = 3;
int Dunstan = 4;
int Elmsby = 5;


// the name of the wifes, and the names of the ponies
int Francine = 1;
int Georgette = 2;
int Helene = 3;
int Inez = 4;
int Jasmine = 5;

range R = 1..5;

Solver<CP> m();
// int men[R] = [Alloway,Bennington,Cunningham,Dunstan,Elmsby];
var<CP>{int} wife[R](m, R);
var<CP>{int} pony[R](m, R);



Integer num_solutions(0);
// explore<m> {
exploreall<m> {
// minimize<m> z subject to {

  m.post(alldifferent(wife));
  m.post(alldifferent(pony));

  // wife and pony don't have the same name
  forall(i in R) {
    m.post(pony[i] != wife[i]);
  }

  // Mr Alloway's pony is named Geogette; 
  m.post(pony[Alloway] == Georgette);

  m.post(wife[Alloway] != Georgette);

  // Col Cunningham owns Jasmine
  m.post(pony[Cunningham] == Jasmine);

  m.post(wife[Cunningham] != Jasmine);
 
  // Mr Elmsby owns Inez
  m.post(pony[Elmsby] == Inez);
  m.post(wife[Elmsby] != Inez);

  // Francine, owned by Mr Dunstan is named after Alloways wife
  m.post(pony[Dunstan] == Francine);
  m.post(wife[Alloway] == Francine);
    
  // Georgettes husband owns the pony that is named after Mr Bennington's wife
  // "There is an X such that X is is Georgettes husband and X owns a pony
  // with the same name as Bennington's wife."
  // temporary
  var<CP>{int} X(m,R);
  m.post(wife[X] == Georgette);
  m.post(pony[X] == wife[Bennington]);

  // Helene Cunningham is the only wife who knows how to ride a horse.
  m.post(wife[Cunningham] == Helene);


} using {
      
  labelFF(m);
  num_solutions++;

      
  cout << wife << endl;
  cout << pony << endl;  

}

cout << "\nnum_solutions: " << num_solutions << endl;
    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << m.getNChoice() << endl;
cout << "#fail    = " << m.getNFail() << endl;
cout << "#propag  = " << m.getNPropag() << endl;

