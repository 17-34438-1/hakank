/*
   DONAL + ROBERT = GERALD in Comet

   Clasic alphametic problem
 */

import cotfd;

int t0 = System.getCPUTime();

range Digits = 0..9;

Solver<CP> m();

var<CP>{int} D(m,Digits);
var<CP>{int} O(m,Digits);
var<CP>{int} N(m,Digits);
var<CP>{int} A(m,Digits);
var<CP>{int} L(m,Digits);
var<CP>{int} G(m,Digits);
var<CP>{int} E(m,Digits);
var<CP>{int} R(m,Digits);
var<CP>{int} B(m,Digits);
var<CP>{int} T(m,Digits);

var<CP>{int} x[1..10];
x[1]=D; x[2]=O; x[3]=N; x[4]=A; x[5]=L; 
x[6]=G; x[7]=E; x[8]=R; x[9]=B; x[10]=T;

Integer num_solutions(0);
exploreall<m> {
  
  m.post(alldifferent(x));
  m.post(100000*D + 10000*O + 1000*N + 100*A + 10*L + D 
       + 100000*G + 10000*E + 1000*R + 100*A + 10*L + D
      == 100000*R + 10000*O + 1000*B + 100*E + 10*R + T);
  m.post(D > 0);
  m.post(G > 0);
  m.post(R > 0);


  
} using {
  
  // forall(i in 1..10 : !x[i].bound())  by (-x[i].getSize()) {
  //  label(x[i]);
  //}
  
  labelFF(x);
  
  cout << "x: " << x << endl;
  
 num_solutions := num_solutions + 1;
  // labelFF(x);
}


cout << "num_solutions: " << num_solutions << endl;
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << m.getNChoice() << endl;
cout << "#fail    = " << m.getNFail() << endl;
cout << "#propag  = " << m.getNPropag() << endl;

