/*

  Magic series in Comet.

  From Pascal Van Hentenryck "The OPL Optimization Programming Language",
  page 40.

  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

 */

import cotfd;

int t0 = System.getCPUTime();

int n = 50;
range Range = 0..n-1;
range Domain = 0..n;


Solver<CP> m();
var<CP>{int} s[Range](m, Domain);

Integer num_solutions(0);

exploreall<m> {

  forall(i in Range)
    m.post(s[i] == sum(j in Range) (s[j] == i));

  m.post(sum(i in Range) s[i] == n);
  m.post(sum(i in Range) s[i]*i == n);
  
} using {
      
  label(m);
  num_solutions++;

  cout << s << endl;

}

cout << "\nnum_solutions: " << num_solutions << endl;
    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << m.getNChoice() << endl;
cout << "#fail    = " << m.getNFail() << endl;
cout << "#propag  = " << m.getNPropag() << endl;

