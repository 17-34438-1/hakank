/*

  Rot 13 (Caesar cipher) in Comet.

  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

 */

import cotfd;

int t0 = System.getCPUTime();

int num_letters = 27;
enum alpha = {zero, a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z, space};
string az[1..num_letters] = ["a","b","c","d","e","f","g","h","i","j","k","l","m",
                             "n","o","p","q","r","s","t","u","v","w","x","y","z", " "];

int rot = 13;       // the rotate number

int len = 14;       // string length
int text[1..len] = [t,h,i,s,space,i,s,space, a,space,t,e,s,t];

Integer num_solutions(0);

// Test all rotations
forall(rot in 0..num_letters) {

Solver<CP> m();
var<CP>{int} rotated[1..len](m, 1..num_letters); // the rotated string


exploreall<m> {

  forall(i in 1..len) {
    var<CP>{int} t(m, 0..num_letters);

    m.post(t == (text[i] + rot) % num_letters);
    m.post(t == 0 => rotated[i] == num_letters);
    m.post(t > 0 => rotated[i] == t);

  }

} using {
      
  label(m);

  num_solutions := num_solutions + 1;
  
  forall(i in 1..len)
    cout << az[rotated[i]] ;
  cout << " (rot: " << rot << ")" << endl;

}

// cout << "num_solutions: " << num_solutions << endl;

int t1 = System.getCPUTime();
/*
  cout << "time:      " << (t1-t0) << endl;
  cout << "#choices = " << m.getNChoice() << endl;
  cout << "#fail    = " << m.getNFail() << endl;
  cout << "#propag  = " << m.getNPropag() << endl;
*/

}
