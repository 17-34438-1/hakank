/*

  Word design for DNA computing on surfaces in Comet.

  CSPLib problem 033: http://www.csplib.org/prob/prob033/

  This Comet model was inspired by the OPL model from
  Toni Mancini, Davide Micaletto, Fabio Patrizi, Marco Cadoli: 
  "Evaluating ASP and commercial solvers on the CSPLib"
  http://www.dis.uniroma1.it/~tmancini/index.php?problemid=033&solver=OPL&spec=BASE&currItem=research.publications.webappendices.csplib2x.problemDetails#listing


  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

 */

/*

  A solution (using explore) for nbwords = 112 took 36.5 seconds with the following
  statistics:

  time:      34032
  #choices = 10408
  #fail    = 24393
  #propag  = 42293847

 */

import cotfd;

int t0 = System.getCPUTime();

int nbwords = 12; // to change
enum alphabet = {A,C,G,T};
int length = 8; // fixed

range word_idx = 1..nbwords;
range letter_idx = 1..length;

dict{int->int} replacement();
replacement{A} = T;
replacement{C} = G;
replacement{G} = C;
replacement{T} = A;


Solver<CP> m();

// Search space: The possible sets of nbwords words of length 8 with components in
// {A,C,G,T}
var<CP>{int} words[word_idx,letter_idx](m, alphabet);


Integer num_solutions(0);
explore<m> {
// exploreall<m> {
// minimize<m> z subject to {


  // C1: Each word in the guessed set has 4 symbols from {C,G}
  forall(w in word_idx) {
    m.post(sum(p in letter_idx)(words[w,p] ==C || words[w,p]==G) == 4);
  }
   
  // C2: Each pair of distinct words in the guessed set differ in at least 4 positions
  forall(v in word_idx, w in word_idx: v != w) {
    m.post(sum(p in letter_idx)(words[v,p] != words[w,p]) >= 4);
  }
   
  // C3: Each pair of words x and y in the guessed set (where x and
  // y may be identical) are such that R(x) and C(y) differ in at
  // least 4 positions (see problem specification for definitions of R(x) and
  // C(x))
  forall(v in word_idx, w in word_idx) {
    m.post(sum(p in letter_idx)(words[v,length+1-p] != replacement{words[w,p]}) >= 4);
  }


  // SBSO: Symmetry-breaking by selective ordering
  // An ordering over the alphabet symbols is fixed: A < C < G < T, and the assignment is
  // forced to guess sets in which the word having the lowest index (the "first" word wrt the
  // set representation) is lexicographically less than the one having the highest index (the
  // "last" word).
  /*
  m.post(( sum (i1 in 0..length-1)( 
                            ( sum (i2 in 1..i1)(words[1,i2]==words[nbwords,i2]) ) == i1 && 
                            ( words[1,i1+1] < words[nbwords,i1+1] )
                             )
           ) == 1); 
  */

} using {
      
  labelFF(m);

  /*
  forall(v in word_idx,  w in letter_idx: !words[v,w].bound()) {
    label(words[v,w]);
  }
  */

  num_solutions := num_solutions + 1;

  forall(v in word_idx) {
    forall(w in letter_idx) {      
      cout << words[v,w] << " ";
    }
  cout << endl;
  }
  cout << endl;


}

cout << "\nnum_solutions: " << num_solutions << endl;
    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << m.getNChoice() << endl;
cout << "#fail    = " << m.getNFail() << endl;
cout << "#propag  = " << m.getNPropag() << endl;

