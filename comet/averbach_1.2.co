/*

  Recreational Mathematics in Comet.

  From Averbach & Chein "Problem Solving Through Recreational Mathematics", 
  page 2, problem 1.2
  
  """
  Ms X, Ms Y, and Ms Z - and American woman, and Englishwoman, and a Frenchwoman, but not
  neccessarily in that order, were seated around a circular table, playing a game of Hearts.
  Each passed three cards to the person on her right.
  Ms Y passed three hearts to the American, 
  Ms X passed the queen of spades and two diamonds to the person who passed her cards
  to the Frenchwoman
  
  Who was the American? The Englishwoman? The Frenchwoman?
  """

  Compare with the following models:
  * MiniZinc: http://hakank.org/minizinc/averbach_1.2.mzn
  * ECLiPSe: http://hakank.org/eclipse/averbach_1.2.ecl
  * SICStus Prolog: http://hakank.org/sicstus/averbach_1.2.pl
  * Gecoge: http://hakank.org/gecode/averbach_1.2.cpp

  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

*/

import cotfd;
int t0 = System.getCPUTime();

range R = 1..3;

Solver<CP> m();
var<CP>{int} X(m, R);
var<CP>{int} Y(m, R);
var<CP>{int} Z(m, R);

var<CP>{int} xtable[1..3] = [X,Y,Z];

var<CP>{int} American(m, R);
var<CP>{int} English(m, R);
var<CP>{int} French(m, R);
var<CP>{int} ctable[1..3] = [American,English,French];

Integer num_solutions(0);
// explore<m> {
exploreall<m> {
// minimize<m> z subject to {

  m.post(alldifferent(xtable));
  m.post(alldifferent(ctable));

  rightTo(m, Y, American);
  leftTo(m, X, French);

  // symmetry breaking
  m.post(X == 1); 

} using {
      
  labelFF(m);
  num_solutions++;

      
  cout << xtable << endl;
  cout << "American: " << American << " English: " << English << " French: " << French << endl;

}

cout << "\nnum_solutions: " << num_solutions << endl;
    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << m.getNChoice() << endl;
cout << "#fail    = " << m.getNFail() << endl;
cout << "#propag  = " << m.getNPropag() << endl;


function void rightTo(Solver<CP> m, var<CP>{int} x, var<CP>{int} y) {
  m.post((x == y + 1) || (x == y - 2));
}

function void leftTo(Solver<CP> m, var<CP>{int} x, var<CP>{int} y) {
  rightTo(m, y, x);
}
