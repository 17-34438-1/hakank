/*

  Hidato puzzle in Comet.
  
  http://www.shockwave.com/gamelanding/hidato.jsp
  http://www.hidato.com/
 
  """
  Puzzles start semi-filled with numbered tiles.
  The first and last numbers are circled.
  Connect the numbers together to win. Consecutive
  number must touch horizontally, vertically, or
  diagonally.
  """

  Compare with the following models: 
  * MiniZinc: http://www.hakank.org/minizinc/hidato.mzn
  * Gecode: http://www.hakank.org/gecode/hidato.cpp


  This Comet model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
  Also, see my Comet page: http://www.hakank.org/comet 

 */

import cotfd;
// import cotls;
// import cotln;
int t0 = System.getCPUTime();

range C = -1..1;

// Simple problem
/*
int r = 3;
int c = r;
int puzzle[1..r, 1..c] = 
  [ 
   [6,0,9],
   [0,2,8],
   [1,0,0]
  ];
*/

/*
int r = 7;
int c = 7;
int puzzle[1..r, 1..c] = 
  [ 
   [0,44,41, 0, 0, 0, 0],
   [0,43, 0,28,29, 0, 0],
   [0, 1, 0, 0, 0,33, 0],
   [0, 2,25, 4,34, 0,36],
   [49,16, 0,23, 0, 0, 0],
   [0,19, 0, 0,12, 7, 0],
   [0, 0, 0,14, 0, 0, 0] 
    ];
*/


// Problems from the book:
// Gyora Bededek: "Hidato: 2000 Pure Logic Puzzles"


// problem 1 (Practice)
/*
int r=5;
int c = r;
int puzzle[1..r, 1..c] = 
  [
   [0, 0,20, 0, 0],
   [0, 0, 0,16,18],
   [22, 0,15, 0, 0],
   [23, 0, 1,14,11],
   [0,25, 0, 0,12],
   ];
*/

/*
// problem 2 (Practice)
int r=5;
int c=r;
int puzzle[1..r, 1..c] =
  [
   [0, 0, 0, 0,14],
   [0,18,12, 0, 0],
   [0, 0,17, 4, 5],
   [0, 0, 7, 0, 0],
   [9, 8,25, 1, 0],
   ];
*/

/*
// problem 3 (Beginner)
int r=6;
int c = r;
int puzzle[1..r, 1..c] =
  [
   [0, 26,0,0,0,18],
   [0,0,27,0,0,19],
   [31,23,0,0,14,0],
   [0,33,8,0,15,1],
   [0,0,0,5,0,0],
   [35,36,0,10,0,0]
   ];
*/

// Problem 15 (Intermediate)
int r=8;
int c=r;
int puzzle[1..r, 1..c] = 
  [
   [64, 0, 0, 0, 0, 0, 0, 0],
   [ 1,63, 0,59,15,57,53, 0],
   [ 0, 4, 0,14, 0, 0, 0, 0],
   [ 3, 0,11, 0,20,19, 0,50],
   [ 0, 0, 0, 0,22, 0,48,40],
   [ 9, 0, 0,32,23, 0, 0,41],
   [27, 0, 0, 0,36, 0,46, 0],
   [28,30, 0,35, 0, 0, 0, 0]
   ];


Solver<CP> m();

var<CP>{int} x[1..r, 1..c](m, 1..r*c);

Integer num_solutions(0);

exploreall<m> {

  // place all integers from 1..r*c
  m.post(alldifferent(all(i in 1..r, j in 1..c) x[i,j]));

    // place the fixed tiles
  forall(i in 1..r, j in 1..c) 
    if (puzzle[i,j] > 0) 
      m.post(x[i,j] == puzzle[i,j]);
        
  /*
  // first version: using 4 tryall:s
  forall(k in 1..r*c-1) {
    tryall<m>(i in 1..r) {
      tryall<m>(j in 1..c) {

        m.post(k == x[i, j]); // fix this k
        tryall<m>(a in C) {
         tryall<m>(b in C :
                    i+a >= 1 && j+b >=  1 &&
                    i+a <= r && j+b <= c
                    && !(a == 0 && b == 0) 
                    )
            {
              // find the next k
              m.post(k + 1 == x[i+a, j+b]);
            }
         }
      }
    }
  }
  */

  // more declarative version (based on my Gecode version)
  // this version has fewer failures and choices(but more propagations)
  forall(k in 1..r*c-1) {
    var<CP>{int} i(m, 1..r);
    var<CP>{int} j(m, 1..c);
    var<CP>{int} a(m, -1..1);
    var<CP>{int} b(m, -1..1);
    
    // Make sure we are within the borders of the matrix
    // This is not needed.
    /*
    m.post(i+a >= 1);
    m.post(j+b >= 1);
    m.post(i+a <= r);
    m.post(j+b <= c);
    m.post(!(a == 0 && b == 0)); // must move
    */

    // 1) First: fix this k, i.e.
    m.post(k == x[i,j]);
    
    // 2) Then, find the position of the next value, i.e.
    m.post(k + 1 == x[(i+a),(j+b)]);
  }

  
  
} using {
      
  labelFF(m);
  /*
  forall(j in 1..r, i in 1..c: !x[i,j].bound()) {
    tryall<m>(v in 1..r*c) by (v)
      m.label(x[i,j], v);
    onFailure
      m.post(x[i,j] != v);
  }
  */

  num_solutions++;
      
  forall(i in 1..r) {
    forall(j in 1..c) {

      cout << x[i,j] << " ";
    }
    cout << endl;
  }
  cout << endl;
  

}

cout << "\nnum_solutions: " << num_solutions << endl;
    
int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
cout << "#choices = " << m.getNChoice() << endl;
cout << "#fail    = " << m.getNFail() << endl;
cout << "#propag  = " << m.getNPropag() << endl;

