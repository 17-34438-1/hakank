/*
   SEND + MOST = MONEY in Comet

   Alphametic problem were we maximize MONEY.
   This version do two things:
    - find the minimium of MONEY
    - then show all solutions for the minimum value of MONEY


   Problem from the lecture notes:
   http://www.ict.kth.se/courses/ID2204/notes/L01.pdf

 */

import cotfd;

int t0 = System.getCPUTime();

int MONEY = send_most_money(0);
cout << "\nMONEY: " << MONEY << endl;
cout << endl;
int MONEY2 = send_most_money(MONEY);

// the constraints
function void smm(Solver<CP> m, var<CP>{int}[] x, var<CP>{int} MONEY) {

  range Digits = 0..9;

  var<CP>{int} S(m,Digits);
  var<CP>{int} E(m,Digits);
  var<CP>{int} N(m,Digits);
  var<CP>{int} D(m,Digits);
  var<CP>{int} M(m,Digits);
  var<CP>{int} O(m,Digits);
  var<CP>{int} T(m,Digits);
  var<CP>{int} Y(m,Digits);
  x[1]=S; x[2]=E; x[3]=N; x[4]=D;
  x[5]=M; x[6]=O; x[7]=T; x[8]=Y;

  m.post(MONEY == 10000 * M + 1000 * O + 100 * N + 10 * E + Y);
  m.post(alldifferent(x));
  m.post(M != 0);
  m.post(S != 0);
  m.post(                 1000 * S + 100 * E + 10 * N + D +
                          1000 * M + 100 * O + 10 * S + T ==  MONEY);

}


//
// the main function
//
function int send_most_money(int money) {
  Integer ret(0);

  Integer num_solutions(0);
  Solver<CP> m();
  var<CP>{int} x[1..8];
  var<CP>{int} MONEY(m, 0..100000);
  if (money > 0) {

    cout << "check all solutions for MONEY = " << money << endl;
    exploreall<m> {

      smm(m, x, MONEY);
      m.post(MONEY == money); // the additional constraint

    } using {

      label(m);
      cout << x << " MONEY: " << MONEY << endl;
      num_solutions := num_solutions + 1;
    }
    
  } else {

    cout << "find maximum value of MONEY" << endl;
    maximize<m> MONEY subject to {

      smm(m, x, MONEY);

    } using {

      label(m);

    }
    cout << x << " MONEY: " << MONEY << endl;
  }

  if (money > 0) 
    cout << "\nnum_solutions: " << num_solutions << endl;

  cout << "#choices = " << m.getNChoice() << endl;
  cout << "#fail    = " << m.getNFail() << endl;
  cout << "#propag  = " << m.getNPropag() << endl;

  ret := MONEY;    

  return ret;
}

int t1 = System.getCPUTime();
cout << "time:      " << (t1-t0) << endl;
