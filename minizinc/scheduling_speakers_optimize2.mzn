% This is a model by Igor K from
% http://stackoverflow.com/questions/20747059/optimizing-working-scheduling-minizinc-code-constraint-programming
% (with some of my, hakank's, changes):
% """
% Please can you help optimize this working MiniZinc code:
% Task: There is a conference which has 6x time slots. There are 3 speakers attending 
% the conference who are each available at certain slots. Each speaker will present for 
% a predetermined number of slots.
%
% Objective: Produce the schedule that has the earliest finish of speakers.
%
% Example: Speakers A, B & C. Talk durations = [1, 2, 1]
%
% Speaker availability:
%
% +---+------+------+------+
% |   | Sp.A | Sp.B | Sp.C |
% +---+------+------+------+
% | 1 |      | Busy |      |
% | 2 | Busy | Busy | Busy |
% | 3 | Busy | Busy |      |
% | 4 |      |      |      |
% | 5 |      |      | Busy |
% | 6 | Busy | Busy |      |
% +---+------+------+------+
%
% Link to working MiniZinc code: http://pastebin.com/raw.php?i=jUTaEDv0
%
% What I'm hoping to optimize:
%
% % ensure allocated slots don't overlap and the allocated slot is free for the speaker
% constraint 
%     forall(i in 1..num_speakers) (
%         ending_slot[i] = starting_slot[i] + app_durations[i] - 1
%     ) /\
%     forall(i,j in 1..num_speakers where i < j) (
%         no_overlap(starting_slot[i], app_durations[i], starting_slot[j], app_durations[j])
%     ) /\
%     forall(i in 1..num_speakers) (
%         forall(j in 1..app_durations[i]) (
%             starting_slot[i]+j-1 in speaker_availability[i]
%         )
%     ) 
% ;
%
% Expected solution:
%
% +---+----------+----------+----------+
% |   |   Sp.A   |   Sp.B   |   Sp.C   |
% +---+----------+----------+----------+
% | 1 | SELECTED | Busy     |          |
% | 2 | Busy     | Busy     | Busy     |
% | 3 | Busy     | Busy     | SELECTED |
% | 4 |          | SELECTED |          |
% | 5 |          | SELECTED | Busy     |
% | 6 | Busy     | Busy     |          |
% +---+----------+----------+----------+
% """

%
% Optimizing speakers for a conference in MiniZinc.
% Produced by Stackoverflow.com user Igor K
% Based on MiniZinc model created by Hakan Kjellerstrand, hakank@gmail.com. http://www.hakank.org/minizinc
%

%
% hakank: There are only two solutions to this problems, the first is the optimal one:
% 
%   Starting:  [1, 4, 3]
%   Durations: [1, 2, 1]
%   Ends:      [1, 5, 3]
%   z:         5
% 
%   SELECTED Busy             
%   Busy     Busy     Busy    
%   Busy     Busy     SELECTED
%            SELECTED         
%            SELECTED Busy    
%   Busy     Busy             
%   ----------
%
%   Starting:  [1, 4, 6]
%   Durations: [1, 2, 1]
%   Ends:      [1, 5, 6]
%   z:         6
% 
%   SELECTED Busy             
%   Busy     Busy     Busy    
%   Busy     Busy             
%            SELECTED         
%            SELECTED Busy    
%   Busy     Busy     SELECTED
%   ----------
%   ==========


 
include "globals.mzn";

int: num_speakers; %  = 3; % number of teachers
int: num_slots; % = 6; % number of slots
int: max_talk_duration = 3; % the maximum length of any talk (in slots)
array[1..num_speakers] of set of 1..num_slots: speaker_availability; % the slots a speaker is available
array[1..num_speakers] of 1..max_talk_duration: app_durations; % the duration of speaker talks
array[1..num_speakers] of var 1..num_slots: starting_slot; % the allocated starting slot
array[1..num_speakers] of var 1..num_slots: ending_slot; % the allocated ending slot

var 0..num_slots: z = max(i in 1..num_speakers) (ending_slot[i]);

% no overlapping slots function
% predicate no_overlap(var int:s1, int:d1, var int:s2, int:d2) = s1 + d1 <= s2 \/ s2 + d2 <= s1;

% ensure allocated slots don't overlap and the allocated slot is free for the speaker
constraint 
  forall(i in 1..num_speakers) (
    ending_slot[i] = starting_slot[i] + app_durations[i] - 1
  ) 
  % /\ % use cumulative instead (see below)
  %  forall(i,j in 1..num_speakers where i < j) (
  %   	no_overlap(starting_slot[i], app_durations[i], starting_slot[j], app_durations[j])
  % ) 
  /\ % note: if using the matrix "m" this is not really needed...
  forall(i in 1..num_speakers) (
    forall(j in 1..app_durations[i]) (
      starting_slot[i]+j-1 in speaker_availability[i]
    )
  ) 
  /\ cumulative(starting_slot, app_durations, [1 | i in 1..num_speakers], 1)  % :: domain

;


% objective is to finish the talks as early as possible
% solve minimize max(i in 1..num_speakers) (ending_slot[i]);
% solve minimize z;
solve :: int_search(starting_slot ++ ending_slot, first_fail, indomain_min, complete) minimize z;
% solve satisfy;


output
[
   "Starting:  ", show(starting_slot), "\n",
   "Durations: ", show(app_durations), "\n",
   "Ends:      ", show(ending_slot), "\n",
   "z:         ", show(z), "\n",  
]
++
[ 
  if s = 1 then "\n" else " " endif ++
    if not(t in speaker_availability[s]) then "Busy    " elseif
       t >= fix(starting_slot[s]) /\ t <= fix(ending_slot[s]) then "SELECTED"  
    else
       "        "
    endif  
  | t in 1..num_slots, s in 1..num_speakers
]


;


% DATA BELOW HERE
% num_speakers = 3;
% num_slots = 6;
% the slots a speaker is available to give their talk
% speaker_availability = [
%     {1,4,5},  
%     {4,5},  
%     {1,3,4,6}  
% ];

% the duration of each speaker's talk
% app_durations = [1,2,1];


% hakank: Here are some harder problems, generated by
%         the Picat model http://www.hakank.org/picat/scheduling_speakers_optimize.pi

%
% num_speakers = 20;
% num_slots = 24;
% speaker_availability = [
% {1,2,3,4,5,6,7,8,9,10,11,12,13,16,19,20,21,22,24},
% {1,2,3,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24},
% {3,11,13,15,17,18,20,21,23,24},
% {3,7,12,13,17,18,19,21,23,24},
% {1,7,9,11,15,16,18,19,20,21,22,23,24},
% {1,3,4,5,6,9,10,12,13,14,15,16,17,18,19,21,22,23,24},
% {2,6,7,8,9,13,14,15,16,17,19,20,21,22,23},
% {3,9,12,16,17,18,19,21,22,23,24},
% {5,9,10,17,18,19,21,22,23,24},
% {1,6,8,9,11,12,13,14,16,18,21,22,23,24},
% {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24},
% {1,4,5,7,8,9,10,11,12,13,14,15,16,17,18,21,22,23,24},
% {3,7,10,12,13,14,15,16,18,19,20,21,22,23,24},
% {3,12,13,16,17,18,19,20,21,22,23,24},
% {1,5,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24},
% {1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,18,20,21,22,23,24},
% {4,6,10,11,12,15,16,17,20,21,22,23,24},
% {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,19,20,21,22,23,24},
% {2,5,6,10,12,13,14,18,19,20,21,22,23,24},
% {1,2,4,6,8,12,18,19,20,21,22,23,24},
% ];
% app_durations = [2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];


% num_speakers = 30;
% num_slots = 34;
% speaker_availability = [
% {1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34},
% {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,32,33,34},
% {1,2,3,4,9,10,12,13,15,16,17,19,21,24,27,28,29,30,31,32,33,34},
% {1,2,3,4,5,6,7,8,9,12,13,15,16,17,23,24,25,26,27,28,29,30,31,32,33,34},
% {2,8,10,15,20,23,25,26,27,28,29,31,32,33},
% {10,12,15,18,19,20,22,24,25,27,28,29,30,31,32,33,34},
% {2,3,4,5,7,8,9,10,11,12,13,15,16,20,21,23,25,26,27,28,29,30,31,32,33,34},
% {1,2,3,4,6,7,9,11,14,15,16,18,19,20,23,24,25,26,27,29,30,31,32,33,34},
% {1,5,6,8,9,11,12,14,17,18,19,21,24,26,27,28,29,30,31,32,33,34},
% {1,2,3,4,5,6,7,8,9,10,12,13,14,16,17,18,20,21,22,23,24,25,26,27,29,30,31,32,33,34},
% {6,8,16,18,19,23,24,25,26,27,30,31,32,33,34},
% {1,2,3,5,6,7,8,9,10,11,12,13,14,16,17,19,21,22,23,24,25,26,27,28,31,32,33,34},
% {1,2,3,7,14,16,17,20,21,23,25,26,27,28,29,30,32,33,34},
% {1,3,5,6,9,12,21,22,23,27,28,29,30,31,32,33,34},
% {1,2,4,6,7,8,9,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34},
% {4,7,8,12,15,17,19,20,22,24,25,26,27,28,29,30,31,32,33},
% {4,5,7,16,19,23,26,27,29,30,31,32,33,34},
% {3,4,6,7,8,10,12,15,16,18,19,21,22,23,24,25,27,28,29,30,31,32,33,34},
% {2,3,6,7,8,11,14,15,16,21,22,26,28,29,30,31,32,33,34},
% {8,9,12,18,20,21,27,29,31,32,33},
% {1,2,3,5,8,12,14,16,24,25,26,27,28,29,30,31,32,33,34},
% {2,4,9,12,14,15,16,18,19,24,25,26,27,29,32,33,34},
% {4,9,10,11,12,16,17,19,20,25,27,28,30,32,33,34},
% {1,3,4,5,11,12,15,16,17,18,19,21,22,23,24,25,28,29,31,32,33},
% {4,8,10,11,14,18,20,21,22,23,25,26,27,28,29,30,31,32,33,34},
% {3,5,8,12,14,18,20,22,23,24,25,26,28,29,30,31,32,33,34},
% {1,3,4,5,7,8,9,10,11,12,15,16,21,22,23,24,25,26,27,28,29,31,32,34},
% {4,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34},
% {2,4,6,9,10,12,13,15,17,18,19,20,23,24,25,27,28,29,30,31,32,33,34},
% {1,2,3,4,8,12,19,22,24,26,27,28,29,30,31,33,34},
% ];
% app_durations=[2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1];

%
% Gecode/fz, Google or-tools, Choco3 solves this problem in < 0.1s,
% Many other FlatZinc solvers: < 1s
%
num_speakers = 50;
num_slots = 60;
speaker_availability = [
{1,3,4,6,8,9,15,16,24,27,29,30,34,42,43,44,45,48,49,50,51,52,53,54,55,56,57,58,59,60},
{1,4,6,7,9,12,14,15,16,17,18,19,21,22,23,26,27,28,33,34,35,36,37,41,42,44,45,47,48,49,51,52,54,55,56,57,58,59,60},
{1,2,3,4,6,7,9,12,13,14,15,17,19,20,21,22,23,24,25,26,27,28,30,31,34,35,37,38,39,40,41,42,43,46,47,48,50,52,53,54,55,56,57,58,59,60},
{2,3,7,8,14,15,16,20,33,34,36,37,38,41,42,43,44,48,49,50,51,52,53,54,55,56,57,58,59,60},
{4,6,9,12,14,19,20,22,23,27,28,31,32,34,39,40,41,43,45,46,47,48,49,51,54,55,56,57,58,59,60},
{1,2,9,12,15,16,17,22,23,24,25,27,28,29,30,36,37,38,40,41,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60},
{1,4,9,10,15,17,19,22,23,24,27,32,34,36,37,39,40,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60},
{2,3,4,5,7,8,9,10,13,14,15,17,18,20,21,22,24,26,30,31,32,33,34,36,38,40,42,43,44,45,46,48,50,51,52,54,56,57,58,59,60},
{1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,18,19,20,21,22,23,25,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,44,45,46,48,50,51,52,53,54,55,56,57,59,60},
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60},
{1,4,8,13,16,20,21,22,23,25,30,33,34,35,36,37,39,44,45,47,48,49,50,51,52,54,55,56,57,58,59,60},
{2,3,10,11,16,17,18,19,20,21,25,26,27,29,30,31,34,37,38,40,41,43,45,46,49,50,51,52,53,54,55,56,57,58,59,60},
{1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,24,25,26,27,28,30,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,56,57,59,60},
{1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60},
{1,2,3,4,5,7,8,9,14,15,17,18,19,20,29,31,34,36,38,39,40,41,42,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60},
{1,6,8,10,11,13,14,20,22,29,33,35,36,38,40,41,42,43,44,45,46,47,52,53,54,55,56,57,58,59,60},
{2,9,10,14,16,18,19,23,24,25,27,28,35,36,37,43,44,46,49,50,51,52,54,55,57,58,59,60},
{2,3,6,13,15,17,19,20,22,23,25,26,27,33,35,36,37,39,41,42,43,44,45,47,48,49,50,52,54,55,56,57,58,59,60},
{2,10,11,14,18,20,26,35,38,39,40,42,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60},
{1,2,3,7,8,11,14,15,19,20,23,24,26,36,38,40,41,42,46,47,48,49,50,51,52,53,55,56,57,58,59,60},
{3,5,6,7,8,10,11,12,13,16,19,20,23,24,25,26,27,28,29,35,39,41,42,43,44,45,46,48,49,50,51,53,54,55,56,57,58,59,60},
{1,6,8,10,11,12,13,14,16,17,20,21,24,29,30,32,34,36,39,41,43,44,47,48,49,50,51,53,54,55,56,57,58,59,60},
{4,10,13,19,21,23,24,27,32,33,34,35,36,37,38,39,41,42,43,44,45,47,48,49,50,51,52,53,54,55,56,57,58,59,60},
{1,3,4,6,7,8,9,10,11,13,14,15,16,17,18,21,22,23,24,27,28,29,30,31,32,33,34,35,36,38,39,40,41,43,45,46,48,49,50,52,54,55,56,57,58,59,60},
{1,3,4,8,9,10,11,12,13,14,15,17,18,19,20,23,24,25,26,27,28,29,31,33,35,36,37,39,40,41,42,43,45,47,48,49,50,51,52,53,54,56,57,58,59,60},
{1,2,4,5,7,8,9,10,11,12,13,14,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60},
{1,10,13,15,17,21,23,25,27,31,33,34,35,36,37,39,40,43,44,45,47,48,49,50,51,52,54,55,56,57,58,59,60},
{3,11,18,19,20,22,28,29,33,37,38,40,41,43,44,45,46,47,48,49,50,52,54,55,56,57,58,59,60},
{1,5,7,8,9,11,13,14,17,19,23,26,29,31,34,36,37,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,59,60},
{1,4,7,12,13,16,19,21,23,25,26,27,29,30,34,35,36,37,38,39,41,42,44,45,47,49,50,51,52,53,54,55,56,57,58,59,60},
{5,9,10,11,14,17,18,23,34,35,42,44,45,46,47,48,49,50,51,52,53,55,56,57,58,59,60},
{4,5,10,11,14,19,21,24,29,30,33,37,42,43,45,46,47,48,49,50,52,53,54,55,56,57,58,59,60},
{2,4,5,6,9,10,11,13,16,17,18,19,20,21,22,23,28,29,30,31,32,34,36,37,38,39,40,42,43,45,46,47,48,49,50,51,52,53,55,56,57,58,59,60},
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,46,47,48,49,50,52,53,54,55,56,57,58,59,60},
{1,2,5,6,8,10,15,16,19,20,23,25,27,29,31,33,34,35,36,39,40,41,42,43,45,46,47,48,49,51,52,53,54,55,57,58,59,60},
{1,2,3,4,5,6,8,9,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,56,57,58,60},
{1,2,4,6,9,11,12,15,16,17,20,21,22,23,25,27,28,29,30,31,34,36,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60},
{1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,18,19,20,21,22,23,24,25,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,47,48,49,50,51,53,54,55,56,58,59,60},
{1,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,36,38,39,40,41,42,43,44,45,46,47,50,51,52,53,54,55,56,57,58,59,60},
{9,17,23,27,34,37,40,43,44,45,46,48,50,51,52,53,55,56,57,58,59,60},
{1,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60},
{2,3,4,5,6,9,12,13,15,19,20,21,22,24,26,27,31,32,33,37,38,41,42,43,44,47,48,49,50,53,54,55,57,58,59,60},
{2,5,19,22,28,29,33,38,39,40,41,42,43,44,46,47,49,50,51,52,53,54,55,56,57,58,59,60},
{1,2,3,6,7,8,9,10,13,15,16,17,18,20,22,23,26,29,33,35,40,41,46,47,49,50,51,52,53,54,55,56,58,59,60},
{1,2,3,5,6,7,8,11,12,14,17,21,23,25,26,27,28,31,32,34,35,36,38,40,41,44,45,46,47,50,51,52,53,54,56,57,58,59,60},
{2,3,4,5,6,7,9,10,11,13,14,17,18,19,21,22,23,24,25,26,27,28,29,31,33,34,35,36,38,39,40,41,42,43,44,45,47,48,50,51,52,53,54,55,56,57,58,59,60},
{1,2,3,4,6,7,8,10,11,13,14,16,17,18,19,21,22,24,25,26,27,28,29,32,33,34,38,39,40,42,46,47,48,50,51,52,53,55,56,57,58,59,60},
{2,4,5,6,7,8,11,12,13,14,16,17,20,21,22,25,26,27,29,30,31,32,33,34,36,38,39,40,41,42,43,44,46,47,48,49,51,52,54,55,56,57,58,59,60},
{1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,18,19,20,21,22,24,25,26,27,28,30,31,32,33,34,35,38,39,40,42,43,44,45,46,47,49,51,52,53,54,55,56,58,59,60},
{1,3,6,7,8,11,12,13,14,15,17,18,19,20,22,23,25,31,32,33,37,40,41,45,46,47,48,49,50,52,53,55,56,57,58,59,60},
];
app_durations=[2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
