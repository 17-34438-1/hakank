%
% Least difference problem in Zinc.
%
% The program solves the following problem:
% 
% What is the smallest difference between two numbers X - Y
% if you must use all the digits (0..9) exactly once.
%
% Model created by Hakan Kjellerstrand, hakank@bonetmail.com
% See also my MiniZinc/Zinc page: http://www.hakank.org/minizinc
%

include "globals.zinc"; 

% type synonym
% compare with 
%   set of 0..9: digits = 0..9;
%   var digits: A; 
%   % ...
type digits = var 0..9;

% set of int: digits = 0..9; % declare the range 
digits: A;
digits: B;
digits: C;
digits: D;
digits: E;

digits: F;
digits: G;
digits: H;
digits: I;
digits: J;

% using an array for the alldifferent predicate
array[1..10] of digits: FD =  [A, B, C, D, E, F, G, H, I, J];

% define a constrained type definition for positive numbers
type varintp = (var int: i where i >= 0);
varintp: X;
varintp: Y;
varintp: difference; % X - Y

predicate not_zero(var int: v) = v > 0;


%
% product_sum(arr1, arr2, result)
% - arr1, arr2: two arrays of equal lengths
% - result: the result of summing the product of arr1 and arr2
%  
predicate product_sum(array[int] of var int: arr1, array[int] of var int: arr2, var int: result) =
          assert(card(index_set(arr1)) == card(index_set(arr2)), 
            "product_sum: arr1 and arr2 must be of same length.",
             result = sum(i in index_set(arr1)) (
                arr1[i] * arr2[i]
             )
          )
;

constraint
      not_zero(A) /\ not_zero(F) /\

      % more general model
      product_sum([10000,1000,100,10,1], [A,B,C,D,E], X) /\
      product_sum([10000,1000,100,10,1], [F,G,H,I,J], Y) /\

      % Instead of using product_sum, it could be modelled instead as:
      % X = (10000*A +1000*B +100*C +10*D + E) /\
      % Y = (10000*F +1000*G +100*H +10*I + J) /\

      % all number must be equal
      alldifferent(FD) /\

      % the difference must be positive
      difference = X - Y

      % this is not needed anymore since we use type definition on
      % the variable difference
      % difference > 0
; 



% solve minimize difference;

% solve :: int_search(FD, first_fail, indomain, complete) minimize difference;
% solve minimize difference;
solve :: backend_fdic(g12_fd, none, none) minimize difference;

% result
output [
    show(FD),"\n",
    show(A), show(B), show(C), show(D), show(E)," - ", 
    show(F), show(G), show(H), show(I), show(J), " = ", show(difference), "\n"
];
