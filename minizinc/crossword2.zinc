%
% Cross word in Zinc
%
% This is a standard example for constraint logic programming. See e.g.
%
% http://www.cis.temple.edu/~ingargio/cis587/readings/constraints.html
% """
% We are to complete the puzzle
%
%      1   2   3   4   5
%    +---+---+---+---+---+       Given the list of words:
%  1 | 1 |   | 2 |   | 3 |             AFT     LASER
%    +---+---+---+---+---+             ALE     LEE
%  2 | # | # |   | # |   |             EEL     LINE
%    +---+---+---+---+---+             HEEL    SAILS
%  3 | # | 4 |   | 5 |   |             HIKE    SHEET
%    +---+---+---+---+---+             HOSES   STEER
%  4 | 6 | # | 7 |   |   |             KEEL    TIE
%    +---+---+---+---+---+             KNOT
%  5 | 8 |   |   |   |   |
%    +---+---+---+---+---+       
%  6 |   | # | # |   | # |       The numbers 1,2,3,4,5,6,7,8 in the crossword
%    +---+---+---+---+---+       puzzle correspond to the words 
%                                                  that will start at those locations.
% """

% The model was inspired by Sebastian Brand's Array Constraint cross word example
% http://www.cs.mu.oz.au/~sbrand/project/ac/
% http://www.cs.mu.oz.au/~sbrand/project/ac/examples.pl
%
% Model created by Hakan Kjellerstrand, hakank@bonetmail.com
% See also my MiniZinc/Zinc page: http://www.hakank.org/minizinc
%


% 
% Result:
%
% E1: 1 [8, 15, 19, 5, 19]     % MOSES
% E2: 3 [19, 1, 9, 12, 19]     % SAILS
% E3: 5 [19, 20, 5, 5, 18]     % STEER
% E4: 7 [8, 9, 11, 5, 0]       % HIKE
% E5: 8 [11, 5, 5, 12, 0]      % KEEL
% E6: 12 [1, 12, 5, 0, 0]      % ALE 
% E7: 14 [12, 5, 5, 0, 0]      % LEE 
% E8: 2 [12, 1, 19, 5, 18]     % LASER


include "globals.zinc";


% X is the filling in the A matrix
enum letters = {a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,X};

int: N = 8;
array[1..N] of var 1..15: E; 

%
% The overlapping positions in the crossword, i.e.
% where the letters is the same
%
int: num_overlapping = 12;
array[1..num_overlapping, 1..4] of int: overlapping = array2d(1..num_overlapping, 1..4,
[
 1, 3, 2, 1, 
 1, 5, 3, 1, 
 
 4, 2, 2, 3, 
 4, 3, 5, 1, 
 4, 4, 3, 3, 
 
 7, 1, 2, 4, 
 7, 2, 5, 2, 
 7, 3, 3, 4, 
 
 8, 1, 6, 2, 
 8, 3, 2, 5, 
 8, 4, 5, 3, 
 8, 5, 3, 5  
 ]);


% Definition of the words. A zero is used to fill the row.
array[1..15,1..5] of letters: A = array2d(1..15, 1..5, [
h, o, s, e, s,     %%  HOSES
l, a, s, e, r,     %%  LASER
s, a, i, l, s,     %%  SAILS
s, h, e, e, t,     %%  SHEET
s, t, e, e, r,     %%  STEER
h, e, e, l, X,     %%  HEEL
h, i, k, e, X,     %%  HIKE
k, e, e, l, X,     %%  KEEL
k, n, o, t, X,     %%  KNOT
l, i, n, e, X,     %%  LINE
a, f, t, X, X,     %%  AFT
a, l, e, X, X,     %%  ALE
e, e, l, X, X,     %%  EEL
l, e, e, X, X,     %%  LEE
t, i, e, X, X      %%  TIE
]);



constraint

  %
  % check all overlapping positions
  % 
  forall(i in 1..num_overlapping) (
    A[E[overlapping[i,1]], overlapping[i,2]] =  A[E[overlapping[i,3]], overlapping[i,4]]
  )
  /\ % redundant constraint
  alldifferent(E)

;

solve :: int_search(E, first_fail, indomain_min, complete) satisfy;
% solve satisfy;

output [
   if J = 1 then
   "\nE" ++ show(I) ++ ": " ++ show(E[I]) ++ "  = " else  "" endif ++
     if fix(A[E[I],J]) != X then show(A[E[I],J]) else "" endif
   | I in 1..8, J in 1..5
 ] ++ ["\n"];
 