%
% Scheduling problem.
%
% Problem from "CHIP Example Code", page 5
% The Ship Loading Example.
% """
% This example shows how to solve a scheduling problem where 
% cumulative and precedence constraints occur using either the 
% CHIP V5 Prolog, C Library or C++ Library versions. The problem 
% is to find a schedule that minimizes the time to unload and to 
% load a ship.
% The work consists of 34 unloading/loading tasks. Each task 
% requires a number of men and each has a given duration i.e. 
% task1 requires 3 men and will take 4 hours to complete. We
% know that we have a maximum of 8 men for work and the total 
% work should not exceed 100 hours.
% 
% ...
% When executed the CHIP V5 examples produce the following output. 
% The solution given assigns a start date of 0 for task1, 3 for 
% task2, etc. task29 which has a duration of 1 hour should start in 
% hour 65 (hence an optimum solution of 66 hours).
%    [0, 3, 7, 3, 14, 19, 11, 21, 25, 28, 30, 33, 35, 30, 36, 
%     36, 39, 41, 43, 44, 43, 44, 46, 50, 55, 60, 62, 63, 65, 
%     57, 61, 57, 58, 60]
% 
% """

num_jobs = 34; 
num_workers = 8;  
%           1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7  18 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
duration = [3,4,4,6,5,2,3,4,3,2,3,2,1,5,2,3,2,  2,1,1,1,2,4,5,2,1,1,2,1,3,2,1,2,2];
resource = [4,4,3,4,5,5,4,3,4,8,4,5,4,3,3,3,6,  7,4,4,4,4,7,8,8,3,3,6,8,3,3,3,3,3];
max_time = 100; % optimum: 66
allow_idle = true;
collect_workers = false;
do_precendences = true;
num_precedences = 42;
precedences = array2d(1..num_precedences, 1..2, 
[ 
  1,2,
  1,4,
  2,3,
  3,5,
  3,7,
  4,5,
  5,6,
  6,8,
  7,8,
  8,9,
 9,10,
 9,14,
 10,11,
 10,12,
 11,13,
 12,13,
 13,15,
 13,16,
 14,15,
 15,18,
 16,17,
 17,18,
 18,19,
 18,20,
 18,21,
 19,23,
 20,23,
 21,22,
 22,23,
 23,24,
 24,25,
 25,26,
 25,30,
 25,31,
 25,32,
 26,27,
 27,28,
 28,29,
 30,28,
 31,28,
 32,33,
 33,34,
]);
