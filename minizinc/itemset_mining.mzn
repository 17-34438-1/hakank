% 
% Frequence Itemset Mining in MiniZinc.
% 
% This is inspired from the Essence' code shown
% in Tias Guns' video talk (from 2009)
% "Constraint Programming for Itemset Mining"
% http://videolectures.net/aop09_guns_cpfim/
% 
% (Essence' code at about 19:50)
%

% TODO: 
%   - Better/simpler change between matrix based and
%     set based problem instances.
%   - Better/simpler change betweem Base, Maximal Frequence Itemset,
%     and closed Itemset Minint

% 
% This MiniZinc model was created by Hakan Kjellerstrand, hakank@bonetmail.com
% See also my MiniZinc page: http://www.hakank.org/minizinc/
%

% include "globals.mzn"; 
int: NrT;
int: NrI;

% Transaction database (binary matrix)
% array[1..NrT, 1..NrI] of int: TDB;

% Array of set of transactions
array[1..NrT] of set of int: S; 

% Names of the items
array[1..NrI] of string: ItemStr;

% decision variables
array[1..NrI] of var 0..1: Items;
array[1..NrT] of var 0..1: Trans;

% Coverage: Number of including transactions
var 0..NrT: Coverage;

% Frequence: number of transactions that contains the itemset
% (Often fixed by the problem instance.)
var 0..NrT: Freq;

% Size of the itemset
var 0..NrI: ItemsetSize;

% Support: percentage of transactions which contains the itemset
% (stated as 0..100 since most CP solvers don't handle var floats).
% Perhaps to be maximized.
var 0..100: Support = (100*Coverage) div (NrT);

% solve satisfy;
% solve maximize Freq;
% solve maximize Coverage;
% solve maximize Support;
% solve minimize Freq;
solve :: int_search(
        Items ++ Trans,
        first_fail, 
        indomain_split, 
        complete) 
    satisfy;
    % maximize Support;
    % minimize Support;    
    % maximize Coverage;
    % maximize ItemsetSize;

%
% Binary matrix approach
% 
% constraint
%    % encode TDB
%    forall(t in 1..NrT) (
%        Trans[t] = 1 <-> sum(i in 1..NrI) ( Items[i]*(1-TDB[t,i]) ) = 0
%    )

%    % /\ % Frequency: Base model (Frequent Itemset Mining)
%    % forall(i in 1..NrI) (
%    %   Items[i] = 1 -> sum(t in 1..NrT) ( Trans[t]*TDB[t,i]) >= Freq
%    % )

%    % /\ % For closed Itemset Mining
%    %    % Note: Use with Frequency Base model!
%    % forall(i in 1..NrI) (
%    %   Items[i] = 1 <-> sum(t in 1..NrT) ( Trans[t]*(1-TDB[t,i])) = 0
%    % )

%    /\ % Frequency: Maximal Frequent Itemset Mining
%    forall(i in 1..NrI) (
%      Items[i] = 1 <-> sum(t in 1..NrT) ( Trans[t]*TDB[t,i]) >= Freq
%    )

% ;


%
% Problem instance as an array of transaction sets
%
constraint

   % encode TDB
   forall(t in 1..NrT) (
       Trans[t] = 1 <-> sum(i in 1..NrI) ( Items[i]*(1-bool2int(i in S[t]) )) = 0
   )

   % /\ % Frequency: Base model (Frequent Itemset Mining)
   % forall(i in 1..NrI) (
   %   Items[i] = 1 -> sum(t in 1..NrT) ( Trans[t]*bool2int(i in S[t])) >= Freq
   % )

   % /\ % For closed Itemset Mining
   %    % Note: Should be used with Frequency Base model.
   % forall(i in 1..NrI) (
   %   Items[i] = 1 <-> sum(t in 1..NrT) ( Trans[t]*(1-bool2int(i in S[t]))) = 0
   % )

   /\ % Frequency: Maximal Frequent Itemset Mining
      % same as Base model, except for the equivalence (<->)
   forall(i in 1..NrI) (
     Items[i] = 1 <-> sum(t in 1..NrT) ( Trans[t]*bool2int(i in S[t])) >= Freq
   )

;

constraint 
   Coverage = sum(Trans)    /\
   ItemsetSize = sum(Items) /\

   Coverage    > 0 /\
   ItemsetSize > 0 /\
   Freq        > 0 

;

output 
[
  % "Items: " ++ show(Items) ++ "\n" ++
  % "Trans: " ++ show(Trans) ++ "\n" ++
  "Freq : " ++ show(Freq) ++ "\n" ++
  "ItemsetSize : " ++ show(ItemsetSize) ++ "\n" ++
  "Coverage: " ++ show(Coverage) ++ "\n" ++
  "Support: " ++ show_float(2,2, int2float(fix(Support)) / 100.0) ++ " (" ++ show(Support) ++ ")\n"
]
++
["Items: "]
++
[
  if fix(Items[i]) = 1 then show(i) ++ " " else "" endif
  | i in 1..NrI
]
++
["\nItems: "]
++
[
  if fix(Items[i]) = 1 then show(ItemStr[i]) ++ " " else "" endif
  | i in 1..NrI
]
++
["\nTrans: "]
++
[
  if fix(Trans[t]) = 1 then show(t) ++ " " else "" endif
  | t in 1..NrT
]
++ ["\n"]
;


%
% Data
%

% First example (about 16:40) where Tias explained the principle
% of variables, domains, and constraints.
% NrT = 12;
% NrI = 8;
% Freq = 4;
% ItemStr = ["i" ++ show(i) | i in 1..NrI];
% TDB = array2d(1..NrT, 1..NrI,
% [
% % 1 2 3 4 5 6 7 8 
%   0,1,1,1,0,0,0,0, % t1
%   0,0,0,0,0,0,1,1, % t2
%   1,0,0,0,1,1,0,0, % t3
%   1,1,1,0,0,0,0,0, % t4 
%   1,0,0,1,0,1,0,1, % t5
%   0,1,0,0,1,0,1,1, % t6
%   1,0,0,1,0,0,1,1, % t7
%   1,1,1,0,0,1,0,1, % t8
%   1,1,0,0,0,1,1,0, % t9
%   1,1,1,1,0,1,1,1, % t10
%   1,0,0,0,0,1,1,1, % t11
%   1,1,1,0,1,1,0,0  % t12
% ]);




% Second example (where Tias explained the propagations about 19:50)
% NrT = 3;
% NrI = 4;
% Freq = 2;
% % ItemStr = ["i" ++ show(i) | i in 1..NrI];
% ItemStr = ["Data Mining1", "Data Mining2", "CP1", "CP2"];
% % Transaction database
% TDB = array2d(1..NrT, 1..NrI,
%      [
%    %  i1 i2 i3 i4
%       1, 0, 1, 1, % t1
%       1, 1, 0, 1, % t2
%       0, 0, 1, 1, % t3
%      ]);


% Example from Tias Guns' Thesis 
% "Declarative Pattern Mining using CP", page 12
% NrT = 10;
% NrI = 5;
% Freq = 2;
% ItemStr = ["i" ++ show(i) | i in 1..NrI];
% TDB = array2d(1..NrT, 1..NrI,
% [
%    0,1,0,0,0, % t1
%    0,0,0,0,1, % t2
%    1,0,1,0,0, % t3
%    1,0,0,0,1, % t4
%    0,1,1,0,0, % t5
%    0,0,0,1,1, % t6
%    0,0,1,1,1, % t7
%    1,1,1,0,0, % t8
%    1,1,0,0,1, % t9
%    1,1,1,0,1  % t10
% ]);


%
% Another example:
%
% S Itemset
% 1 {apple, durian}
% 2 {bread, cheese}
% 3 {bread, egg}
% 4 {cheese, egg}
% 5 {apple, bread, cheese}
% 6 {apple, bread, cheese, durian}
% 7 {bread, cheese, durian, egg}
% 8 {apple, bread, cheese, egg}

% NrI = 5;
% NrT = 8;
% Freq = 2;
% ItemStr = ["apple","bread","cheese","durian","egg"];
% int: apple = 1;
% int: bread = 2;
% int: cheese = 3;
% int: durian = 4;
% int: egg = 5;
% S = [
% {apple, durian},                % t1
% {bread, cheese},                % t2
% {bread, egg},                   % t3
% {cheese, egg},                  % t4
% {apple, bread, cheese},         % t5
% {apple, bread, cheese, durian}, % t6
% {bread, cheese, durian, egg},   % t7
% {apple, bread, cheese, egg}     % t8
% ];

% As binary matrix
% apple, bread, cheese, durian, egg
% NrI = 5;
% NrT = 8;
% Freq = 2;
% ItemStr = ["apple","bread","cheese","durian","egg"];
% % ItemStr = ["i" ++ show(i) | i in 1..NrI];
% TDB = array2d(1..NrT, 1..NrI,
% [
% % a b c d e
%   1,0,0,1,0, % 1
%   0,1,1,0,0, % 2
%   0,1,0,0,1, % 3
%   0,0,1,0,1, % 4
%   1,1,1,0,0, % 5
%   1,1,1,1,0, % 6
%   0,1,1,1,1, % 7
%   1,1,1,0,1  % 8
% ]);


% From the presentation
% "Association Rules"
% http://www.cse.ohio-state.edu/~srini/674/assoc1.ppt
% slide 4
% 
% NrT = 5;
% NrI = 5;
% Freq = 2;
% ItemStr = ["Beer","Bread","Jelly","PeanutButter","Milk"];
% int: Beer = 1;
% int: Bread = 2;
% int: Jelly = 3;
% int: PeanutButter = 4;
% int: Milk = 5;
% S = [
% {Bread,Jelly,PeanutButter},
% {Bread,PeanutButter},
% {Bread,Milk,PeanutButter},
% {Beer,Bread},
% {Beer,Milk}
% ];


% From the presentation
% "Association Rules"
% http://www.cse.ohio-state.edu/~srini/674/assoc1.ppt
% slide 15
% Note: Slide 16 states {Jeans,Shoes,Shorts,TShirt}
%       as the Largest Itemsets (of #4).
%       Which is the same solution as this model finds with Freq = 2
%       (and it is the unique solution).
% 
% Note2: When Freq is free then {Jeans, Shorts} 
%        has better support (0.25), and Freq is 5.
%       
% NrT = 20;
% NrI = 6;
% Freq = 2;
% % Coverage = 3;
% % ItemsetSize = 3;
% int: Blouse = 1;
% int: Jeans = 2;
% int: Shoes = 3;
% int: Shorts = 4;
% int: Skirt = 5;
% int: TShirt = 6;
% ItemStr = ["Blouse","Jeans","Shoes","Shorts","Skirt","TShirt"];
% S = [
%   {Blouse},                          % 1
%   {Shoes,Skirt,TShirt},              % 2
%   {Jeans,TShirt},                    % 3
%   {Jeans,Shoes,TShirt},              % 4
%   {Jeans,Shorts},                    % 5
%   {Shoes,TShirt},                    % 6
%   {Jeans,Skirt},                     % 7
%   {Jeans,Shoes,Shorts,TShirt},       % 8
%   {Jeans},                           % 9
%   {Jeans,Shoes,TShirt},              % 10
%   {TShirt},                          % 11
%   {Blouse,Jeans,Shoes,Skirt,TShirt}, % 12
%   {Jeans,Shoes,Shorts,TShirt},       % 13
%   {Shoes,Skirt,TShirt},              % 14
%   {Jeans,TShirt},                    % 15
%   {Skirt,TShirt},                    % 16
%   {Blouse,Jeans,Skirt},              % 17
%   {Jeans,Shoes,Shorts,TShirt},       % 18
%   {Jeans},                           % 19
%   {Jeans,Shoes,Shorts,TShirt},       % 20
% ];


% From 
% Christian Borgelt presentation
% Frequent Pattern Mining
% http://www.borgelt.net/slides/fpm4.pdf
% page 3.
% NrI = 5;
% NrT = 10;
% Freq = 2;
% % ItemsetSize = 3;
% ItemStr = ["a","b","c","d","e"];
% int: a = 1;
% int: b = 2;
% int: c = 3;
% int: d = 4;
% int: e = 5;
% S = [
% {a,d,e},
% {b,c,d},
% {a,c,e},
% {a,c,d,e},
% {a,e},
% {a,c,d},
% {b,c},
% {a,c,d,e},
% {b,c,e},
% {a,d,e}
% ];


% From 
% Frequence Item Mining
% http://www.cs.kent.edu/~jin/DM08/FIM.pdf
% page 4
% NrT = 10;
% NrI = 5;
% Freq = 2;
% ItemStr = ["a","b","c","d","e"];
% int: a = 1;
% int: b = 2;
% int: c = 3;
% int: d = 4;
% int: e = 5;
% S = 
% [
% {a,b,e},
% {b,d},
% {a,b,e},
% {a,c},
% {b,c},
% {a,c},
% {a,c},
% {a,b},
% {a,b,c,e},
% {a,c,e}
% ];

% Frequence Item Mining
% http://www.cs.kent.edu/~jin/DM08/FIM.pdf
% page 15f
% NrT = 5;
% NrI = 6;
% % Freq = 2;
% % ItemsetSize = 3 ;
% ItemStr = ["Beer","Bread","Coke","Diaper","Eggs","Milk"];
% int: Beer = 1;
% int: Bread = 2;
% int: Coke = 3;
% int: Diaper = 4;
% int: Eggs = 5;
% int: Milk = 6;
% S = [
% {Bread, Milk},
% {Bread,Diaper,Beer,Eggs},
% {Milk,Diaper,Beer,Coke},
% {Bread,Milk,Diaper,Beer},
% {Bread,Milk,Diaper,Coke}
% ]

% 
% From
% Tan, Steinbach, Kumar: "Introduction to datamining"
%
% NrT = 10;
% NrI = 5;
% Freq = 2;
% int: a = 1;
% int: b = 2;
% int: c = 3;
% int: d = 4;
% int: e = 5;
% ItemStr = ["a","b","c","d","e"];
% S = [
% {a,b},      % 1
% {b,c,d},    % 2
% {a,c,d,e},  % 3
% {a,d,e},    % 4
% {a,b,c},    % 5
% {a,b,c,d},  % 6
% {a},        % 7
% {a,b,c},    % 8
% {a,b,d},    % 9
% {b,c,e}     % 10
% ];



%
% Simulation of 10 items 1000 transactions.
%
% perl -e 'my $T = 1000; my $n = 10; print "NrT = $T;\nNrI = $n;\nS = [\n";  for(1..$T) { my @t =(); for(1..$n) { push @t, $_ if rand(1) >= 0.5}; print "{" . join(",",@t) . "},\n";}; print "];\n"'
%
ItemStr = ["i" ++ show(i) | i in 1..NrI];
Freq = 10;
NrT = 1000;
NrI = 10;
S = [
{2,4,5,7,10},
{2,3,4,6,7,10},
{2,8,9},
{2,5,6,8,9},
{1,2,3,8,9},
{2,4,6,8,9,10},
{1,3,5,7},
{4,5,6,7,9,10},
{3,5,10},
{1,3,4,5,10},
{1,2,3,8,9},
{1,3},
{1,2,6,8,10},
{2,3,5,7,9},
{4,10},
{1,2,3,4,8,10},
{1,3,5,6,7},
{3,7,10},
{1,2,3,5,8,9},
{3,5,7,8},
{1,9},
{2,4,5,6,7,9,10},
{2,4,5,6,7,9,10},
{1,3,4,6,9},
{1,5,6,7,8,9},
{1,2,3,5,7,10},
{1,2,3,4,5,6,8},
{1,2,4,5,6,8,10},
{1,3,6,10},
{2,3,4,5,8,9,10},
{1,2,4,6,10},
{4,5,6,8,9},
{2,3,4,5,6,7,8},
{4,9,10},
{1,2,3,4,6,7,8},
{4,9},
{1,2,3,4,8,9},
{5,10},
{3,10},
{2,3,5,9,10},
{1,3,5,6,7},
{3,5},
{2,3,4,5,6,7,10},
{1,3,4,6,8},
{1,2,9},
{2,4,6,8,9},
{1,3,5,6,7,9,10},
{1,4,6,8},
{2,3,4,5,6,10},
{1,2,4,5,6,7,10},
{2,6,7,10},
{1,2,4,9},
{3,4,6,9},
{1,3,4,6,7,10},
{1,2,3,7,9},
{2,3,5,6,8,9},
{1,8},
{2,5,6,7,8},
{1,7,8,10},
{1,2,4,5,6,8,9},
{1,5,7},
{2,3,4,8,9},
{6,7,9},
{1,2,3,4,5,9,10},
{2,3,5,6},
{1,2,4,6,7,8,9,10},
{2,3,7,10},
{1,3,4,10},
{2,3,5,8},
{4,5,6,8,9,10},
{4,5,6,7,8,9,10},
{1,2,4,5,7,9,10},
{1,6,7,8,9,10},
{2,3,6,7,8,9,10},
{3,4,6,8,10},
{3,4,5,10},
{1,2,6,9,10},
{1,2,3,4,5,8,9},
{2},
{2,4,5,6,10},
{1,3,5,6,8,10},
{7,8,9,10},
{3,5,9,10},
{1,2,5,6,7,8,10},
{1,2,3,6,7,8,9,10},
{2,3,4,9},
{5,6,7,8,9,10},
{1,2,3,4,5,6,9},
{6,8,10},
{1,2,3,6,7,8,9,10},
{1,3,6,7,9},
{5,6,8,9,10},
{1,2,4,6,8},
{2,3,4,7,10},
{1,2,3,6,7,9},
{1,2,3,6,7,9,10},
{5,7,8,10},
{1,2,3,4,8},
{1,2,6,10},
{4,7,8},
{1,2,6,10},
{1,3,6},
{5,9,10},
{2,3,8,10},
{1,2,6,7,10},
{1,5,6,8,10},
{1,4,5,6,7,9,10},
{1,9,10},
{2,3,6,7,9,10},
{1,3,5,6},
{6,7,8},
{2,3,4,6,7,8},
{1,3,5,8,9,10},
{1,2,4,5,7},
{1,2,3,4,5},
{1,2,4,9},
{3,7,8},
{4,5,7,8,9},
{1,5,9},
{1,2,4,5,6,10},
{1,2,6,8,9,10},
{1,2,4,6,7,8,9,10},
{1,6,9},
{1,3,8,9,10},
{1,2,3,4,6,9,10},
{1,3,4,5,10},
{3,7,8,9},
{3,4,6,7,9},
{3,5,6,7,8,9},
{2,5,6,10},
{3,4,6},
{3,5,9,10},
{3,4,5,8,10},
{1,3,4,7,8},
{3,4,5,6,7,10},
{1,3,4,5,9},
{2,6,8,9},
{2,3,4,5,6,9,10},
{2,3,5,8,9,10},
{2,4,6,7},
{9},
{3,4,6,8,9},
{2,3,5,7,8,9,10},
{1,3,5,6,7,8,10},
{1,3,4,6,7,8},
{1,3,5,6,9},
{1,4,8,10},
{2,3,4,6,7,10},
{4,6,7,8,9,10},
{1,7,8},
{2,5,6,7,10},
{1,2,5,6,7,8,10},
{2,3,4,6,7,9,10},
{1,3,4,6,8,9},
{3,4},
{1,2,3,4,5,7,9,10},
{1,2,3,4,5,6,8,9,10},
{3,4,5,6,9,10},
{2,4,5,7,8,9},
{1,2,3,4,6,8,9},
{1,4,6,7,9},
{1,2,10},
{2,3,4,5,6,7,9,10},
{1,5,7,8},
{1,4,5,6,7,8,9,10},
{1,4,6,8,9},
{3,8},
{1,2,3,4,5,8,10},
{2,3,5,10},
{1,2,3,4,5,6},
{1,2,3,4,5,6,7,10},
{2,4,6,7,8,9,10},
{1,2,4,10},
{2,6,7,9,10},
{1,2,3,8},
{1,2,3,4,6,7,8,9,10},
{2,4,5,7,8},
{2,5,6},
{1,4},
{6,9,10},
{3,4,5,8,9},
{3,8,10},
{2,5,8,9},
{2,4,6,7},
{1,2,3,5,8,9,10},
{1,2,3,4,5,6,8},
{2,3,4,5,6,9,10},
{2,5,6,9},
{1,2,3,6,7},
{1,2,3,6,8,9,10},
{1,2,7,9},
{1,2,4,5,8,10},
{1,2,6,7,8,9},
{2,3,4,5},
{1,2,4,8,9},
{1,2,3,4,5,6},
{1,5,6,10},
{1,5,7,10},
{2,4,5,7,8},
{1,2,10},
{1,5,6,7,10},
{1,3,8,9,10},
{1,2,4,5,6,7,8},
{1,3,4,5,7,8,9},
{1,2,3,8},
{3,4,5,7,8},
{2,5,6,10},
{1,2,3,5,6,7,8,10},
{5,7,8,9,10},
{5,7,8},
{1,2,3,5,7,9},
{2,3,5,7,8},
{1,4,6,10},
{2,3,5,7,8,9},
{4,8,9,10},
{1,2,3,4,6,8},
{1,5,7,9,10},
{1,5,6,7,9,10},
{1,2,4,5,7},
{2,3,5,7,8,9,10},
{1,2,5,7},
{1,2,3,4,5,6,8},
{2,3,6,9,10},
{1,3,4,6,7,9},
{1,4,5,6,7,9},
{2,4,5,6,7,10},
{2,3,4,7,8,9,10},
{3,4,5,6,7,8,9},
{5,8,9},
{2,5,8,9},
{2,3,7},
{2,4,5,7,9,10},
{3,4,5,9,10},
{2,4,5,7,10},
{3,5,6,9},
{1,5,6,7,8,9},
{2,4,5,6,7,10},
{2,3,4,6,7,9,10},
{2,3,4,6,7},
{1,6,8,9},
{1,2,5,6,7,8,9},
{2,3,5,6,7,8,9},
{2,4,7,8,9},
{8,10},
{2,5,6,8,10},
{1,2,3,4,8,9,10},
{1,2,3,4,9,10},
{2,3,4,6,9,10},
{1,2,3,4,8,9},
{2,3,6,8,9,10},
{1,4,5,6,7,8,9,10},
{1,3,4,5,6,7},
{1,3,5,8,9,10},
{3,4,6,7,8,9,10},
{1,5,7,10},
{1,5,7},
{2,9,10},
{1,6,7},
{2,4,5,6,10},
{1,2,4,5,7,8,9},
{1,8,9,10},
{3,6},
{1,3,4,7,9},
{1,2,3,4,7},
{2,3,4,5,6,10},
{3,4,6,7,9},
{1,5,8,9},
{2,3,5,7,8},
{1,5,10},
{1,2,3,5,7,10},
{1,2,3,8},
{1,4,5,6,7,8,9},
{2,3,4,6,7,10},
{4,6,9,10},
{1,4,10},
{1,3,9,10},
{1,2,3,4,5,6,8,9,10},
{1,2,3,4,6,7},
{1,3,4,6,7,8,10},
{1,2,3,6,8,9},
{1,5,8,10},
{1,2,4,8,10},
{1,7,8,9},
{1,2,3,4,6,7},
{2,4,7,8,9,10},
{2,3,6,7,8,9},
{7,8,9,10},
{1,3,8,9,10},
{4,6,7},
{2,3,5,6,8,9},
{2,5,10},
{1,2,5,6,7,9,10},
{2,3,9,10},
{1,2,4,5,7,8},
{3,4,6,7,8,9,10},
{1,2,6,8,10},
{1,3,5,6,7,8},
{1,3,4,5,6,7,9,10},
{1,7,8,9,10},
{3,6},
{2,4,5,6,7,9},
{2,3,4,6,8,9,10},
{2,4,7,8,10},
{3,4,5,6,7,9,10},
{1,2,3,4,6,7,8},
{2,4,5,6,10},
{2,3,5,6,8,9},
{2,3,4,5,6},
{3,8,10},
{1,6,8,9,10},
{2,3,5,7,8,10},
{2,3,4,5},
{2,3,4,8,9},
{3,4,5,7,8,9,10},
{1,4,7,9,10},
{5,7,8,9},
{1,2,3,6,7,8,10},
{1,10},
{1,2,3,5,8,9,10},
{3},
{2,3,4,5,6,8},
{1,4,5,9},
{1,3,7,8},
{1,2,4,5,6,7,8,10},
{1,3,5,9},
{1,4,6,7,8,9,10},
{5,7,8,9,10},
{7,8},
{2,5,6,7,8,9,10},
{2,5},
{2,4,7,9},
{3,4,5,7,8,9,10},
{2,4,5,9,10},
{1,4,5,7,9,10},
{1,2,5,7,8,10},
{1,3,6,8,9,10},
{1,3,4,6,8},
{6,7,8},
{4,6,8,10},
{1,2,3,5,6,7,8,9},
{2,4,6,9,10},
{4,5,6,9},
{6,7,9,10},
{1,3,10},
{4,5,8,9,10},
{2,4,6,8,9,10},
{7},
{2,3,4,5,6,7,10},
{1,2,3,4,6,8,9},
{1,3,7},
{3,5,6,7,8},
{2,4,5},
{1,2,3,6,8,9,10},
{2,4,5,6,8},
{1,2,3,4,5},
{1,2,3,7,8,9},
{1,5,7,10},
{3,5,6,7},
{1,3,5,6,8,9},
{2,5,6,7,9,10},
{1,4,7,8,10},
{4,5,8,10},
{1,2,3,4,5,8,10},
{1,8,9,10},
{1,6,7},
{1,2,4,6,7},
{1,2,5,6,7,8},
{7,8,9,10},
{1,3,4,5,7,10},
{1,2,3,4,5,6,7},
{1,2,3,4,5,9},
{1,2,3,5,8},
{7,8},
{1,2,3,4,9,10},
{1,4,6,7,9,10},
{1,4,6,8},
{1,2,3,4,6,8},
{1,2,3,5,7,8,10},
{1,3,4,6,7,9,10},
{2,4,6,8,9,10},
{2,3,5,8,10},
{1,3,4,5,6},
{1,2,3,5,6},
{2,3,4,5,6,7,9},
{2,3,4,5,8,9,10},
{1,5,6,7,9},
{1,8,9,10},
{1,2,4,5,6,8,9},
{5,8,10},
{1,2,3,5,6,10},
{2,3,5,6,8,9,10},
{5,6,7,9,10},
{2,3,4,6},
{3,9},
{3,4,5,7},
{1,5,6,7,8,9},
{3,4,10},
{4,7,8,10},
{1,2,4,5,6,8,9,10},
{3,5,7,8},
{3,5,7,9,10},
{1,5,9,10},
{4,7,9},
{2,5,7,8},
{6,7,9},
{3,4},
{3,10},
{1,2,3,5,8,9},
{2,4,6,7,8,9},
{4,6,7},
{2,4,6,7,10},
{1,3,4,5,6},
{1,3,4,5,7},
{2,3,5,6,8,9,10},
{3,5,10},
{2,3,6,8,9,10},
{4,5,8,9,10},
{5,6,7,9},
{5,10},
{2,6,9,10},
{1,8,9,10},
{1,6,8,10},
{4,5,10},
{1,2,5,6,8},
{1,2,3,7,8,10},
{2,4,5,6,7},
{1,2,3,5,7,9,10},
{1,3,4,6,7,8,10},
{1,2,5,7,8,10},
{1,4,7,9},
{1,2,10},
{1,9},
{5,6,7,10},
{1,5,7,8,10},
{2,3,7,8,10},
{1,7,8},
{2,5,8,9},
{2,3,5,6,9},
{1,2,3,4,6,10},
{3,4,5,6,7,8},
{1,3,4,5},
{1,2,3,5,7,8,10},
{1,5,6,7,10},
{1,3,5},
{4,8},
{1,2,3,4,5},
{4,6,7,10},
{1,2,5,6,7,8,9,10},
{5,6,7,10},
{3,4,8},
{1,2,4,5,7,9},
{2,4,7,9,10},
{1},
{1,5,6,9},
{3,7,8,9},
{1,2,3,4,5,6,8},
{1,3,6,9,10},
{2,3,4,6,9,10},
{3,4,5,6,7,8},
{1,3,6,8,9},
{2,3,4,5,6,7,8,9,10},
{1,2,5,6,7,8,9,10},
{3,4,7},
{1,3,10},
{1,2,3,4,7},
{4,6,8},
{1,2,6,7,10},
{1,2,9,10},
{6,8,9,10},
{1,2,4,5,10},
{3,6,7,9},
{1,5,6,7,8,9},
{1,2,3,8,9,10},
{1,2,3,7,8},
{3,7,8},
{2,4,5,6},
{1,2,4,5,6,8,10},
{1,3,7,9,10},
{1,2,3,5,6,8,9,10},
{1,4,10},
{5},
{3,4,8,9,10},
{4,5,6,10},
{5,7,8,9,10},
{1,2,3,5,7,10},
{3,7,8},
{2,4,5},
{1,2,3,4,6,7,8},
{4,7,9,10},
{3,5,6,9},
{1,2,3,7,8,9,10},
{2,4,5,6,7,8,9},
{2,3,4,5,6,7},
{2,3,5,6,8,9},
{2,4,6,7,8,9,10},
{1,2,5,6,7,9,10},
{3,7,8,9,10},
{2,3,4,7,9,10},
{3,4,5,6,7,8},
{1,2,5,6,8,9},
{1,3,5,8},
{1,3,4,5,7,8,9},
{1,2,5,6,8,10},
{2,3,6,10},
{3,4,7,8,9,10},
{1,2,6,7,8,9},
{1,2,4,7},
{3,5,6,8,9},
{1,3,4,5,7,8,9},
{2,3,7,8,9},
{4,5,6,7,9,10},
{2,3,7,8,9,10},
{1,2,9,10},
{1,3,5,9},
{1,2,6,10},
{1,2,3,5,6,8,9},
{1,2,8,9},
{1,2,3,4,5,7,9},
{3,4,5,10},
{1,5,6,7,10},
{2,4,8,9},
{2,3,4,6,9,10},
{1,3,6,9,10},
{1,8,9},
{2,3,4,6,7,8,10},
{3,5,6,7,9,10},
{1,3,6,7,8},
{1,3,4,5,6,7,8,9},
{2,6,8},
{4,5,6,8,10},
{3,4,6,7,8,9,10},
{4,5,10},
{2,4,5,6,7},
{1,3,4,5,6,7,8,10},
{1,2,5,8,9,10},
{2,4,5,8,9},
{3,8,10},
{4,7,8,10},
{2,3,8,9,10},
{4,6,7,10},
{7,9},
{1,3,8,9,10},
{1,2,4,5,7},
{1,2,4,8,9,10},
{1,2,3,5,10},
{1,2,4,5,7,9,10},
{2,4,5,6,9,10},
{5,8},
{2,3,5,7,10},
{4,5,6,7,8,9,10},
{2,3,6,7,9},
{1,2,5,7,10},
{2,3,4,5,6,7,8,9},
{4,7,8,10},
{1,3,4},
{4,6},
{4},
{1,3,4,5,6,7,9},
{1,2,4,5,8,9,10},
{2,3,4,7,8},
{2,3,5,6,7,10},
{1,2,4,5,6,8,9,10},
{1,2,3,4,6},
{1,3,5,7,9},
{1,2,3,7,9},
{1,2,3,4,7,8,9,10},
{1,3,4,5,6,8,9,10},
{2,7,8,9},
{2,3,4,6,8},
{1,3,6,7,8,9,10},
{4,5,6,7,9},
{1,2,4,7,8,9,10},
{1,2,3,4,5,7,8,10},
{1,3,4,6,7,8},
{3,7,8,9},
{1,2,3,5,6,7,8,9},
{2,3,4,6,9},
{2,5,7},
{1,2,4,6,7,9,10},
{1,3,6,8,10},
{1,7,8},
{4,6},
{2,3,4,6,7,8,10},
{1,4,6},
{1,2,3,5,7,8,9,10},
{2,4,5,9},
{2,4,6,7,9},
{4,6,7,9,10},
{1,4,10},
{3,4,5,6,8,10},
{1,4,5,6,8,9},
{2,3,6,7},
{2,5,7,8,9,10},
{5,7,8},
{2,5,7,9},
{9},
{3,4,7,10},
{2,3,4,5,7,8,10},
{1,2,6,7,9,10},
{4,5,7,8,10},
{2,6,7,9,10},
{1,7,10},
{4,5,6,8,9,10},
{1,4,5,8,10},
{3,4,5,6,7,8},
{6,7,8},
{2,5,10},
{1,3,6,8,9,10},
{2,3,6,7,9,10},
{1,3,5,6,7,9},
{1,5,10},
{3,4,6,10},
{1,2,3,5,6,7,8,9,10},
{2,3,7,9,10},
{2,3,4,5,6,8},
{4,5,6,7,8,10},
{1,2,7,8,9,10},
{1,6,10},
{1,5,6,7,10},
{2,4,5,6},
{5,6,7,10},
{3,4,5,8,10},
{2,10},
{1,4,7,8,9,10},
{1,2,4,5,6,8,10},
{1,3,5,6,7,9},
{3,4,6,8,10},
{1,4,6,8,9,10},
{1,3,6,7,9,10},
{1,2,5,6,8,9},
{1,3,5},
{2,3,8,9,10},
{2,3,5,8},
{1,4,5,6,10},
{5,7,10},
{3,6,7,8,10},
{2,3,6,7,8,10},
{3,5,6,7,9},
{1,2,3,4,6,9},
{2,3,5,6},
{2,5,6,7,8},
{2,5,6,7},
{3,4,5,10},
{2,3,4,6,7,8,9},
{2,5,6,7,9,10},
{1,2,3,7},
{2,3,5,6},
{1,4,6,7,9},
{3,5,6,7,8},
{1,2,4,5,7,9,10},
{1,3,4,5,6,7,10},
{1,2,7,8,10},
{1,3,4,8},
{4,6,8,10},
{4,10},
{1,3,4,9},
{4,5,7,8,9,10},
{1,10},
{2,4},
{1,2,3,4,6,7,10},
{3,4,6,8,9,10},
{2,3,4,6},
{1,2,3,9},
{2,4,5,6,8,9},
{1,2,3,4,5,7,9,10},
{1,2,6,8,10},
{1,2,3,6,8,9},
{1,3,4,5,6,9},
{1,4,8,9},
{7},
{1,2,3,4,5,8,10},
{2,3,4,7},
{1,4,6,7,8,9},
{1,2,4,7,10},
{2,4,6,7,8,10},
{1,3,5,6,7,10},
{2,4,5,8,9},
{1,2,4,7,8},
{2,5,6,8,9},
{1,5,10},
{1,3,7},
{1,2,7,8},
{1,6,7},
{1,2,3,5,6,8,9,10},
{1,3,4,6,8,10},
{2,3,10},
{1,2,3,4,5,6,10},
{3,5,10},
{1,2,4,6,7,8,9},
{1,2,3},
{1,6,9,10},
{6,7,8,9},
{2,7,9},
{1,4,5,7,8,9,10},
{1,6},
{1,4,5,8,9,10},
{1,2,6,9},
{1,4,5,8,9,10},
{3,8},
{1,2,3,4,5,7,10},
{1,2,3,4,5,7,8,9},
{4,6,8,9,10},
{1,2,3,7,9,10},
{1,3,5,6,8,10},
{1,2,10},
{1,2,3,6,7,9,10},
{1,2,4,5,9,10},
{1,3,5,7,10},
{1,3,4,5,6,9},
{2,4,7,8,9},
{4,6,7},
{5,10},
{1,2,5,6,7,8,9,10},
{1,4,5,6,8},
{3,5,6,8},
{2,3,8,9,10},
{1,3,6,7},
{4,5,6,8,9,10},
{1,2,3,6,7,8},
{1,2,3,4,8},
{1,2,4,6,7,9,10},
{2,4,5,8,9},
{3,5,7,8},
{1,4,6,7,9},
{1,4,5,7,9,10},
{5,6,7,8,10},
{1,2,6,8,9,10},
{1,2,4,6,7,8,9},
{2,4,8,10},
{3,4,5,6,7,9,10},
{2,5,6},
{1,4,6,8,9,10},
{2,4,5},
{1,3,6,7},
{2,4,5,7,8,9},
{2},
{2,3,5,6,7},
{1,3,4,6,8},
{7,10},
{1,3,7,8,9},
{2,9},
{3,5,7,9,10},
{1,2,3,4,5,6,8,10},
{5,6},
{5,8},
{1,5,8,10},
{2,5,6,7,8,9,10},
{1,3,5,8,9,10},
{2,3,5,6,8},
{1,3,4,5,6,7,8},
{2,3,9,10},
{1,2,7,8,9,10},
{1,2,3,5,6},
{1,3,6,8,9,10},
{6,7,8,9},
{1,4,5,6,7,9,10},
{1,3,6},
{3,4,5,10},
{1,3,5,7,8,9},
{2,3,4,8,10},
{1,2,5,6,7,8,9},
{2,4,5,7,8},
{1,2,3,4,5,6,8,9,10},
{1,3,5,6,7},
{2,5,6,8,9},
{1,2,6,7,8,10},
{1,2,6,8},
{1,2,4,6,9},
{1,2,8,10},
{1,2,3,5,7,8,9,10},
{1,2,4,6,8,9,10},
{3,4,10},
{1,2,3,8,9,10},
{4,7,10},
{1,5,6,8,9},
{1,3,5,6,8,9},
{1,2,7},
{1,4,5,7,9},
{1,3,5,7,8},
{2,3,4,5,6,8,10},
{2,4,8,9,10},
{2,3,4,6,9},
{1,2,3,6,8,9},
{1,3,4,7,9,10},
{2,7,8,9,10},
{1,2,3,7,9,10},
{1,3,4,5,6,8},
{1,2,5,6,9},
{2,3,4,7,9},
{1,2,3,4},
{2,3,4,5,7,8,9,10},
{1,2,3,4,7},
{2,4,9},
{3,6,7,9,10},
{3,4,5,8,10},
{4,5,6,7,8,10},
{4,6,7},
{1,2,4,5,8,9},
{9},
{2,5,8,9},
{4,5,6,7,10},
{2,3,5,7,8,9},
{1,2,4,6,10},
{1,3,5,8,9,10},
{3,8},
{1,2,3,4,6,9,10},
{1,4,8,9,10},
{1,2,4,5,7},
{1,3,4,6,7,10},
{1,3,8},
{1,2,3,7,9,10},
{2,4,5,6},
{8,9,10},
{1,2,4,8,10},
{1,2,4,5,8,9,10},
{2,3,5,8},
{1,2,3,8,9,10},
{3,5,7},
{4,5,6,7,8,10},
{4,7,10},
{2,3,4,5,6,7,8,9,10},
{3,6,10},
{1,3,4,6,7,8,9,10},
{1,3,4,5,7,9,10},
{1,3,4,5,6,7,10},
{5,6,7,9,10},
{4,6,8,9},
{1,5,8,9},
{1,3,4,6,7,8,9,10},
{3,7,8,9,10},
{2,6,7,9,10},
{3,4,7,9,10},
{2,4,8,10},
{1,4,5,7,8,9,10},
{1,3,4,6,7,9,10},
{2,5,7,9},
{1,4,6,8,9,10},
{2,3,4,8},
{3,5,7,8,10},
{1,2,4,5,7,10},
{1,2,3,5,7,8,10},
{1,2,4,5,8,9},
{1,2,4,5,6,9},
{2,8,9},
{4,6,7,10},
{3,4,6,8,9,10},
{2,3,6,7,9},
{2,3,5,7,8},
{1,3,4,5,10},
{1,2,3,4,5,6,10},
{1,2,4,5,6,9,10},
{1,3,5,6,9},
{2,4,5,7,8,10},
{2,5,6,7,8,9},
{3,4,5,10},
{2,3,5,7,8,9},
{1,5,6,7,8},
{1,4,8,9},
{1,2,6,7,8,9},
{3,7,9,10},
{1,2,3,7},
{3,4,5,8,9},
{2,4,7,10},
{2,8,9,10},
{4,6,7,8},
{2,3,7,8,9},
{1,5,6,8,9,10},
{1,3,4,6,8,9,10},
{3,6,10},
{1,3,5,7,9,10},
{2,4,5,8,10},
{1,2,5,7,9,10},
{1,5,7,9,10},
{1,2,7,8,10},
{2,3,4,5,10},
{2,5,7,8},
{1,5,6,7},
{4,5,6,7,10},
{1,2,3,4,5,6,7,8},
{2,4,5,7,8,9,10},
{1,2,3,4,5,9},
{2,5,6,9},
{3,8,9},
{1,2,4,5,7},
{1,8},
{3,4,6,7,8,10},
{1,3},
{5,6,7,8},
{1,4,5,7,8,10},
{2,9},
{2,3,7,9},
{2,3,4,7,8},
{3,4,5,6,7},
{1,4,10},
{1,2,7},
{2,5,6,7},
{4,8,9,10},
{2,3,4,5,6,8,10},
{1,2,6,7,8,9,10},
{4,8,9,10},
{2,5},
{2,4,7,10},
{1,2,4,7,8},
{2,5,6,7,8,9,10},
{1,3,4,9},
{1,5,6,7,9,10},
{1,2,3,4,6,9,10},
{2,5,7,9},
{1,2,7,8,9,10},
{3,4,5,6,9},
{1,2,4,5,6,8,9,10},
{1,2,7,8,10},
{1,3,4,5,6,8,9},
{1,2,3,5,6,9,10},
{5,6,7,10},
{3,4,7,8,9,10},
{3,6,7,9,10},
{2,3,4,7,8,9},
{3,5,6,7,9},
{2,5,9,10},
{1,4,6,7,9},
{1,2,3,5,6,8,9},
{2,4,5,6,7},
{1,3,5,7,8,9,10},
{7},
{6,7,8,9,10},
{2,4,5,8,9},
{2,3,6,9},
{1,2,4,5,9,10},
{1,2,3,4,5,8,9,10},
{2,5,7,8,9,10},
{2,4,7,9,10},
{2,3,6,7,8,9},
{1,3,4,5,7,8,9,10},
{4,5,10},
{1,3,5,6,7,8,10},
{2,3,5,7,8,9},
{3,5,8,10},
{1,2,3,4,5,6,8},
{2,3,4,5,6,7,8,9,10},
{4,5,9},
{1,2,4,5,6},
{1,4,7,9,10},
{6,8,9,10},
{1,3,6,7},
{1,4},
{1,5,8,10},
{8},
{3,4,6,8,9,10},
{1,2,3,5,6,7},
{3,5,6,8},
{1,2,3,4},
{1,2,5,6,7,8,10},
{1,2,6,8,9},
{1,4,5,7,8,9},
{2,3,5,8,10},
{1,2,5,7,9},
{3,4,6,8},
{2,3,4,6,9,10},
{1,4,5,10},
{2,4,6,9,10},
{1,3,4,5,7,8,9},
{2,3,6,8,9},
{5,6,7},
{2,4,5,7,8},
{2,3,4,5,7,9,10},
{3,5,7,9,10},
{1,2,4,10},
{1,5,10},
{1,2,4,7,8,10},
{2,4,5,7,10},
{1,3,4,7,9},
{1,3,4,8,9},
{1,3,4,5,6,7,9},
{2,4,7,10},
{1,3,4,6,10},
{1,2,3,6,7},
{1,5,6,7},
{3,4,5,6,7,9,10},
{7,8},
{1,8,9,10},
{1,4,6,7,8,9},
{4,5,6,7,8,10},
{2,4,5,7,10},
{3,4,7,8,9,10},
{1,3,4},
{1,5,6,7,8,9,10},
{1,3,4,5,6,10},
{1,3,4,5,8},
{1,3,6,7},
{3,4,5},
{2,3,4,5,6,8,9,10},
{2,3,4,5,6,10},
{1,2,4,6,9},
{3,4,5,6,8,9},
{1,5,8,10},
{2,4,5,6,8,9},
{3,5,9},
{2,4,5,6,8,10},
{1,2,4,5,7,8},
];
