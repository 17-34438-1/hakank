%
% Word square in Zinc
%
%  From http://en.wikipedia.org/wiki/Word_square
%  """
%  A word square is a special case of acrostic. It consists of a set of words, 
%  all having the same number of letters as the total number of words (the 
%  "order" of the square); when the words are written out in a square grid 
%  horizontally, the same set of words can be read vertically.
%  """
%
%  Compare with the following models:
%  * http://www.hakank.org/comet/word_square.co
%  * http://www.hakank.org/gecode/word_square.cpp
%  * http://www.hakank.org/choco/WordSquare.java
%  * http://www.hakank.org/minizinc/crosswords.co
%
%
% Model created by Hakan Kjellerstrand, hakank@bonetmail.com
% See also my MiniZinc/Zinc page: http://www.hakank.org/minizinc/
%


include "globals.zinc";

enum letters = {a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z};
int: word_len;
int: num_words;

array[1..num_words, 1..word_len] of letters: words;

% Note: these are to be used as parameter to the generated program:
% include "word_len3.zinc";
% include "word_len4.zinc";
% include "word_len5.zinc"; 
% include "word_len6.zinc"; 

array[1..word_len] of var 1..num_words: E; 

constraint

  %
  % check the overlapping positions
  % 
  forall(I, J in 1..word_len) (
    words[E[I], J] = words[E[J],I]
  )
 
  /\ % redundant constraint
  alldifferent(E) %  :: domain

;

% solve :: int_search(E, first_fail, indomain_min, complete) satisfy;
solve satisfy;
% solve :: backend_fdic(g12_fd, default, default) satisfy;


output 
[
   "E" ++ show(I) ++ ": " ++ show(E[I]) ++ "  = " ++ show([words[E[I],J] | J in 1..word_len]) ++ "\n"
    | I in 1..word_len
] ++ ["\n"];
 
