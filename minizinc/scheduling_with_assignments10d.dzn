%
% Assembling bicycles
%
% Problem from R.L. Graham: "Combinatorial Scheduling Theory",
% in L. A. Steen (Ed.), Mathematics Today: "Twelve Informal Essays", 
% Springer-Verlag, New York, 1978, pp. 183-211.
%
% http://www.math.ucsd.edu/~ronspubs/78_15_combinatorial_scheduling.pdf
%
% The tasks:
% FP - Frame preparation which includes installation of the
%     front fork and fenders.
% FW - Mounting and aligning front wheel.
% BW - Mounting and aligning back wheel.
% DE - Attaching the derailleur to the frame.
% GC - Installing the gear cluster.
% CW - Attaching the chain wheel to the crank.
% CR - Attaching the crank and chain wheel to the frame.
% RP - Mounting right pedal and toe clip.
% LP - Mounting left pedal and toe clip.
% FA - Final attachments which includes mounting and adjusting
%      handlebars, seat, brakes, etc.
%
%
% Precedences:
%  Job     must be done after  job(s)
%  -----------------------------------------
%  FA                           FP,FW,BW,GC,DE
%  BW                           GC,DE
%  GC,CW                        DE
%  LP, RP                       CR,CW,GC
%  CR                           CW

%
% Also see:
% "A Quick and Gentle Guide to Constraint Logic Programming
%  via ECLiPSe", page 353ff.
%

% Notes: In this problem instance we test two things:
%  - the effect of 
%    Graham's Rule 1, i.e. that there can be no idleness 
%    for a worker until his/her last task (allow_idle = false).
%  - increasing to 3 teams (num_worker = 3)
%  - decreasing the duration for all tasks with 1 time unit.

%
% Results for 2 teams:
% - With Rule 1 (allow_idle = false) then there is a makespan of 34.
% - Without this rule (allow_idle = true) we lower it to 29.
% In comparison with the "normal" durations (and allow_idle = true)
% there is a makespan of 32.
%


num_jobs = 10;
% Max number of workers/team that can be assigned (with some job): 6
% (but it don't give better results than with 2 workers/team)
num_workers = 2;
%            1  2  3  4  5  6  7  8  9 10
%           FP FW BW DE GC CW CR RP LP FA
% duration = [ 7, 7, 7, 2, 2, 2, 2, 8, 8,18];
duration = [ 6, 6, 6, 1, 1, 1, 1, 7, 7,17];
resource = [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
max_time = 100; % (optimal: 32 when allow_idle=true, 34 when = false)
allow_idle = false; % Rule 1
collect_workers = false;
do_precendences = true;
num_precedences = 18;
precedences = array2d(1..num_precedences, 1..2, 
[ 
 1,10, % FP,FA,
 2,10, % FW,FA,
 3,10, % BW,FA,
 4,10, % DE,FA,
 5,10, % GC,FA,
 4,3,  % DE,BW,
 5,3,  % GC,BW,
 1,3,  % FP,BW,
 4,5,  % DG,GC,
 4,6,  % DG,CW,
 5,8,  % GC,RP,
 5,9,  % GC,LP,
 6,8,  % CW,RP,
 6,9,  % CW,LP,
 7,8,  % CR,RP,
 7,9,  % CR,LP,
 6,7,  % CW,CR,
 1,2   % FP,FW
]);
