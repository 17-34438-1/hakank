%
% Constraint Programming: Moving furnitures in Zinc
% 
% Problem from Marriott & Stuckey: 'Programming with constraints', page  112f
%
% Model created by Hakan Kjellerstrand, hakank@bonetmail.com
% See also my MiniZinc/Zinc page: http://www.hakank.org/minizinc
%

include "globals.zinc";

int: n; % number of things
int: upperLimit;
enum Tasks;
% array[1..n] of string: Tasks; % string version of the tasks
array[1..n] of var 0..upperLimit: Starts;
array[1..n] of var 0..upperLimit: Durations;
array[1..n] of var 0..upperLimit: Resources;
array[1..n] of var 0..upperLimit*2: EndTimes;
var 0..100: numPersons; 
var 0..upperLimit: max_time;

% solve satisfy;             % just give a solution (combined with the extra constraints)
solve minimize numPersons;    % minimize the number of persons
% solve minimize max_time;    % max time (as many people as needed)

constraint
    % defined in globals.mzn
    cumulative(Starts, Durations, Resources , numPersons)

   % setting EndTimes
   /\ forall(i in 1..n) (EndTimes[i] = Starts[i] + Durations[i])

   /\ max_time = max(EndTimes)

   %
   % Some extra constraint to play with:
   % 
   %  How many persons if everything should start at the same time
   %/\ forall(i in 1..n) (Starts[i] = 0)   

   % Must be finished in 60 minutes
   % /\ forall(i in 1..n) (Starts[i] + Durations[i] <= 60) 

   % limitation of the number of people
   % /\ numPersons <= 3

   % must start on an even 10 minutes 
   /\  forall(i in 1..n) (Starts[i] mod 10 = 0)
;   


% data

upperLimit = 160;

n = 4;
Durations = [30,10,15,15];
Resources = [3,1,3,2];
enum Tasks = {piano, chair, bed, table};

output [
       "numPersons: ", show(numPersons),"\n",
       "Resources : ", show(Resources), "\n",
       "Starts    : ", show(Starts),    "\n",
       "Durations : ", show(Durations), "\n",
       "EndTimes  : ", show(EndTimes),  "\n",
       "max_time  : ", show(max_time),  "\n"
] ++ 
["\n"] ++
[
  if fix(Starts[i]) == t then
     "start: " ++ show(t) ++ " task: " ++ show(Tasks[i]) ++ " ends: " ++ show(EndTimes[i]) ++ 
     " (duration: " ++ show(Durations[i]) ++ " resources: " ++ show(Resources[i]) ++ ")\n"
  else 
    ""
  endif
  | t in 0..upperLimit, i in 1..n
]
;




