%
% Bin packing as a scheduling problem.
%
% Here we see the bin packing as a scheduling problem (with
% assignments) as follows:
%   - the number of things to pack is the number of jobs
%   - the capacity of each bin is the number of workers
%   - the weight/height of each thing is the resource
%   - all durations is set to 1
%   - max_time is the number of workers
%   - the minimum number of bins to use (to be minimized) 
%     is then - of course - the makespan.
% 
% Example from the Alice system
% Copying files to disks
% http://news.mozart-oz.org/alice/manual/cptutorial/node55.html
%
% """
% Suppose, you want to copy a set of files from your hard-disk onto as 
% few as possible diskettes of a given size, e. g. onto common 1.44 MB 
% diskettes. In case your files do not fit on a single diskette, it might 
% become quite tricky to figure out the minimal number of needed diskettes 
% and how to partition the files.
% """
%
% Note: This requires a very large assignment matrix:
% 6 (jobs) x 1440 (workers).
% 
num_jobs = 6; % num_stuff = 6; % number of files
num_workers = 1440;  % bin_capacity = 1440; % size of a disk
resource = [360, 850, 630, 70, 700, 210]; % the sizes of the files
duration = [1 | i in 1..num_jobs];
max_time = num_workers; % number of disks required. optimal: 2
allow_idle = true;
collect_workers = false;
do_precendences = false;
num_precedences = 1;
precedences = array2d(1..num_precedences, 1..2, 
[ 
  0,0 % dummy
]);
