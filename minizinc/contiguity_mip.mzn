% 
% Contiguity constraint (MIP) in MiniZinc.
% 
% From 
% https://www.or-exchange.org/questions/9203/forcing-the-value-of-consecutive-variables
% 
% This model use fbahr's answer (model A).
%

% Float version:
%   G12 mip: 7.49s
%   Gecode: 0.55s  (1545 failures)!
%   ECLiPSe/ic: 0.8s
%   ECLiPSe/eplex: 2.1s

% 
% This MiniZinc model was created by Hakan Kjellerstrand, hakank@gmail.com
% See also my MiniZinc page: http://www.hakank.org/minizinc/
%

include "globals.mzn"; 

int: n = 100;
set of int: T = 1..n;

float: A = 10.0;

% Some random floats
% array[1..n] of float: w = [0.831221074718619,0.731749529359746,0.035878523269612,0.592168940041293,0.489544199076269,0.835758121142051,0.127027872077668,0.527451717540366,0.444915435949767,0.879461300968873,0.819680869029686,0.002160132397972,0.642732208428314,0.060556923533118,0.791781897093999,0.330373337646189,0.461696746974111,0.342607928599514,0.176698261488554,0.212362860894,0.789329910552748,0.294564618400561,0.931007910953373,0.914432507899791,0.831566235437787,0.0469682361218,0.73668415506216,0.613205111405442,0.632181691300209,0.681338460036245,0.382290972109088,0.463402765553167,0.41308798893033,0.4181694953787,0.055571705594459,0.90263218847226,0.25392761605509,0.182599577672127,0.430083905546965,0.698843052470518,0.062060878175339,0.24976477411099,0.70100318486849,0.704793086603653,0.310321697644108,0.492785081496828,0.035166424249842,0.772018444618219,0.835393010096342,0.211864685738396,0.98438130597788,0.624722920183429,0.506429304138957,0.915389216465591,0.53915542808322,0.337995539111083,0.962357452587391,0.275839582679719,0.951200650516525,0.594539143421938,0.957178042715964,0.333491622159952,0.057941908509443,0.370266031646294,0.751661118004313,0.113513614103903,0.272898219652892,0.005588733593742,0.29611319177603,0.702982125199857,0.70443178606426,0.358174070417031,0.952746899776509,0.405434970467088,0.062967156555023,0.263068596954955,0.898220052429577,0.098133580804865,0.035087041573174,0.733613062060258,0.309998266543261,0.019468347085392,0.358335982243687,0.816427570682218,0.934857563550983,0.897491410326907,0.154423109793301,0.897215015672713,0.173330992540964,0.105623759844165,0.49175415862899,0.130509035256928,0.439115382469779,0.549696067138433,0.500775066903222,0.190776500008431,0.663209681707998,0.773673286556114,0.196365233602172,0.959322873484028];

% Random from fbahr's AMPL model
% array[1..n] of float: w = [0.609209, 0.0271418,0.61913,  0.694816,0.189873, 0.332709, 0.4202,   0.467913,0.921892, 0.805947, 0.086349, 0.831065,0.957156, 0.640516, 0.834624, 0.146476,0.105726, 0.754375, 0.747237, 0.329789,0.714106, 0.486731, 0.845858, 0.80312,0.551532, 0.0399336,0.400708, 0.547582,0.263135, 0.65443,  0.524641, 0.419777,0.349604, 0.478125, 0.979835, 0.302707,0.407247, 0.312899, 0.942043, 0.416209,0.665212, 0.60368,  0.390684, 0.533992,0.575807, 0.390284, 0.0674197,0.7249,0.942022, 0.957052, 0.142002, 0.866753,0.363525, 0.592204, 0.610386, 0.495407,0.00308876,0.760299,0.846178, 0.502234,0.755598, 0.057175, 0.823227, 0.702198,0.450103, 0.312047, 0.299138, 0.724998,0.170122, 0.145526, 0.807721, 0.581355,0.787748, 0.31049,  0.469902, 0.647227,0.837808, 0.788289, 0.125912, 0.218327,0.590166, 0.509734, 0.396007, 0.442504,0.203093, 0.264869, 0.0670343,0.774795,0.253639, 0.786288, 0.806866, 0.11243,0.532339, 0.675623, 0.237144, 0.838863,0.166748, 0.259761, 0.00213615, 0.805357];


% "random" weights...
int: seed = 1;
array[1..n] of float: w = [ int2float((seed*104729*i) mod 65537)/65537.0 | i in 1..n];


% decision variables
array[T] of var 0..1: y;
% var 0.0..1.0*int2float(n): z;
var float: z;
var 0..n: c = sum(y); % number of 1's

% scalar product float version
predicate scalar_product(array[int] of var int: x, array[int] of float: v, var float: s) =
  s = sum(i in index_set(x)) (int2float(x[i])*v[i])
;

% solve minimize z;
% solve satisfy;
solve :: int_search(y, first_fail, indomain_split, complete) minimize z;

constraint
  scalar_product(y,w,z) 
  /\
  z >= A

  % consecutive_ones 
  /\
  forall(i in 1..n-1) (
     n * (1 - y[i] + y[i+1]) >= sum(t in T where t >= i+1) (y[t])
  )
;

output [
  "z: ", show(z), "\n",
  "w: ", show(w), "\n",
  "y: ", show(y), "\n",
  "c: ", show(c), "\n"
];

