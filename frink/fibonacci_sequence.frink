// 
// Fibonacci sequence in Frink
//
// See 
//   * http://en.wikipedia.org/wiki/Fibonacci_chain
//   * http://mathworld.wolfram.com/FibonacciNumber.html
//
// From http://rosettacode.org/wiki/Fibonacci_sequence
// """
// Write a function to generate the nth Fibonacci number. Solutions can be 
// iterative or recursive (though recursive solutions are generally considered 
// too slow and are mostly used as an exercise in recursion). Support for 
// negative n is optional. 
// """
//
// This Frink program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my Frink page: http://www.hakank.org/frink/
//

// traditional recursive (slow)
fib1[n] :=
{
   if n <= 2
      return 1
   else
      return fib1[n-1] + fib1[n-2]
}

// recursive with cache
fib2[n, cache] :=
{
   if cache.containsKey[n]
      return cache@n

   if n <= 2
      return cache@n = 1
   else
      return cache@n = fib2[n-1, cache] + fib2[n-2, cache]
   
}

// wrapper variant 
fib3[n] :=
{
   cache = new dict
   return fib2[n, cache]
}


// Iterative version
fib4[n] :=
{
   f1 = f2 = 1
   i = 2
   while i < n
   {
      tmp = f1
      f1 = f2
      f2 = tmp + f1
      i = i+1
   }

   return f2
}

// Array version
fib5[n] :=
{
   f = [1,1]
   i = 1
   while (i = i+1) < n
      f@i = f@(i-1) + f@(i-2)


   return f@(n-1)
}

println[fib1[10]]

fib2_cache = new dict
println[fib2[10, fib2_cache]]
println["fib2_cache: $fib2_cache"]

fib2_cache2 = new dict

println[fib2[100, fib2_cache2]]

println[fib3[300]]

println[fib4[1000]]

println[fib5[10000]]