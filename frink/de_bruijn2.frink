//
// de Bruijn sequences in Frink
//
// For more about de Bruijn sequences see
//    http://www.hakank.org/comb/debruijn.cgi
//
// Note: This program also supports generation of necklaces and
//       Lyndon words but this is untested.
//
//
// This is an OOP based version.
//

//
// This Frink program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my Frink page: http://www.hakank.org/frink/
//

/*
  This program is based on a C program with the following copyright

  """
  -----------------------------------------------------------------------------
  | C program to generate necklaces, Lyndon words, and De Bruijn              |
  | sequences.  The algorithm is CAT and is described in the book             |
  | "Combinatorial Generation."  This program, was obtained from the          |
  | (Combinatorial) Object Server, COS, at http://www.theory.csc.uvic.ca/~cos |
  | The inputs are n, the length of the string, k, the arity of the           |
  | string, and density, the maximum number of non-0's in the string.         |
  | The De Bruijn option doesn't make sense unless density >= n.              |
  | The program can be modified, translated to other languages, etc.,         |
  | so long as proper acknowledgement is given (author and source).           |
  | Programmer: Frank Ruskey (1994), translated to C by Joe Sawada            |
  -----------------------------------------------------------------------------
  """

*/

//
// Syntax:
//
//   de_bruijn2.frink k n option printit values
//      k     : language 0..k-1)
//      n     : length of the string
//      option: pre-necklace = 0, necklace = 1, lyndon = 2, DeBruijn = 3
//      printit: print intermediate values
//      values : values to print in final output instead of 0..k-1
//
// Examples:
//   $ frink de_bruijn2.frink 10 4
//   This is the tradition port code problem i.e. de Bruijn sequence of
//   10 numbers (0..9) with length 4.
//
//   $ frink de_bruijn2.frink 5 4 3 1 "abcde"
//   De Bruijn sequence of 5 numbers with length of 4, printing the intermediate
//   result. The final result prints the letters a..e instead of 0..4.
//
class DeBruijn
{
   var p
   var a
   var option
   var k
   var n
   var pos
   var res
   var printit


   new[kParam, nParam, optionParam, printitParam] :=
   {
      k = kParam
      n = nParam
      option = optionParam
      printit = printitParam

      a = makeArray[[101], 0]
      res = new array
      pos = 0      
   }

   getA[] := a
   getRes[] := res
   
   /**
   *  "Print" a digit
   */
   Print[p] :=
   {     
      if option == 0 || (n % p == 0 && option == 1) || (option == 2 && p == n)
      {
         for j = 1 to n
         {
            if printit == 1
               print[a@j + " "]
            res.push[a@j]
            pos = pos + 1
         }
         if printit == 1
            println[]
         } else
         {
            if option == 3 && n % p == 0
               for j = 1 to p
               {
                  if printit == 1
                     print[a@j + " "]
                  res.push[a@j]
                  pos = pos + 1
               }
               if printit == 1
                  println[]
         }
               
   } // end Print
            
            
   /**
   *  Generator.
   */
   Gen[t, p, ones] :=
   {
      j = 0
      if ones <= n && t > n
         Print[p]
      else
      {
         a@t = a@(t-p)
         if (a@t > 0)
            Gen[t+1,p,ones+1]
         else
            Gen[t+1,p,ones]
         
         for j = a@(t-p)+1 to k-1
         {
            a@t = j 
            Gen[t+1,t,ones+1]
         }
      }

    } // end Gen

    Gen[] := Gen[1,1,0]

}


k = 10 // alphabet: 0..k-1
n = 4  // size
option = 3 // option (pre-necklace = 0, necklace = 1, lyndon = 2, DeBruijn = 3)
printit = 0 // print the intermediate values (the structure)
vals = "" // values to use instead of 0..k-1 (for last output)

optionDict = new dict[[[0, "pre-necklace"],[1,"necklace"],[2,"lyndon"],[3,"de Bruijn"]]]

// alphabet
if length[ARGS] > 0
  k = parseInt[ARGS@0]

// size
if length[ARGS] > 1
  n = parseInt[ARGS@1]

// option: pre-necklace = 0, necklace = 1, lyndon = 2, DeBruijn = 3
// Note: I have mostly used (and tested) the de Bruijn option.
if length[ARGS] > 2
  option = parseInt[ARGS@2]

// print intermediate values
if length[ARGS] > 3
   printit = parseInt[ARGS@3]

// vals: the values to use instead of 0..k-1 (only for the final output)
if length[ARGS] > 4
{
   vals = ARGS@4
   vlen = length[vals]
   if vlen != k
   {
      println["Error: The length of vals ($vlen) != k ($k). Vals is '$vals'. Stopping."]
      exit[]
   }
}

optionName = optionDict@option

println["k: $k n: $n option: $option ($optionName) values:$vals"]

// density = n
d = new DeBruijn[k, n, option, printit]
d.Gen[]
res = d.getRes[]
if vals != ""
{
   res2 = []
   vals2 = charList[vals]
   for i = 0 to length[res]-1
   {
      res2.push[vals2@(res@i)]
   }
   res = res2
}
len = length[res] + n // including "around the corner"
println["Res (length: $len):\n"]
println[join[" ", res] + " (" + join[" ", sliceLength[res,0,n]] + ")"]
