// 
// Hailstone sequence (Collatz sequence) in Frink
//
// From http://rosettacode.org/wiki/Hailstone_sequence
// """
// The Hailstone sequence of numbers can be generated from a starting 
// positive integer, n by:
//
//  * If n is 1 then the sequence ends.
//  * If n is even then the next n of the sequence = n/2
//  * If n is odd then the next n of the sequence = (3 * n) + 1 
//
// The (unproven), Collatz conjecture is that the hailstone sequence for 
// any starting number always terminates.
//
// Task Description:
//
//  1. Create a routine to generate the hailstone sequence for a number.
//  2. Use the routine to show that the hailstone sequence for the number 
//     27 has 112 elements starting with 27, 82, 41, 124 and ending with 
//     8, 4, 2, 1
//  3. Show the number less than 100,000 which has the longest hailstone 
//     sequence together with that sequences length. (But don't show the 
//     actual sequence)! 
// """
//  
// Also see:
//   http://en.wikipedia.org/wiki/Collatz_conjecture
//
// This Frink program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my Frink page: http://www.hakank.org/frink/
//

// for Hailstone and HailstoneSeq
use HakankUtils.frink


get_longest_seq[limit] :=
{
   lens = new dict
   max_len = 0
   max_n = 1
   
   for n = 1 to limit-1
   {
      m = n
      c_len = 1
      while m > 1
      {
         if lens.containsKey[m]
         {
            c_len = c_len + lens@m - 1
            m = 1
         } else
         {
            m = hailstone[m]
            c_len = c_len + 1
         }
      }

      lens@n = c_len
      if c_len > max_len
      {
         max_len = c_len
         max_n = n
      }
   }
   
   return [max_n, max_len]
   
}


h27 = hailstoneSeq[27]
len27 = length[h27]
println["length[h27]:" + len27]
println[h27]
println[slice[h27,0,4] + " .." + slice[h27, len27-4, len27]]

// calculate the longest sequence for n < 100000
time0 = now[]
m = get_longest_seq[100000]
println["max_n: " + m@0 + " max_len: " + m@1]
println["It took " + (now[]-time0 -> "seconds")]

