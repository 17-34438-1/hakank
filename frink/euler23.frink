//
// Euler problem 23 in Frink
// """
// A perfect number is a number for which the sum of its proper divisors 
// is exactly equal to the number. For example, the sum of the proper divisors 
// of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.

// A number n is called deficient if the sum of its proper divisors is less than 
// n and it is called abundant if this sum exceeds n.

// As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number 
// that can be written as the sum of two abundant numbers is 24. By mathematical 
// analysis, it can be shown that all integers greater than 28123 can be written 
// as the sum of two abundant numbers. However, this upper limit cannot be reduced 
// any further by analysis even though it is known that the greatest number that 
// cannot be expressed as the sum of two abundant numbers is less than this limit.

// Find the sum of all the positive integers which cannot be written as the sum of 
// two abundant numbers.
// """ 
//
// This Frink program was created by Hakan Kjellerstrand (hakank@bonetmail.com).
// See also my Frink page: http://www.hakank.org/frink/


sum_divisors[n] := n > 1 ? sum[allFactors[n, true, false]] : 0

t1 = now[]
n = 28123 
abundant = select[new range[1, n], {|a| sum_divisors[a] > a}]
// abundant = select[1 to n, {|a| sum_divisors[a] > a}]

vec = array[0 to n]

// About 20.5s
for a = abundant
  for b = abundant
    if a >= b && a+b <= n
      vec@(a+b) = 0
    else 
      break


/*
// Much slower (35s)
len = length[abundant]
multifor [b,a] = [new range[0, len-1], new range[b, len-1]]
{
  aa = abundant@a
  bb = abundant@b
  if aa+bb <= n
    vec@(aa+bb) = 0
}
*/

println[sum[vec]]
println["It took " + (now[]-t1->seconds) + " seconds"]
