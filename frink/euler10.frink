// 
// Project Euler problem 10 in Frink
//
//
// Problem 10
// """ 
// The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
// 
// Find the sum of all the primes below two million.
// """
//
// This Frink program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my Frink page: http://www.hakank.org/frink/
//


//
// Sieve using arrays
// About 7s
//
problem10a[] :=
{
  n = 2000000
  primes = array[0 to n-1]
  primes@1 = 0
  for i = 2 to n/2 
  {
    if primes@i == 0
      next
    j = i
    while i * j <= n
    {
      primes@(i * j) = 0
      j = j + 1
    }
  }

  println[sum[primes]]
}


//
// Using nextPrime
// About 0.5s
//
problem10b[] :=
{
  p = 2
  s = 2
  while true
  {
     p = nextPrime[p]
     if p > 2_000_000
       break
     s = s + p
  }
  println[s]
}

//
// Using select
// About 2.5s
//
problem10c[] :=
{

  println[sum[select[array[2 to 2_000_000 - 1], {|i| isPrime[i]}]]]
}


//
// Sieve using sets
// About 11.5s
//
problem10d[] :=
{
  n = 2000000
  primes = toSet[array[2 to n]]
  for i = 2 to n/2 
  {
    if !primes.contains[i]
      next

    j = i
    while i * j <= n
    {
      primes.remove[i * j]
      j = j + 1
    }
  }

  println[sum[primes]]

}


// t1 = now[]
// problem10a[]
// println["10a took " + (now[] - t1 -> seconds) + " seconds"]

t2 = now[]
problem10b[]
println["10b took " + (now[] - t2 -> seconds) + " seconds"]

// t3 = now[]
// problem10c[]
// println["10c took " + (now[] - t3 -> seconds) + " seconds"]

// t4 = now[]
// problem10d[]
// println["10d took " + (now[] - t4 -> seconds) + " seconds"]
