// 
// Look and say sequence in Frink
// 
// From http://rosettacode.org/wiki/Look-and-say_sequence
// """
// Sequence Definition
//
// * Take a decimal number
// * Look at the number, visually grouping consecutive runs of the 
//   same digit.
// * Say the number, from left to right, group by group; as how 
//   many of that digit there are - followed by the digit grouped. 
//
// * This becomes the next number of the sequence. 
//
// The sequence is from John Conway, of Conway's Game of Life fame.
//
// An example:
//
//  * Starting with the number 1, you have one 1 which produces 11.
//  * Starting with 11, you have two 1's i.e. 21
//  * Starting with 21, you have one 2, then one 1 i.e. (12)(11) 
//    which becomes 1211
//  * Starting with 1211 you have one 1, one 2, then two 1's i.e. 
//    (11)(12)(21) which becomes 111221 
// """
//
// Also, see:
//   http://en.wikipedia.org/wiki/Look-and-say_sequence
//   http://www.research.att.com/~njas/sequences/A005150
//
// This Frink program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my Frink page: http://www.hakank.org/frink/
//

// wrapper for substring of length 1 
ss1[x,i] := substrLen[x,i,1]

//
// Runs of a string, direct approach
//
runs[x] :=
{
   x = "" + x
   s = ""
   last = ss1[x,0]
   c = 0
   for i = 0 to length[x]-1
      if ss1[x,i] == last
         c = c+1
      else
      {
         s = s + c + ss1[x, i-1]
         c = 1
         last = ss1[x,i]
      }

   return "" + s + c + last
}

// Argument a is an array so we can modify it.
runs2[a] := a.push["" + runs[a@(length[a]-1)]]


// make a Look and Say sequence of length n
runsN[n] :=
{
   r = new array[]
   r.push[s = "1"]
   for i = 1 to n
      r.push[s=runs[s]]

   return r
}

last[a] := a@(length[a]-1)

n = 11
println[s1 = "1"]
for i = 1 to n
   println[s1 = runs[s1]]

println[runsN[n]]

ss = ["1"]
for i = 1 to n
   runs2[ss]
println[ss]

// Length of the last string
n2 = 30
println["Length of last string for n=$n2: " + length[last[runsN[n2]]]]
