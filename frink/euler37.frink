// 
// Project Euler problem 37 in Frink
//
// """
// The number 3797 has an interesting property. Being prime itself, it is possible to 
// continuously remove digits from left to right, and remain prime at each stage: 
// 3797, 797, 97, and 7. Similarly we can work from right to left: 3797, 379, 37, and 3.
//
// Find the sum of the only eleven primes that are both truncatable from left to right 
// and right to left.
//
// NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.
//
// """
//
// This Frink program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my Frink page: http://www.hakank.org/frink/
//

// Frink's definition of a prime includes 1
isPrime2[n] := n > 1 ? isPrime[n] : false


check[n] := 
{
  l1 = "" + n
  len = length[l1]
  for i = 0 to len-1
    if !isPrime2[parseInt[substr[l1, i, len]]]
      return false
  
  l2 = reverse[l1]
  for i = 0 to len-1
    // note the reverse again.
    if !isPrime2[parseInt[reverse[substr[l2, i, len]]]]
      return false
  
  return true
  
}

// combine the two checks
// this is slightly slower than check[n]
check2[n] := 
{
  l1 = "" + n
  len = length[l1]
  l2 = reverse[l1]
  for i = 0 to len-1
    if !isPrime2[parseInt[substr[l1, i, len]]] or !isPrime2[parseInt[reverse[substr[l2, i, len]]]]
      return false
 
  return true
  
}


// 2, 3, 5, and 7 is not considered truncable primes
// so we start on 9

ssum = c = 0
ps = []
p = 7+2; 
while c < 11
{
  if isPrime[p] and check[p]
  {
    c = c + 1
    // println["p: $p"]
    ssum = ssum + p
    ps.push[p]
  }

  p = p + 2

}

// println[ps]
println[ssum]


