// 
// Project Euler problem 4 in Frink
//
// Problem 4
// """
// A palindromic number reads the same both ways. The largest palindrome made 
// from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
//
// Find the largest palindrome made from the product of two 3-digit numbers.
// """
//
//
// This Frink program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my Frink page: http://www.hakank.org/frink/
//

isPalindromic[x] := reverse[x+""] == x+""

// Naive version:
// Takes about 5s
// t1 = now[]
// println[max[select[map[{|x,y| x*y}, (array[100 to 999]).combinations[2]], {|n| isPalindromic[n]}]]]
// println["It took " + (now[] - t1 -> seconds) + " seconds"]


// Not so naive version (faster but more boring)
// About 1.2s
/*
t2 = now[]
m = 0
for i = 999 to 100 step -1
  for j = 999 to i step -1
  {
     y=i*j
     n = y+""
     if isPalindromic[n] and y > m
       m = y
  }

println[m]
*/
// println["It took " + (now[] - t2 -> seconds) + " seconds"]


// Seems to be about as fast as the above (~ 1.2s)
//
// Note: This version of multifor requires Frink version 2012-09-04. Thanks Alan.
//
t3 = now[]
m2 = 0
multifor [i,j] = [new range[999,100,-1], new range[999,i,-1]]
{
     y=i*j
     n = y+""
     if isPalindromic[n] and y > m2
         m2 = y
}

println[m2]

println["It took " + (now[] - t3 -> seconds) + " seconds"]
