// 
// Derangements (Rosetta code) in Frink
// 
// From http://rosettacode.org/wiki/Permutations/Derangements
// """
// Permutations/Derangements
// A derangement is a permutation of the order of distinct items in which 
// no item appears in its original place.
//
// For example, the only two derangements of the three items 
//   (0, 1, 2) are (1, 2, 0), and (2, 0, 1).
// 
// The number of derangements of n distinct items is known as the subfactorial of n, 
// sometimes written as !n. There are various ways to calculate !n.
//
// Task
//
// The task is to:
//
//  - Create a named function/method/subroutine/... to generate derangements of the integers 
//    0..n-1, (or 1..n if you prefer).
//  - Generate and show all the derangements of 4 integers using the above routine.
//  - Create a function that calculates the subfactorial of n, !n.
//  - Print and show a table of the counted number of derangements of n vs. the calculated 
//    !n for n from 0..9 inclusive. 
//
// As an optional stretch goal:
//
//   Calculate !20. 
// """
// 
// This Frink program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my Frink page: http://www.hakank.org/frink/
//

derangements[n] :=
{
   x = array[0 to n-1]
   derangements = new array   
   for p = array[0 to n-1].permute[]
   {
      if length[select[x,{|i,t| t@i != i},p]] == n         
         derangements.push[p]
   }
   return derangements
}

// Subfactorial: Counting the number of derangements.
// From http://en.wikipedia.org/wiki/Derangement#Counting_derangements
//
/*
subfactorial[n] :=
{
   if n == 0 || n == 2
      return 1
   if n == 1
      return 0
   return (n-1)*(subfactorial[n-1]+subfactorial[n-2])
}
*/

// Using cache instead
subfactorial[n, cache] :=
{
   if cache.containsKey[n]
      return cache@n
   if n == 0 || n == 2
      return cache@n = 1
   if n == 1
      return cache@n = 0
   
   return cache@n = (n-1)*(subfactorial[n-1, cache]+subfactorial[n-2,cache])

}


// Approximated version
subfactorial2[n] :=
{
  if n == 0
     return 1
  return 1*floor[n!/e + 1/2]
}

println[derangements[4]]

cache = new dict
for n = 0 to 9
   println["n:$n " + length[derangements[n]] + " calculated: " + subfactorial[n, cache]]

println["!20: " + subfactorial[20,cache]]

print["subfactorial[0 to 30]: "]
for n = 0 to 30
   print[subfactorial[n, cache] + " "]
println[]
println["subfactorial2[0 to 30]: (approx): " + map[{|n| subfactorial2[n]}, 0 to 30]]
println["!200: " + subfactorial[200,cache]]
