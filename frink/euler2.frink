// 
// Project Euler problem 2 in Frink
//
// Problem 2
// """
// Each new term in the Fibonacci sequence is generated by adding the 
// previous two terms. By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// Find the sum of all the even-valued terms in the sequence which do not 
// exceed four million.
// """
//
// This Frink program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my Frink page: http://www.hakank.org/frink/
//

fib1[n, cache] := 
{
  if cache.containsKey[n] 
  {
     return cache@n
  } else 
  {
    if n <= 2 
    {
      cache@n = 1
      return 1
    } else 
    {
       cache@n = fib1[n-1, cache]+fib1[n-2, cache]
       return cache@n
     }
  }
}

fib[n] := 
{
  cache = new dict
  return fib1[n,cache]
}

fib2[a, limit = 4000000] := 
{
  cache = new dict
  res = []
  for i = a
  {
     f = fib1[i,cache]
     if f > limit
       return res

     res.push[f]
  }
  return res
}

//// This don't work:
// cache = new dict
// println[sum[select[map[{|i| fib1[i,cache]}, 2 to 100], {|n| n <= 4000000 and n mod 2 ==0}]]]

t1 = now[]
// println[sum[select[map[{|i| fib[i]}, 2 to 100], {|n| n <= 4000000 and n mod 2 ==0}]]]
// Faster:
println[sum[select[fib2[2 to 100], {|n| n mod 2 ==0}]]]
println["It took " + (now[]-t1 -> seconds) + " seconds"]
