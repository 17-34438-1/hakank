// 
// Project Euler problem 39 in Frink
//
// """
// If p is the perimeter of a right angle triangle with integral length sides, 
// {a,b,c}, there are exactly three solutions for p = 120.
//  
// {20,48,52}, {24,45,51}, {30,40,50}
//  
// For which value of p <= 1000, is the number of solutions maximised?
// """
//
// This Frink program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my Frink page: http://www.hakank.org/frink/
//

// argMax
argMax[a] := select[0 to length[a], {|a| a@i == max[a]}]


n = 1000-1
squares = map[{|x| x*x}, 1 to n]
squaresSet = toSet[squares]
valid = []

counts = makeArray[[n], 0]
multifor [x,y] = [squares, squares]
  if x < y && squaresSet.contains[x+y] && (sqrt[x] + sqrt[y] + sqrt[x+y]) < 1000
  {
    c = int[sqrt[x] + sqrt[y] + sqrt[x+y]]
    counts@c = counts@c + 1
  }

p = max[counts]

m = 0
for i = 0 to length[counts]-1
  if counts@i == p
    m = i

// println["Best p ($p) is for $m"]
println["$m"]  


// Alternative version using select directly.
// However, one have to collect counts and p to be used as
// third arguments in select
/*
tmp = [counts, p]
m2 = select[0 to length[counts]-1, {|i,t| t@0@i == t@1 }, tmp]@0
println["Best p ($p) is for $m2"]
  
// However, I want it as direct as possible so here's a one-liner:
m3 = select[0 to length[counts]-1, {|i,t| t@0@i == t@1 }, [counts,p]]@0
println["Best p ($p) is for $m3"]
*/