// 
// Luhn tests of credit card numbers in Frink
//
// From http://rosettacode.org/wiki/Luhn_test_of_credit_card_numbers
// """
// The Luhn test is used by some credit card companies to distinguish 
// valid credit card numbers from what could be a random selection of digits.
//
// Those companies using credit card numbers that can be validated by the 
// Luhn test have numbers that pass the following test:
//
//  1. Reverse the order of the digits in the number.
//  2. Take the first, third, ... and every other odd digit in the 
//     reversed digits and sum them to form the partial sum s1
//  3. Taking the second, fourth ... and every other even digit in the 
//     reversed digits: 
//
//        1. Multiply each digit by two and sum the digits if the answer 
//           is greater than nine to form partial sums for the even digits
//        2. Sum the partial sums of the even digits to form s2 
//
//    1. If s1 + s2 ends in zero then the original number is in the form 
//       of a valid credit card number as verified by the Luhn test. 
//
// For example, if the trail number is 49927398716:
//
// Reverse the digits:
//   61789372994
// Sum the odd digits:
//   6 + 7 + 9 + 7 + 9 + 4 = 42 = s1
// The even digits:
//     1,  8,  3,  2,  9
//   Two times each even digit:
//     2, 16,  6,  4, 18
//   Sum the digits of each multiplication:
//     2,  7,  6,  4,  9
//   Sum the last:
//     2 + 7 + 6 + 4 + 9 = 28 = s2
//
//  s1 + s2 = 70 which ends in zero which means that 49927398716 
// passes the Luhn test
//
// The task is to write a function/method/procedure/subroutine that will 
// validate a number with the Luhn test, and use it to validate the 
// following numbers:
//
//     49927398716 
//     49927398717 
//     1234567812345678 
//     1234567812345670 
// """

//
// This Frink program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my Frink page: http://www.hakank.org/frink/
//

// for digitSum
use HakankUtils.frink


//
// isluhn10(num) returns #T is valid, else #F
//
// Assumption: input num is a string.
//
isluhn10[num] :=
{
   x = map[{|c| parseInt[c]}, reverse[charList[num]]]
   
   evens = new array[]
   odds  = new array[]
   for i = 0 to length[x] -1
      if (i+1) % 2 == 0 // adjust for 0-based
         evens.push[x@i]
      else
         odds.push[x@i]

   return (sum[odds] + sum[mm=map[{|i| digitSum[2*i]}, evens]]) % 10 == 0
}

// Another approach
isluhn10b[num] :=
{
   x = map[{|c| parseInt[c]}, reverse[charList[num]]]
   m = new dict[zip[array[0 to 9], [0,2,4,6,8,1,3,5,7,9]]]
   t = 0
   for i = 0 to (len=length[num])-1 step 2
      t = t + x@i + (i+1 < len ? m@(x@(i+1)) : 0)

   return t mod 10 == 0
}


for n = split[" ", "49927398716 49927398717 1234567812345678 1234567812345670"]
  println["isluhn10[$n] : " + isluhn10[n]]

println[]
for n = split[" ", "49927398716 49927398717 1234567812345678 1234567812345670"]
   println["isluhn10b[$n] : " + isluhn10b[n]]
