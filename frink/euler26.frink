//
// Euler problem 26 in Frink
// """
// A unit fraction contains 1 in the numerator. The decimal representation of the 
// unit fractions with denominators 2 to 10 are given:

//     1/2	= 	0.5
//     1/3	= 	0.(3)
//     1/4	= 	0.25
//     1/5	= 	0.2
//     1/6	= 	0.1(6)
//     1/7	= 	0.(142857)
//     1/8	= 	0.125
//     1/9	= 	0.(1)
//     1/10	= 	0.1

// Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be 
// seen that 1/7 has a 6-digit recurring cycle.

// Find the value of d < 1000 for which 1/d contains the longest recurring cycle in 
// its decimal fraction part.
// """ 
//
// This Frink program was created by Hakan Kjellerstrand (hakank@bonetmail.com).
// See also my Frink page: http://www.hakank.org/frink/
//

//
// Get the length of the repeating cycle for 1/n
//
getRepLen[i] := 
{
  foundRemainders = makeArray[[i],0]
  value = 1
  position = 1
  while foundRemainders@value == 0 and value != 0
  {
    foundRemainders@value = position
    value = value*10
    value = value % i
    position = position+1
  }

  return position-foundRemainders@(value)

}

t1 = now[]
max_len = 0
max_d = 0
for d = 2 to 999
{
  if isPrime[d]
  {
    llen = getRepLen[d]
    if llen > max_len 
    {
      max_len = llen
      max_d = d
    }
  }
}

// println["$max_d max_len: $max_len"]
println["$max_d"]

println["It took " + (now[]-t1 -> seconds) + " seconds"]
