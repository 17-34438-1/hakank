// 
// Monte carlo methods in Frink
//
// From Rosetta code: 
// http://rosettacode.org/wiki/Monte_Carlo_methods
// """
// A Monte Carlo Simulation is a way of approximating the value of a 
// function where calculating the actual value is difficult or impossible. 
// It uses random sampling to define constraints on the value and then makes 
// a sort of "best guess."
//
// A simple Monte Carlo Simulation can be used to calculate the value for π. 
// If you had a circle and a square where the length of a side of the square 
// was the same as the diameter of the circle, the ratio of the area of the 
// circle to the area of the square would be π/4. So, if you put this circle 
// inside the square and select many random points inside the square, the number 
// of points inside the circle divided by the number of points inside the square 
// and the circle would be approximately π/4.
//
// Write a function to run a simulation like this with a variable number of 
// random points to select. Also, show the results of a few different sample 
// sizes. For software where the number π is not built-in, we give π to a 
// couple of digits: 3.141592653589793238462643383280 
// """
//
// This Frink program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my Frink page: http://www.hakank.org/frink/
//

sim_pi[n] :=
{
  t1 = now[]
  inside = sim[n, getFunction["pi_f", 0]]
  my_pi = 4.0*inside/n
  println["n: $n my_pi: $my_pi diff: " + (pi - my_pi) + " (time: " + (now[]-t1 -> "seconds")]
}

// the simulation function: returns 1 if success, 0 otherwise
pi_f[] := (randomFloat[0,1]^2 + randomFloat[0,1]^2) <= 1 ? 1 : 0


// simple (but general) Monte Carlo simulator
// f[] is the simulation function
sim[n, f] :=
{
  c = 0
  for i = 1 to n
    c = c + f[] 

  return c
}


println["pi: " + pi]
for n = 0 to 6
  sim_pi[10^n]

