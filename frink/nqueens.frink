// 
// n-queens problem in Frink
// 
// One dimensional version of N-queens problem:
// http://en.wikipedia.org/wiki/Eight_queens_puzzle
// 
// This Frink program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my Frink page: http://www.hakank.org/frink/
//

// Note: There are faster methods for solving the nqueens
// but I wanted to test these specific approaches for generating
// all the solutions.

//
// Using permute and multifor
//
nqueens1[n] :=
{
   c = 0
   s = array[0 to n-1]
   for q = s.lexicographicPermute[]
   {
      k = 0
      p = 0
      found = true
      OUTER:
      multifor [i, j] = [s, i+1 to n-1]
         if !(q@i != q@j && q@i + i != q@j + j && q@i - i != q@j - j)
         {
            found = false
            break OUTER
         }
         
     if found
        c = c+ 1
    
  }
 
  return c
  
}


//
// Ensure that all elements in s is distinct
//
alldifferent[s] :=  length[toSet[s]] == length[s]


// Using alldifferent
// slower
nqueens2[n] :=
{
   c = 0
   s = array[0 to n-1]
   for q = s.lexicographicPermute[]
   {
      a1 = new array
      a2 = new array
      for i = s
      {
        a1.push[q@i+i]
        a2.push[q@i-i]          
      }
         
      if alldifferent[a1] && alldifferent[a2]
         c = c + 1   
  }
 
  return c

   
}

//
// Using alldifferent
// and separates the creation om a1 and a2 for alldifferent
// Fastest so far
//
nqueens2b[n] :=
{
   c = 0
   s = array[0 to n-1]
   for q = s.lexicographicPermute[]
   {
      a1 = new array
      for i = s
        a1.push[q@i+i]
        
      if alldifferent[a1]
      {
         a2 = new array
         for i = s
            a2.push[q@i-i]

         if alldifferent[a2]
            c = c + 1
      }
  }
 
  return c
   
}



nextPermutation[p] :=
{
   n = length[p]
   k = n - 2
  
   while p@(k) > p@(k+1)
   {
      k = k - 1
      if k == -1
         return []
   }
   if k == -1
   {
      return []
   } else
   {
      j = n-1
      while p@k > p@j
         j = j - 1

      [p@k,p@j] = [p@j, p@k]
      r = n-1
      s = k+1
      while r > s
      {
         [p@r,p@s] = [p@s,p@r]
         r = r - 1 
         s = s + 1
      }
   }
   
   return p
}


//
// Using nextPermutation
// slowest so far
//
nqueens3[n] :=
{
   c = 0
   s = array[0 to n-1]
   q = array[0 to n-1]
   while q != []
   {
      a1 = new array
      a2 = new array
      for i = s
      {
         a1.push[q@i+i]
         a2.push[q@i-i]          
      }
      
      if alldifferent[a1] && alldifferent[a2] 
         c = c + 1
      
      q = nextPermutation[q]
   }

   return c

}

//
// Separating a1 and a2 in alldifferent
// faster than nqueens3
//
nqueens3b[n] :=
{
   c = 0
   s = array[0 to n-1]
   q = array[0 to n-1]
   while q != []
   {
      a1 = new array
      for i = s
         a1.push[q@i+i]
      
      if alldifferent[a1]
      {
         a2 = new array
         for i = s
            a2.push[q@i-i]          

         if alldifferent[a2] 
            c = c + 1
      }
       
      q = nextPermutation[q]
   }

   return c

}


//
// Generating all possible values (0 to n-1) of
// q@0, q@1, ... q@(n-1) via multifor
//
// Nice try, but it's way to slow (takes about 1 minute for n=8,
// compared with seconds for the other approaches).
//
nqueens4[n] :=
{
   c = 0
   s = array[0 to n-1]
   ss = makeArray[[n], s]
   multifor q = ss
   {
      k = 0
      p = 0
      found = true
      if !alldifferent[q]
      {
         next
      }
      
      INNER:
      multifor [i, j] = [s, i+1 to n-1]
         if !(q@i != q@j && q@i + i != q@j + j && q@i - i != q@j - j)
         {
            found = false
            break INNER
         }
      if found
        c = c+ 1
  }
 
  return c
  
}




n = 8

t1 = now[]
println[nqueens1[n] + " solutions"]
println["queens1[$n] took " + (now[] - t1 -> "seconds")]

t1 = now[]
println[nqueens2[n] + " solutions"]
println["queens2[$n] took " + (now[] - t1 -> "seconds")]

t1 = now[]
println[nqueens2b[n] + " solutions"]
println["queens2b[$n] took " + (now[] - t1 -> "seconds")]


t1 = now[]
println[nqueens3[n] + " solutions"]
println["queens3[$n] took " + (now[] - t1 -> "seconds")]

t1 = now[]
println[nqueens3b[n] + " solutions"]
println["queens3b[$n] took " + (now[] - t1 -> "seconds")]


/*
// too slow
t1 = now[]
println[nqueens4[n] + " solutions"]
println["queens4[$n] took " + (now[] - t1 -> "seconds")]
*/


/*
for n = 4 to 12
{
   println["\nn = $n"]
   t1 = now[]
   println[nqueens2b[n] + " solutions"]
   println["\nn=$n took " + (now[] - t1 -> "seconds")]
}
*/