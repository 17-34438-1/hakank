// 
// Palindrome detection in SetlX
//
// http://rosettacode.org/wiki/Palindrome_detection
// """
// Write at least one function/method (or whatever it is called in 
// your preferred language) to check if a sequence of characters (or bytes) 
// is a palindrome or not. The function must return a boolean value 
// (or something that can be used as boolean value, like an integer). 
// """

// This Frink program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my Frink page: http://www.hakank.org/frink/
//

// strip and to lower
satl[s] := lc[s] =~ %s/[^a-z]//gi

isPalindrome[s] := 
{
   s2 = satl[s]
   return s2 == reverse[s2]
}

// Recursive version
isPalindromeRec[s] := isPalindromeRec1[satl[s]]

first[s] := substrLen[s,0,1]
last[s] := substrLen[s,length[s]-1,1]

isPalindromeRec1[s] :=
{
   n = length[s]-1
   return n < 2 || (first[s] == last[s] && isPalindromeRec1[substrLen[s, 1, n-1]])
}


strings = ["In girum imus nocte et consumimur igni", 
           "this is a non palindrome string",
           "anna ABcdcBA anna",
           "anna ABcdcBA annax",
           "A man, a plan, a canoe, pasta, heros, rajahs" +
              "a coloratura, maps, snipe, percale, macaroni, " +
              "a gag, a banana bag, a tan, a tag, " + 
              "a banana bag again (or a camel), a crepe, pins, " + 
              "Spam, a rut, a Rolo, cash, a jar, sore hats, " + 
              "a peon, a canal - Panama!"]

for s = strings
  println["$s: " + isPalindrome[s]]



println["\nRecursive:"]
for s = strings
  println["$s: " + isPalindromeRec[s]]

println["\nTesting a long string..."]
alpha = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"

len = length[alpha]-1
w = ""
for i = 1 to 10000
   w = w + substrLen[alpha, random[len], 1]
println["Finished generating"]
println[isPalindrome[w]]
println[isPalindromeRec[w]]
