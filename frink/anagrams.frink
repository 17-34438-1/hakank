// 
// Anagrams in Frink
//
// This version checks for the largest sets of anagrams from a word list.
// Note: this program just cares about words consisting of a-z.
//
// Also compare with the Rosetta Code:
// http://rosettacode.org/wiki/Anagrams
// """
// Two or more words can be composed of the same characters, but in a different order.
// Using the word list at http://www.puzzlers.org/pub/wordlists/unixdict.txt, find the
// sets of words that share the same characters that contain the most words in them. 
// """
//
//
// This Frink program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my Frink page: http://www.hakank.org/frink/
//


t1 = now[]

// words = lines["file:/usr/share/dict/words"]

// From http://www.puzzlers.org/pub/wordlists/unixdict.txt
words = lines["file:unixdict.txt"]

// This file is part of the Moby wordlist project, available at:
//   http://icon.shef.ac.uk/Moby/
// (the file mobydict/mwords/354984si.ngl)
// words = lines["file:samples/singlewords.txt"]

anagrams = new dict
for word = words
{
   word = lc[word]
   if (word =~ %r/^\s*$/) or (word =~ %r/[^a-zåäö]/)
      continue

   sorted = join["",sort[charList[word]]]
   if anagrams.containsKey[sorted]
      anagrams@sorted.push[word]
   else
      anagrams@sorted = array[word]

}

s = map[{|k,v| [k,length[v],v]}, anagrams]
max_len = max[map[{|k,v,v2| v}, s]]
println["max length: $max_len"]
println[join["\n", map[{|k,m,v| v}, select[s, {|k,ml| k@1 == ml}, max_len]]]]

println["\nIt took " + (now[] - t1 -> seconds) + " seconds"]
