#!/usr/bin/env setl
-- 
-- Hailstone sequence (Collatz sequence) in SETL
--
-- From http://rosettacode.org/wiki/Hailstone_sequence
-- """
-- The Hailstone sequence of numbers can be generated from a starting 
-- positive integer, n by:
--
--  * If n is 1 then the sequence ends.
--  * If n is even then the next n of the sequence = n/2
--  * If n is odd then the next n of the sequence = (3 * n) + 1 
--
-- The (unproven), Collatz conjecture is that the hailstone sequence for 
-- any starting number always terminates.
--
-- Task Description:
--
--  1. Create a routine to generate the hailstone sequence for a number.
--  2. Use the routine to show that the hailstone sequence for the number 
--     27 has 112 elements starting with 27, 82, 41, 124 and ending with 
--     8, 4, 2, 1
--  3. Show the number less than 100,000 which has the longest hailstone 
--     sequence together with that sequences length. (But don't show the 
--     actual sequence)! 
-- """
--  
-- Also see:
--   http://en.wikipedia.org/wiki/Collatz_conjecture
--
-- This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
-- Also see my SETL page: http://www.hakank.org/setl/
--

h27 := hailstone_seq(27);
-- print(h27);
print("length:", #h27);
print(h27(1..4), " ..", h27(#h27-3..#h27));

-- calculate the longest sequence for n < 100000
time0 := time();
m := get_longest_seq_cached(100000);
-- m := get_longest_seq(100000);
time1 := time();
print("max_n:", m(1), " max_len:", m(2));
print("It took", (time1-time0)/1000, "seconds");

-- print(hailstone_seq(m(1)));


--
-- Calculate the longest sequence for n < limit
-- using a cache with the lengths of already known 
-- sequences.
--
-- Takes about 2 seconds.
--
proc get_longest_seq_cached(limit);

  lens := {};
  max_len := 0;
  max_n := 1;

  for n in [1..limit-1] loop
    m := n;
    c_len := 1;
    while m > 1 loop
      if lens(m) /= om then 
        -- use the cached result
        c_len +:= lens(m) - 1;
        m := 1;
      else 
        -- else calculate the value
        m := hailstone(m);
        c_len +:= 1;
      end if;
    end loop;
    lens(n) := c_len;

    if c_len > max_len then
      max_len := c_len;
      max_n := n;
    end if;
  end loop;

  return [max_n, max_len];

end proc;

--
-- Calculate the longest sequence for n < limit
-- Brute force approach.
--
-- Takes about 19 seconds.
--
proc get_longest_seq(limit);
  max_len := 0;
  max_n := 0;
  for n in [1..100000-1] loop
     l := #hailstone_seq(n);
     if l > max_len then
        max_n := n;
        max_len := l;
     end if;
  end loop;

  return [max_n, max_len];

end proc;


--
-- get the Hailstone sequence for n
--
proc hailstone_seq(n);
  h := [n];
  max_n := 1;
  while n > 1 loop
     n := hailstone(n);
     h with:= n;
  end loop;

  return h;
end proc;


--
-- Hailstone number
--
proc hailstone(n);
  if n = 1 then
    return om;
  end if;
  if n mod 2 = 0 then
      return n div 2;
  else
      return 3*n + 1;
  end if;
end proc;

