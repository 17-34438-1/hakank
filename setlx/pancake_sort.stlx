// 
// Pancake sort in SetlX
// 
// See 
//  * http://en.wikipedia.org/wiki/Pancake_sorting
//  * http://rosettacode.org/wiki/Sorting_algorithms/Pancake_sort
//  * http://rosettacode.org/wiki/Number_reversal_game
// 
// This SetlX program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

//
// pancake sort (inline)
//
pancake_sort := procedure(rw nums) {

  for (i in [#nums,#nums-1..1]) {
    // find the index of the largest element not yet sorted
    
    // nice but slower
    // [this_max, max_idx] := find_max2(nums[1..i]);
    
    // this variant is sligtly faster
    [this_max, max_idx] := find_max(nums[1..i]);
    
    if (max_idx == i) {
      continue; // element already in place
    }
    
    // flip this max element to index 1
    if (max_idx > 1) {
      // This don't work in SetlX since it don't support
      // slice assignments.
      // nums[1..max_idx] := reverse(nums[1..max_idx]);
      // rev2(nums[1..max_idx]);
      tmp := reverse(nums[1..max_idx]);
      for (k in [1..max_idx]) {
        nums[k] := tmp[k];
      }
    }
    
    // then flip the max element to its place
    // nums[1..i] := reverse(nums[1..i]);
    // rev2(nums[1..i]);
    tmp := reverse(nums[1..i]);
    for (k in [1..i]) {
      nums[k] := tmp[k];
    }
  }
    
};

//
// reverse a tuple
//
rev := procedure(a) {
  return [a[i] : i in [#a,#a-1..1]];
};

rev2 := procedure(rw a) {
  a := reverse(a); // [a[i] : i in [#a,#a-1..1]];
  return a;
};



//
// find the (first) index of the max value 
// in a tuple.
// Returns [max_value, index]
find_max := procedure(a) {
  max_idx := 1;
  this_max := a[1];
  for (j in [2..#a]) {
    if (a[j] > this_max) {
      this_max := a[j];
      max_idx := j;
    }
  }
  return [this_max, max_idx];
};


// This variant is somewhat slower (but nicer) since it 
// first calculate the max value then loop again 
// to find the index.
// Returns [max, index]
find_max2 := procedure(a) {
  m := max(a);
  m2 := [m, [i : i in [1..#a] | a[i] == m]];
  return m2[1];
};



nums := [7,6,5,9,8,4,3,1,2,0];
print(nums);
pancake_sort(nums);
print(nums);

time0 := now();
r := [1..1000];
lst:=[rnd(r) : i in [1..1000]];
pancake_sort(lst);
print("It took ", (now()-time0)/1000.0," seconds to sort ", #lst, " numbers");
