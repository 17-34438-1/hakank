#!/usr/bin/env setl
-- 
-- Project Euler problem 37 in SETL
--
-- """
-- The number 3797 has an interesting property. Being prime itself, it is possible to 
-- continuously remove digits from left to right, and remain prime at each stage: 
-- 3797, 797, 97, and 7. Similarly we can work from right to left: 3797, 379, 37, and 3.
--
-- Find the sum of the only eleven primes that are both truncatable from left to right 
-- and right to left.
--
-- NOTE: 2, 3, 5, and 7 are not considered to be truncatable primes.
--
-- """
--
-- This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
-- Also see my SETL page: http://www.hakank.org/setl/
--

var prime_hash := {};

problem37();

proc is_prime(n);

    pp := prime_hash(n);
    if pp /= om then
        return pp;
    end if;

    if n = 1 then
      return false;
    end if;

    if n = 2 or n = 3 then
        return(true);
    end if;

    if n mod 2 = 0 then
        prime_hash(n) := false;
        return(false);
    end if;

    for i in [3, 5..round(sqrt(n))+1] loop
        if n mod i = 0 then
            prime_hash(n) := false;
            return(false);
        end if;
    end loop;

    prime_hash(n) := true;
    return(true);
end proc;


proc check2(n);
   L := str(n);
   for i in [1..#L] loop
       tmp1 := val(+/L(i..#L));
       if not(is_prime(tmp1)) then
           return(false);
       end if;
   end loop;

   L2 := reverse(L);
   for i in [1..#L2] loop
       -- note the reverse again..
       tmp2 := val(+/reverse(L2(i..#L)));
       if not(is_prime(tmp2)) then
           return(false);
       end if;
   end loop;

   return(true);

end proc;

-- 7.8s
proc problem37;

    -- 2, 3, 5, and 7 is not considered truncable primes
    -- so we start on 9

    -- init the prime hash
    prime_hash := {[1,false],[2,true],[3,true]};

    p := 7+2; 
    sum := 0;
    c := 0;
    ps := [];
    while c < 11 loop
        if is_prime(p) then
            if check2(p) then
                c +:= 1;
                print("p:", p);
                sum +:= p;
                ps +:= [p];
            end if;
        end if;

        p +:= 2;

    end loop;

    print(ps);
    print(sum);

end proc;
