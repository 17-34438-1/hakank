--
-- Euler problem 23
-- """
-- A perfect number is a number for which the sum of its proper divisors 
-- is exactly equal to the number. For example, the sum of the proper divisors 
-- of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.

-- A number n is called deficient if the sum of its proper divisors is less than 
-- n and it is called abundant if this sum exceeds n.

-- As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number 
-- that can be written as the sum of two abundant numbers is 24. By mathematical 
-- analysis, it can be shown that all integers greater than 28123 can be written 
-- as the sum of two abundant numbers. However, this upper limit cannot be reduced 
-- any further by analysis even though it is known that the greatest number that 
-- cannot be expressed as the sum of two abundant numbers is less than this limit.

-- Find the sum of all the positive integers which cannot be written as the sum of 
-- two abundant numbers.
-- """ 
--
-- This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com).
-- See also my SETL page: http://www.hakank.org/setl/

problem23();
problem23b();
problem23c();



proc sum_divisors(n);
    s := 0;
    for i in [1..round(n/2)] loop
        if n mod i = 0 then
            s +:= i;
        end if;
    end loop;
    return(s);
end proc;


--
-- This is much faster, by a factor 10 or so
--
proc sum_divisors2(n);
    d := floor(sqrt(n));
    sum := 1;
    for i in [2..d] loop
        if n mod i = 0 then
            sum := sum+i;
            if i /= n div i then
                sum := sum+(n div i);
            end if;
        end if;
    end loop;

    return sum;
end proc;

--
-- Time: 15.054s
--
proc problem23; 
    n := 28123; 

    abundant := [a : a in [1.. n] | sum_divisors2(a) > a];
    hash := {};
    for a in abundant loop
        for b in abundant loop
            if a >= b and a+b <= n then
                hash(a+b) := 1;            
            else 
                quit;
            end if;
        end loop;
    end loop;

    sum := 0;
    for a in [1..n] loop
        if hash(a) = om then
            sum +:= a;
        end if;
    end loop;

    print(sum);

end proc;


--
-- Using vector for the sums
--
-- Time: 11.44s
--
proc problem23b; 
    n := 28123; 
    abundant := [a : a in [1.. n] | sum_divisors2(a) > a];

    vec := [0 : i in [1..n]];
    for a in abundant loop
        for b in abundant loop
             if a >= b and a+b <= n then
                 vec(a+b) := 1;
             else         
                 quit;
             end if;           
        end loop;
    end loop;

    

    sum := 0;
    for a in [1..n] loop
        if vec(a) /= 1 then
            sum +:= a;
        end if;
    end for;

    print(sum);

end proc;


-- --
-- -- Using vector for abundant
-- -- Time: 13.6s
-- --
proc problem23c; 
    n := 28123; 
    abundant := [a : a in [1.. n] | sum_divisors2(a) > a];

    vec := [0 : i in [1..n]];
    alen := #abundant;
    for i in [1..alen] loop
       for j in [i..alen] loop
           c := abundant(i)+abundant(j);
           if c <= n then 
               vec(c) := 1;
           end if;
       end loop;
    end loop;

    sum := 0;
    for a in [1..n] loop
        if vec(a) /= 1 then
            sum +:= a;
        end if;
    end loop;

    print(sum);

end proc;
