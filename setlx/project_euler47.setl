#!/usr/bin/env setl
-- 
-- Project Euler problem 47 in SETL
--
-- """  
-- The first two consecutive numbers to have two distinct prime factors are:
--
-- 14 = 2 x 7
-- 15 = 3 x 5
--
-- The first three consecutive numbers to have three distinct 
-- prime factors are:
--
-- 644 = 2^2 x 7 x 23
-- 645 = 3 x 5 x 43
-- 646 = 2 x 17 x 19.
--
-- Find the first four consecutive integers to have four distinct primes 
-- factors. What is the first of these numbers?
--
-- """
--
-- This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
-- Also see my SETL page: http://www.hakank.org/setl/
--

t1 := time();
problem47();
t2 := time();
print("It took", t2-t1);
problem47b();
t3 := time();
print("It took", t3-t2);

proc is_prime(n);
    if n = 2 or n = 3 then
        return(true);
    end if;
    if n mod 2 = 0 then
        return(false);
    end if;
    for i in [3,5..round(sqrt(n))+1] loop
        if n mod i = 0 then
            return(false);
        end if;
    end loop;
    return(true);
end proc;

--
-- distinct factors of  ^n
--
proc distinct_factors(n);
    ll := [];
    if is_prime(n) then 
        return([]);
    end if;

    if n mod 2 = 0 then
        ll := [2];
        while n mod 2 = 0 loop
            n := n div 2;
        end loop;
    end if;
        
    for i in [3,5..round(n/2)] loop
        if n mod i = 0 then
            ll +:= [i];
            while n mod i = 0 loop
                n := n div i;
            end loop;
        end if;
        if n = 1 then 
           quit; 
        end if;
    end loop;

    return(ll);

end proc;


-- Very slow: 70s
proc problem47();

    n := 2;
    L := [];
    limit := 4;

    while #L < limit loop
        if is_prime(n) or #distinct_factors(n) /= limit then
            n := n+1;
            L := [];
            continue; 
        else
            L +:= [n];
            n +:= 1;
        end if;

    end loop;

    print(L);
    print(L(1));

end proc;


-- Much faster: 2.2s
proc problem47b;

    maxn := 1000000;
    f := [0 : i in [1..maxn]];

    for i in [2..maxn-1] loop
        if f(i) = 0 then
            for j in [2*i,2*i+i..maxn-1] loop
                f(j) +:= 1;
            end loop;
        end if;
    end loop;

    goal := [4]*4;
    for i in [2..maxn-3] loop
        if f(i..i+3) = goal then
            print(i);
            quit;
        end if;
    end loop;

end proc;

