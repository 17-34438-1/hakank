#!/usr/bin/env setl
-- 
-- Palindrome detection in SETL.
--
-- http://rosettacode.org/wiki/Palindrome_detection
-- """
-- Write at least one function/method (or whatever it is called in 
-- your preferred language) to check if a sequence of characters (or bytes) 
-- is a palindrome or not. The function must return a boolean value 
-- (or something that can be used as boolean value, like an integer). 
-- """

-- This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
-- Also see my SETL page: http://www.hakank.org/setl/
--

strings := ["In girum imus nocte et consumimur igni", 
            "this is a non palindrome string",
            "anna ABcdcBA anna",
            "anna ABcdcBA annax",
            "A man, a plan, a canoe, pasta, heros, rajahs" +
              "a coloratura, maps, snipe, percale, macaroni, " +
              "a gag, a banana bag, a tan, a tag, " + 
              "a banana bag again (or a camel), a crepe, pins, " + 
              "Spam, a rut, a Rolo, cash, a jar, sore hats, " + 
              "a peon, a canal - Panama!"
           ];

for s in strings loop;
    print(s, is_palindrome(s));
end loop;

print("\nRecursive:");
for s in strings loop;
    print(s, is_palindrome_rec(s));
end loop;

print("\nTesting a long string...");
setrandom(0);
w := "";
alpha:="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
s:=join([alpha(1+random(#alpha)) : i in [1..100000]], "");
print(is_palindrome(s));
print(is_palindrome_rec(s));

proc is_palindrome(s);
   s2 := satl(s);
   return s2 = reverse(s2);
end proc;


-- Recursive version
proc is_palindrome_rec(s);
   return is_palindrome_rec1(satl(s));
end proc;

proc is_palindrome_rec1(s);
   n := #s;
   return n < 2 or (s(1) = s(n) and is_palindrome_rec1(s(2..n-1)));
end proc;

-- strip and to lower
proc satl(s);
  s2 := to_lower(s);
  gsub(s2,"[^a-z]+","");
  return s2;
end proc;
