// 
// Tree traversal in SETL.
//
// From http://rosettacode.org/wiki/Tree_traversal
// """
// You are encouraged to solve this task according to the task 
// description, using any language you may know.
// 
// Implement a binary tree where each node carries an integer, 
// and implement preoder, inorder, postorder and level-order traversal. 
// Use those traversals to output the following tree:
//
//         1
//        / \
//       /   \
//      /     \
//     2       3
//    / \     /
//   4   5   6
//  /       / \
// 7       8   9
//
// The correct output should look like this:
//
// preorder:    1 2 4 7 5 3 6 8 9
// inorder:     7 4 2 5 1 8 6 9 3
// postorder:   7 4 5 2 8 9 6 3 1
// level-order: 1 2 3 4 5 6 7 8 9
// """
//
// Also see http://en.wikipedia.org/wiki/Tree_traversal
//
//
// This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

// preorder
preorder := procedure(ll) {
  switch {
  case ll == om: return [];
  default      : return [ll[1]] + preorder(ll[2]) + preorder(ll[3]);
  }
};

// inorder
inorder := procedure(ll) {
  switch {
  case ll == om: return [];
  default      : return inorder(ll[2]) + [ll[1]] + inorder(ll[3]);
  }
};

// postorder
postorder := procedure(ll) {
  switch {
  case ll == om: return [];
  default      : return postorder(ll[2]) + postorder(ll[3]) + [ll[1]];
  }
};


// leverlorder 
levelorder := procedure(ll) {
  q := [ll];
  res := [];
  while (q != []) {
    n := fromB(q);
    res += [n[1]];
    q += [n[2]];
    q += [n[3]];
  }
  return res;
};

// Generalized version of pre/in/post order
order := procedure(ll, t) {
  switch {
  case ll == om: return [];
  case t == "preorder" : return [ll[1]] + order(ll[2],t) + order(ll[3],t);
  case t == "inorder"  : return order(ll[2],t) + [ll[1]] + order(ll[3],t);
  case t == "postorder": return order(ll[2],t) + order(ll[3],t) + [ll[1]];
  }
};

tree := [1, [2, [4, [7]], [5]], [3, [6, [8], [9]]]];
print("preorder  :", preorder(tree));
print("inorder   :", inorder(tree));
print("postorder :", postorder(tree));
print("levelorder:", levelorder(tree));

print();
for (o in ["preorder","inorder","postorder"]) {
  print("$o$: $order(tree, o)$");
}