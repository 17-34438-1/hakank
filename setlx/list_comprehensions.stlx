//
// List comprehensions in SetlX
//
// From Rosetta code:
// http://rosettacode.org/wiki/List_comprehensions
//
// A list comprehension is a special syntax in some programming 
// languages to describe lists. It is similar to the way mathematicians 
// describe sets, with a set comprehension, hence the name.
// 
// Some attributes of a list comprehension are that:
//
//   * They should be distinct from (nested) for loops within the 
//     syntax of the language.
//   * They should return either a list or an iterator (something 
//     that returns successive members of a collection, in order).
//     The syntax has parts corresponding to that of set-builder notation. 
// 
// Write a list comprehension that builds the list of all Pythagorean 
// triples with elements between 1 and n. If the language has multiple 
// ways for expressing such a construct (for example, direct list 
// comprehensions and generators), write one example for each.
// """
//
// This SetlX program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SetlX page: http://www.hakank.org/setl/
//

// Returns an array.
pyth := procedure(n) {
  return [[a,b,c] : a in [1..n], b in [a..n], c in [b..n] | a*a+b*b == c*c];
};

// Returns a set: Seems to be a tiny bit faster
pyth2 := procedure(n) {
  return {[a,b,c] : a in [1..n], b in [a..n], c in [b..n] | a*a+b*b == c*c};
};

n := 300;
t1:=now(); 
print(#pyth(n));
t2:=now(); 
print("Array: It took $t2-t1$ms");
print("\n");
t1:=now(); 
print(#pyth2(n));
t2:=now(); 
print("Set: It took $t2-t1$ms");
