// 
// Ordered words in SETL.
//
// http://rosettacode.org/wiki/Ordered_words
// """
// Define an ordered word as a word in which the letters of the word appear in 
// alphabetic order. Examples include 'abbey' and 'dirt'.
//
// The task is to find and display all the ordered words in this dictionary that have the 
// longest word length. (Examples that access the dictionary file locally assume that you 
// have downloaded this [unixdict.txt] file yourself.) The display needs to be shown 
// on this page. 
// """
//
// This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//


// Insertion sort
insertion_sort := procedure(a) {
  for (i in [2..#a]) {
    v := a[i];
    j := i-1;
    while (j >= 1 && compare(a[j], v) > 0) {
      a[j+1] := a[j];
      j := j-1;
    }
    a[j+1] := v; 
  }
  return +/a;
};

qsort := procedure(a) {
  if (#a > 1) {
    pivot := a[#a \ 2 + 1];
    a := qsort([x in a | compare(x, pivot)  < 0]) +
               [x in a | compare(x, pivot) == 0]     +
         qsort([x in a | compare(x, pivot)  > 0]);
  }

  return a;
};

check1 := procedure(dict, sort, name) {
  t1 := now();
  words := { word : word in dict | word == +/sort(word)};
  max_len := max([#w : w in words]);
  print([w : w in words | #w == max_len]);
  print("$name$ took $(now()-t1)/1000.0$s");
};


// faster but not as elegant
check2 := procedure(dict, sort, name) {
  t1 := now();
  max_words := [];
  max_len := 0;
  for (word in dict | #word >= max_len && word == +/sort(word)) {
    if (#word > max_len) {
      max_words := [word];
      max_len := #word;
    } else {
      max_words += [word];
    }
  }

  print(max_words);
  print("$name$ took $(now()-t1)/1000.0$s");
};

  
t1 := now();
dict := readFile("unixdict.txt");
print("Reading dict took $(now()-t1)/1000.0$s");
check1(dict, insertion_sort, "insertion_sort");
check1(dict, qsort, "qsort");

print("\ncheck2:");
check2(dict, insertion_sort, "insertion_sort");
check2(dict, qsort, "qsort");

