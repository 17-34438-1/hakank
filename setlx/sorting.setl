#!/usr/bin/env setl
-- 
-- Some sorting algorithms in SETL.
--
-- There is not built in support in (GNU) SETL, so here are
-- some different versions.
--
-- Also compare with http://www.hakank.org/setl/anagrams.setl where
-- these methods have been tested.
--
-- This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
-- Also see my SETL page: http://www.hakank.org/setl/
--

setrandom(0); -- indeterministic
n := 10000;
a := [random 1000 : i in [1..n]];
bench(a, "qsort", routine qsort);
bench(a, "merge_sort", routine merge_sort_it);
bench(a, "merge_sort1", routine merge_sort1);
bench(a, "insertion_sort", routine insertion_sort);


--
-- benchmark
--
proc bench(a, name, method);
   print(name);
   start_time := time();
   s := call(method,a);
   end_time := time();
   print("Time: ", (end_time - start_time)/1000, "seconds");
end proc;


--
-- Quick sort
--
proc qsort(a);
  if #a > 1 then
    pivot := a(#a div 2 + 1);
    a := qsort([x in a | x < pivot]) +
         [x in a | x = pivot] +
         qsort([x in a | x > pivot]);
  end if;
  return a;
end proc;


--
-- insertion sort
--
-- Inspired by 
-- http://en.wikipedia.org/wiki/Insertion_sort
--
procedure insertion_sort(A);
   for i in [2..#A] loop
      v := A(i);
      j := i-1;
      while j >= 1 and A(j) > v loop
        A(j+1) := A(j);
        j := j - 1;
      end loop;
      A(j+1) := v; 
   end loop;

   return A;

end procedure;


--
-- Merge sort  
-- From http://www.settheory.com/Chapters/Chapter_5_procedures.html
-- Recursive variant
procedure merge_sort(t); -- recursive merge_sort procedure
	return if #t < 2 then t
			-- since a tuple of length 0 or 1 is ipso facto sorted
	else merge(merge_sort(t(1..#t div 2)), merge_sort(t(#t div 2 + 1..))) end if;

end merge_sort;

procedure merge(t1,t2); -- auxiliary recursive procedure for merging

	return if t1 = [ ] then t2
	elseif t2 = [ ] then t1
	elseif t1(1) < t2(1) then [t1(1)] + merge(t1(2..),t2)
	else [t2(1)] + merge(t1, t2(2..)) end if;
	
end merge;

--
-- Merge sort
--
-- iterative variant
--
procedure merge_sort_it(t); -- recursive merge_sort procedure
	return if #t < 2 then t
			-- since a tuple of length 0 or 1 is ipso facto sorted
	else merge_it(merge_sort_it(t(1..#t div 2)), merge_sort_it(t(#t div 2 + 1..))) end if;

end merge_sort_it;

-- iterative
procedure merge_it(t1,t2);   -- iterative variant of merge procedure
	t := [];		-- merged tuple to be built up
   i1 := i2 := 1;		-- indices of first components not yet moved

   while i1 <= #t1 and i2 <= #t2 loop   
   	if t1(i1) < t2(i2) then -- move t1(i1) to t
   		t with := t1(i1);
   		i1 +:=1;
   	else                -- move t2(i2) to t
   		t with:= t2(i2);
   		i2 +:= 1;
   	end if;
   end loop;
   return t + t1(i1..) + t2(i2..);
   	-- note that at most one of t1(i1..) and t2(i2..) is non-null

end procedure;



--
-- Merge sort II
-- Inspired by
-- http://en.wikipedia.org/wiki/Merge_sort
--
procedure merge_sort1(m);
    if #m <= 1 then
        return m;
    end if;

    left := [];
    right := [];
    result := [];

    middle := #m div 2;
    for x in m(1..middle) loop
         left with:= x;
    end loop;
    for x in m(middle+1..) loop
         right with:= x;
    end loop;

    left := merge_sort1(left);
    right := merge_sort1(right);

    if left(#left) > right(1) then
         result := merge1(left, right);
    else
         result := left + right;
    end if;

    return result;

end procedure;

procedure merge1(left,right);
    result := [];
    while #left > 0 and #right > 0 loop
        if left(1) <= right(1) then
            result with:= left(1);
            left := left(2..#left);
        else
            result with:= right(1);
            right := right(2..#right);
        end if;
    end loop;

    if #left > 0 then
        result +:= left;
    else  
        result +:= right;
    end if;

    return result;

end procedure;
