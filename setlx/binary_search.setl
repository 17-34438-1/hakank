#!/usr/bin/env setl
-- 
-- Binary search in SETL
--
-- See http://en.wikipedia.org/wiki/Binary_search
--
-- From http://rosettacode.org/wiki/Binary_search
-- """
-- Given the starting point of a range, the ending point of a range, and the 
-- "secret value", implement a binary search through a sorted integer array 
-- for a certain number. Implementations can be recursive or iterative 
-- (both if you can). Print out whether or not the number was in the array 
-- afterwards. If it was, print the index also. The algorithms are as such 
-- (from the wikipedia): 
-- """
--
-- This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
-- Also see my SETL page: http://www.hakank.org/setl/
--


print("Iterative");
A:=[2, 4, 6, 8, 9];
print(A);
test(A, 2);
test(A, 1);
test(A, 8);
test(A, 10);
test(A, 9);
test(A, 5);

A:=[2, 1, 4, 6, 8, 9];
test(A,1);

print();
print("Recursive");
A2:=[2, 4, 6, 8, 9];
print(A2);
test_rec(A2, 2);
test_rec(A2, 1);
test_rec(A2, 8);
test_rec(A2, 10);
test_rec(A2, 9);
test_rec(A2, 5);

test_rec(A2, 1);


-- test iterative
proc test(A, value);
  p := binary_search(A, value);
  nprint("value:", value, " position:",p, " ");
  print(case  
         when p = -1 => " Array is not sorted!"
         when p = om => " Could not find the value " + value 
         otherwise => " Value " + value + " is at position " + p
        end case);
end proc;

-- test recursive
proc test_rec(A, value);
  p := binary_search_rec(A, value, 1, #A);
  nprint("value:", value, " position:",p, " ");
  print(case  
         when p = -1 => " Array is not sorted!"
         when p = om => " Could not find the value " + value 
         otherwise => " Value " + value + " is at position " + p
        end case);
end proc;


--
-- iterative version
--
proc binary_search(A, value);
  -- we want a sorted array
  if not check_sorted(A) then
    return -1;
  end if;

  low := 1;
  high := #A;
  while low <= high loop
     mid := (low + high) div 2;
     if A(mid) > value then
        high := mid - 1;
     elseif A(mid) < value then
       low := mid + 1;
     else
       return mid;
     end if;
  end loop;

  return om;

end proc;


--
-- recursive version
--
proc binary_search_Rec(A, value, low, high);
      if high < low then 
          return om;
      end if;

      mid := (low + high) div 2;
      if A(mid) > value then
          return binary_search_rec(A, value, low, mid-1);
      elseif A(mid) < value then
          return binary_search_rec(A, value, mid+1, high);
      else
          return mid;
      end if;
end proc;

--
-- check is A is sorted
-- 
proc check_sorted(A);
  return forall i in [2..#A] | A(i-1) <= A(i); 
end proc;
