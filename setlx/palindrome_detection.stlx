// 
// Palindrome detection in SetlX
//
// http://rosettacode.org/wiki/Palindrome_detection
// """
// Write at least one function/method (or whatever it is called in 
// your preferred language) to check if a sequence of characters (or bytes) 
// is a palindrome or not. The function must return a boolean value 
// (or something that can be used as boolean value, like an integer). 
// """

// This SetlX program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//


is_palindrome := procedure(s) {
   s2 := satl(s);
   return s2 == reverse(s2);
};


// Recursive version
is_palindrome_rec := procedure(s) {
   return is_palindrome_rec1(satl(s));
};

is_palindrome_rec1 := procedure(s) {
   n := #s;
   return n < 2 || (s[1] == s[n] && is_palindrome_rec1(s[2..n-1]));
};

// remove all characters not in pattern p from string s
strip := procedure(s, p) {
  s2 := "";
  for (c in s) {
    if (c in p) {
      s2 += c;
    }
  }

  return s2;
};

// strip and to lower
satl := procedure(s) {
  return strip(toLowerCase(s), "abcdefghijklmnopqrstuvwxyz");
};


strings := ["In girum imus nocte et consumimur igni", 
            "this is a non palindrome string",
            "anna ABcdcBA anna",
            "anna ABcdcBA annax",
            "A man, a plan, a canoe, pasta, heros, rajahs" +
              "a coloratura, maps, snipe, percale, macaroni, " +
              "a gag, a banana bag, a tan, a tag, " + 
              "a banana bag again (or a camel), a crepe, pins, " + 
              "Spam, a rut, a Rolo, cash, a jar, sore hats, " + 
              "a peon, a canal - Panama!"
           ];

for (s in strings) {
  print(s, ": ", is_palindrome(s));
}

print("\nRecursive:");
for (s in strings) {
  print(s, ": ", is_palindrome_rec(s));
}

print("\nTesting a long string...");
w := "";
alpha:="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
r := [1..#alpha];
s:=+/[alpha[rnd(r)] : i in [1..100000]];
print(is_palindrome(s));
print(is_palindrome_rec(s));
