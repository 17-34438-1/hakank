-- 
-- Read test in in SETL
--
-- This is my standard a.*b.*c ... test when learning a new
-- programming language.
--
-- The goal is to show all words from a dictionary which matches
-- the regular expressions (for n = 4):
--   a.*b.*c.*d, b*.c.*d.*e, c.*d.*e.*f etc.
--   
-- This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
-- Also see my SETL page: http://www.hakank.org/setl/
--
dict_file := command_line(1) ? '/usr/dict/words';
n := command_line(2) ? 5;
lang := command_line(3) ? "eng";

print("dict_file:", dict_file);
print("n:", n);
print("lang:", lang);

num_chars := 26;
chars := [char(i) : i in [97..97+num_chars-1]];

-- don't work: no national chars are supported
-- if lang = "swe" then
--   num_chars := 29;
--   for  c in [char(i) : i in [165, 164,182] ] loop
--     chars with:= c;
--   end loop;
-- end if;

print("chars:", chars);
char_len := #chars;
print("char_len:", char_len);

patterns := [];
for i in [1..char_len-n+1] loop
  pattern := join(chars(i..i+n-1), ".*");
  patterns with := pattern;
end loop;

print("Reading ", dict_file);
p := open(dict_file, 'r');
words := [];
while not eof(p) loop
   geta(p, w);
   if w /= om and #w > 2 then 
      w := to_lower(w);
      words with:= w;
   end if;
end loop;

print("Finished reading file.");
print("Total number of words:", #words);

matched_words := [];
for pattern in patterns loop 
   print("\nTesting pattern:", pattern);
   for w in words loop
     w := to_lower(w);
     -- m := mark(w, "a.*b.*c.*d.*e"); -- not so good
     -- m := w("a.*b.*c.*d.*e"); -- This is nice.
     m := w(pattern);
     if m /= om then 
       -- print(w);     
       matched_words with:= w;
     end if;
   end loop;
   print(#matched_words, matched_words);
   matched_words := [];

end loop;

