// convert a decimal to binary
dec_to_base := procedure(n, base) {
  res := [];
  while (n > 0) {
    r := n % base;
    n := n \ base;
    res += [r];     
  }  
  return reverse(res);
};

// number of divisors
num_divisors := procedure(n) {
   return */[ e+1 : [p,e] in collect(prime_factors(n))];
};


// Returns a map with the number of occurrences of each number
// in the tuple a.
collect := procedure(a) {

  d := { i : i in a};
  c := { [i, #[j : j in [1..#a] | a[j] == i ]] :  i in d}; 

  return c; 
};


even := procedure(n) {
  return n % 2 == 0;
};

odd := procedure(n) {
  return n % 2 == 1;
};


// Prime factors of n
prime_factors := procedure(n) {
    facts := [];
    while (even(n)) { facts += [2]; n := n / 2; }
    while (exists (k in [3,5..round(sqrt(n))] | n % k == 0)) {
       facts += [k]; 
       n := n \ k;
    }
   facts += [n];

   return facts;

};

// divisors of n
divisors := procedure(n) {
  return [d : d in [1..1+n\2] | n % d == 0];
};

// Sum divisors of n
sum_divisors := procedure(n) {
    s := 0;
    for (i in [1..round(n/2)]) {
        if (n % i == 0) {
            s += i;
        }
    }
    return(s);
};


// Sum divisors, faster version
sum_divisors2 := procedure(n) {
    d := floor(sqrt(n));
    sum := 1;
    for (i in [2..d]) {
        if (n % i == 0) {
            sum := sum+i;
            if (i != n \ i) {
                sum += n \ i;
            }
        }
    }

    return sum;
};


collatz1 := procedure(n) {
  if (n % 2 == 0) {
      return n \ 2;
  } else {
      return 3*n + 1;
  }
};

// Complete Collatz sequence from n ... 4,2,1
collatz := procedure(n) {
  res := [n];
  while (n != 1) {
     n := collatz1(n);
     res += [n];
  }
  return res;
};

// Generate primes from 1..n
gen_primes := procedure(n) {
  primes := {2};
  p := 3;
  while (p <= n) {
    if (is_prime(p)) {
       primes += [p];
    } 
    p += 2;
  }

  return primes;
};


// is n a prime?
is_prime := procedure(n) {
    if (n == 2 || n == 3) {
        return(true);
    }
    if (n % 2 == 0) {
        return(false);
    }
    for (i in [3,5..round(sqrt(n))+1]) {
        if (n % i == 0) {
            return(false);
        }
    }
    return(true);
};

// Check for primality, using a hash table (map)
is_prime_hash := procedure(n, prime_hash) {

    if (prime_hash[n] != om) {
       return prime_hash[n];
    }

    if (n == 2 || n == 3) {
        prime_hash[n] := true;
        return(true);
    }
    if (n % 2 == 0) {
        prime_hash[n] := false;
        return(false);
    }
    for (i in [3,5..round(sqrt(n))+1]) {
        if (n % i == 0) {
            prime_hash[n] := false;
            return(false);
        }
    }
    prime_hash[n] := true;
    return(true);
};

// Note: SetlX has a built-in function for this: n!
factorial := procedure(n) {
  if (n == 0) {
     return 1;
  } else {
     return */[ i : i in [1..n]];
  }
};

// is the numbers in the array pandigital,
// i.e. contains just the digits 1..9 and
// exactly once
is_pandigital := procedure(ll) {

   if (#ll == 9 && "0" notin ll) {
      ss := str(ll);
      hash := {int(ss[i]) : i in [1..#ss]};
      if (#hash == 9) {
         return true;
      }
   }

   return(false);
};

// Prime factors. Elegant but much slower
prime_factors2 := procedure(n) {
  r := [f : f in [2..round(sqrt(n))] | n % f == 0 && (forall (m in [2..round(sqrt(f))] | f % m > 0)) ];
  return(r);
};

triangle_number := procedure (n) {
    return((n*(n+1))/2);
};

// Check for Pythagorean triplet
is_pyth := procedure(a,b,c) {
  return a**2+b**2 == c**2;
};



lcm := procedure(a,b) {
  return a*b \ gcd(a, b);
};

gcd := procedure(u, v) {
  if (v == 0) { return abs(u); } else { return gcd(v, u % v); }
};

// is number n a palindrom
is_palindromic := procedure(n) {
  s := str(n);
  return s == +/reverse(s);
};

// convert a number to an array with digits
num2a := procedure(n) {
  s := str(n);
  return [int(s[i]) : i in [1..#s]];
};
