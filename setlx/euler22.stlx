// 
// Project Euler problem 22 in SETL
// 
// Problem 22
//
// """
// Using names.txt (right click and 'Save Link/Target As...'), a 46K 
// text file containing over five-thousand first names, begin by sorting 
// it into alphabetical order. Then working out the alphabetical value 
// for each name, multiply this value by its alphabetical position in the 
// list to obtain a name score.
//
// For example, when the list is sorted into alphabetical order, COLIN, 
// which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in 
// the list. So, COLIN would obtain a score of 938 53 = 49714.
//
// What is the total of all the name scores in the file?")
// """
//
// This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

// strip the string s using chars c
strip_chars := procedure(s,c) {
   s2 := "";
   for (p in [1..#s]) {
     if (s[p] notin c) {
        s2 += s[p];
     }
   }
   return s2;
};

// split the string s using the chars c
split_on_char := procedure(s, c) {
   s2 := [];
   last_pos := 1;
   for (pos in [1..#s]) {
      if (s[pos] in c) {
         v := s[last_pos..pos-1];
         s2 += [v];
         last_pos := pos+1;
      }     
   }
   last := s[last_pos..#s];
   s2 += [last];
   return s2;
};

// convert a string to position code
// a=1, b=2, etc
// (abs(i) gives the ASCII code)
to_code := procedure(s) {
   return [abs(s[i])-64 : i in [1..#s]];
};


problem22 := procedure() {
   print("Problem 22: ");
   names_str := readFile("euler_names.txt")[1]; 

   // Split the names into separate names
   names := split(names_str, ",");
   names_code := [];
   for (n in names) {
     // remove the "'s
     name_code := to_code(strip_chars(n,"\""));
     names_code += [name_code];
   }

   names_code := sort(names_code);
   ix := 1;
   total := 0;
   for (n in names_code) {
     total += ix * +/n;
     ix += 1;
   }
   print(total);

};



//
// quicksort
//
qsort := procedure(a) {
  if (#a > 1) {
    pivot := a[#a \ 2 + 1];
    a := qsort([x in a | compare(x,pivot) < 0]) +
               [x in a | compare(x,pivot) ==  0]  +
         qsort([x in a | compare(x,pivot) > 0]);
  }

  return a;
};


problem22();
