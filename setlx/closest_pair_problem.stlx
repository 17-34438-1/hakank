// 
// Closest-pair problem in SetlX.
//
// See 
//  * http://en.wikipedia.org/wiki/Closest_pair_problem
//  * http://rosettacode.org/wiki/Closest_pair_problem
//
// This SetlX program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//


//
// the brute force variant
//
brute_force_closest_pair := procedure(p) {
  n := #p;
  if (n < 2) {
    return inf;
  } else {
    minDistance := dist(p[1],p[2]);
    minPoints := [p[1], p[2]];
    for (i in [1..n-1]) {
      for (j in [i+1..n]) {
        d2 := dist(p[i],p[j]);
        if (d2 < minDistance) {
          minDistance := d2;
          minPoints := [p[i], p[j]];
        }
      }
    }
    return [minDistance, minPoints];
  }
};


dist := procedure (p1,p2) {
   return sqrt(  (p1[1]-p2[1])**2 + (p1[2]-p2[2])**2);
};



p :=
[
[0.654682, 0.925557],
[0.409382, 0.619391],
[0.891663, 0.888594],
[0.716629,   0.9962],
[0.477721, 0.946355],
[0.925092,  0.81822],
[0.624291, 0.142924],
[0.211332, 0.221507],
[0.293786, 0.691701],
[0.839186,  0.72826]];

c := brute_force_closest_pair(p);
print(c);
