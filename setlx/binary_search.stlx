// 
// Binary search in SETL
//
// See http://en.wikipedia.org/wiki/Binary_search
//
// From http://rosettacode.org/wiki/Binary_search
// """
// Given the starting point of a range, the ending point of a range, and the 
// "secret value", implement a binary search through a sorted integer array 
// for a certain number. Implementations can be recursive or iterative 
// (both if you can). Print out whether or not the number was in the array 
// afterwards. If it was, print the index also. The algorithms are as such 
// (from the wikipedia): 
// """
//
// This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

// test iterative
test := procedure(a, value) {
  p := binary_search(a, value);
  print("value:", value, " position:",p, " ");
  match(p) {
  case -1: print("\tarray is not sorted!");
  case om: print("\tCould not find the value " + value);
  default: print("\tValue " + value + " is at position " + p);
  }
};

// test recursive
test_rec := procedure(a, value) {
  p := binary_search_rec(a, value, 1, #a);
  print("value:", value, " position:",p, " ");
  match(p) {
  case -1: print("\tarray is not sorted!");
  case om: print("\tCould not find the value " + value);
  default: print("\tValue " + value + " is at position " + p);
  }
};

//
// iterative version
//
binary_search := procedure(a, value) {
  // we want a sorted array
  if (!check_sorted(a)) {
    return -1;
  }

  low := 1;
  high := #a;
  while (low <= high) {
     mid := (low + high) \ 2;
    if (a[mid] > value) {
      high := mid - 1;
    } else if (a[mid] < value) {
       low := mid + 1;
    } else {
      return mid;
    }
  }

  return om;

};


//
// recursive version
//
binary_search_rec := procedure(a, value, low, high) {
  if (high < low) {
    return om;
  }

  mid := (low + high) \ 2;
  if (a[mid] > value) {
    return binary_search_rec(a, value, low, mid-1);
  } else if (a[mid] < value) {
    return binary_search_rec(a, value, mid+1, high);
  } else {
    return mid;
  }
};

//
// check is a is sorted
// 
check_sorted := procedure(a) {
  return forall(i in [2..#a] | a[i-1] <= a[i]); 
};


print("Iterative");
a:=[2, 4, 6, 8, 9];
print(a);
test(a, 2);
test(a, 1);
test(a, 8);
test(a, 10);
test(a, 9);
test(a, 5);

a:=[2, 1, 4, 6, 8, 9];
test(a,1);

print();
print("Recursive");
a2:=[2, 4, 6, 8, 9];
print(a2);
test_rec(a2, 2);
test_rec(a2, 1);
test_rec(a2, 8);
test_rec(a2, 10);
test_rec(a2, 9);
test_rec(a2, 5);

test_rec(a2, 1);


