// 
// Read test in in SetlX
//
// This is my standard a.*b.*c ... test when learning a new
// programming language.
//
// The goal is to show all words from a dictionary which matches
// the regular expressions (for n = 4):
//   a.*b.*c.*d, b*.c.*d.*e, c.*d.*e.*f etc.
//   
// This SetlX program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

// SetlX don't have any pattern matching or regular expression
// so we must roll our own.
// 
// match word against the regexp
//   .*p[1].*p[2]...p[#p].*
//
// 16.5s
match_word := procedure(word, pattern) {
  j := 1;
  for (i in [1..#pattern]) {
    if (exists(k in [1..#word] | word[k] == pattern[i] && k >= j)) {
      j := k;
    } else {
       return false;
    }
  }
  return true;
};

// variant: a little bit faster 15.7s
match_word2 := procedure(word, pattern) {
  p := 1;
  w := 1;
  found := 0;
  while (w <= #word && p <= #pattern) {
    while (w < #word && word[w] != pattern[p]) {
      w += 1;
    }
    if (word[w] == pattern[p]) {
      found += 1;
      p += 1;
    }
    w += 1;
  }
  return found == #pattern;
};

// print(match_word2("abc",["a","b","c"])); // true
// print(match_word2("dasdbsadasdsadcadsadsad",["a","b","c"])); // true
// print(match_word2("dasda",["a","b","c"])); // false

dict_file := "/usr/share/dict/words";
n := 5;

if (#params > 0) {
  dict_file := params[1];
}

if (#params > 1) {
  n := int(params[2]);
}

print("dict_file:", dict_file);
print("n:", n);

num_chars := 26;
chars := [char(i) : i in [97..97+num_chars-1]];

// for Swedish words
// num_chars := 29;
// chars += ["å","ä","ö"];

char_len := #chars;
print("char_len:", char_len);

// create the patterns
patterns := [ chars[i..i+n-1] : i in [1..char_len-n+1]]; 

// read the dict file
words := [toLowerCase(word) :  word in readFile(dict_file)];

print("Finished reading file.");
print("Total number of words:", #words);

for (pattern in patterns) {
  print("\nTesting pattern:", pattern);
  matched_words := [word : word in words | match_word2(word,pattern)];
  print(#matched_words, ": ", matched_words);

   
}

