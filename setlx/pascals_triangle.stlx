// 
// Pascal's triangle in SETL
//
// From Rosetta code:
// ""
// Pascal's triangle is an interesting math concept. Its first few rows look like this:
//
//    1
//   1 1
//  1 2 1
// 1 3 3 1
//
// where each element of each row is either 1 or the sum of the two elements right 
// above it. For example, the next row would be 1 (since the first element of each 
// row doesn't have two elements above it), 4 (1 + 3), 6 (3 + 3), 4 (3 + 1), and 1 
// (since the last element of each row doesn't have two elements above it). Each 
// row n (starting with row 0 at the top) shows the coefficients of the binomial 
// expansion of (x + y)n.
//
// Write a function that prints out the first n rows of the triangle (with f(1) 
// yielding the row consisting of only the element 1). This can be done either by 
// summing elements from the previous rows or using a binary coefficient or combination 
// function. Behavior for n <= 0 does not need to be uniform, but should be noted. 
// ""
// This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//
lpad := procedure(ss, n) {
  if (#ss >= n) {
    return ss;
  }
  return " "* (n-#ss) + ss;
};


rpad := procedure(ss, n) {
  if (#ss >= n) {
    return ss;
  }
  return ss + " "* (n-#ss);
};


print_pascal := procedure(n) {
  ll := pascal(n);
  max_num_len := #str(max(ll[n+1]));
  for (l in ll) {
    print(+/[rpad(str(i),max_num_len+1) : i in l]);
  }
};

pascal := procedure(n) {
  return [[binom(i,j) : j in [0..i]] : i in [0..n] ];  
};

binom := procedure(n,k) {
  return 1*/[(n-i+1) / i : i in [1..k]];
};


n := int(args[1]);
print_pascal(n);