#!/usr/bin/env setl
-- 
-- Longest common subsequence in SETL.
--
-- From http://rosettacode.org/wiki/Longest_common_subsequence
-- """
-- The longest common subsequence (or LCS) of groups A and B is the 
-- longest group of elements from A and B that are common between the 
-- two groups and in the same order in each group. For example, the 
-- sequences "1234" and "1224533324" have an LCS of "1234":
--
-- 1234
-- 1224533324
--
-- For a string example, consider the sequences "thisisatest" and 
-- "testing123testing". An LCS would be "tsitest":
--
-- thisisatest
-- testing123testing
--
-- In this puzzle, your code only needs to deal with strings. Write a 
-- function which returns an LCS of two strings (case-sensitive). 
-- You don't need to show multiple LCS's. 
-- """
-- 
-- Also, see http://en.wikipedia.org/wiki/Longest_common_subsequence
--
-- This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
-- Also see my SETL page: http://www.hakank.org/setl/
--

-- X := "XMJYAUZ";
-- Y := "MZJAWXU";

-- X := "1234";
-- Y := "1224533324";

X:="thisisatest";
Y:="testing123testing";

time0:=time();
[s, C] := LCS(X,Y);
print("LCS1:", s);
print("It took", (time()-time0)/1000, "seconds");
-- for i in [1..#X+1] loop
--   for j in [1..#Y+1] loop
--      nprint(C(i)(j), " ");
--   end loop;
--   print();
-- end loop;

time0:=time();
print("LCS2:", LCS2(X,Y));
print("It took", (time()-time0)/1000, "seconds");


procedure LCS(X,Y);
  [C, llen] := LCSLength(X,Y);
  return [backTrace(C,X,Y,#X+1,#Y+1), C];
end procedure;

-- From 
-- http://en.wikipedia.org/wiki/Longest_common_subsequence
-- with added trickery for a 1-based language.
--
procedure  LCSLength(X, Y);
    m := #X; n := #Y;
    C := (m+1) * [ (n+1) * [0]];
    for i in [2..m+1] loop
        for j in [2..n+1] loop
            if X(i-1) = Y(j-1) then
                C(i)(j) := C(i-1)(j-1) + 1;
            else
                C(i)(j) := C(i)(j-1) max C(i-1)(j);
           end if;
        end loop;
    end loop;
    return [C, C(m+1)(n+1)];
end procedure;


procedure backTrace(C, X, Y, i, j);
    if i = 1 or j = 1 then
        return "";
    elseif X(i-1) = Y(j-1) then
        return backTrace(C, X, Y, i-1, j-1) + X(i-1);
    else
        if C(i)(j-1) > C(i-1)(j) then
            return backTrace(C, X, Y, i, j-1);
        else
            return backTrace(C, X, Y, i-1, j);
        end if;
    end if;
end procedure;


-- From the ADA solution
--
-- Very slow! The "thisisatest" problem takes about 7 seconds.
--
procedure LCS2(A,B);
  if A = "" or B = "" then return ""; end if;
  if A(#A) = B(#B) then
      return LCS2(A(1..#A-1), B(1..#B-1)) + A(#A);
  else 
     X := LCS2(A, B(1..#B-1));
     Y := LCS2(A(1..#A-1), B);
     if #X > #Y then 
        return X;
     else 
        return Y;
     end if;
  end if; 
end procedure;
