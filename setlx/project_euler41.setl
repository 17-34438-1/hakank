#!/usr/bin/env setl
-- 
-- Project Euler problem 41 in SETL
--
-- """
-- We shall say that an n-digit number is pandigital if it makes use of all 
-- the digits 1 to n exactly once. For example, 2143 is a 4-digit pandigital 
-- and is also prime.
--
-- What is the largest n-digit pandigital prime that exists?
-- """
--
-- This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
-- Also see my SETL page: http://www.hakank.org/setl/
--

var prime_hash := {};

problem41();


proc is_prime(n);

    pp := prime_hash(n);
    if pp /= om then
        return pp;
    end if;

    if n = 1 then
       prime_hash(n) := false;
      return false;
    end if;

    if n = 2 or n = 3 then
        prime_hash(n) := true;
        return(true);
    end if;

    if n mod 2 = 0 then
        prime_hash(n) := false;
        return(false);
    end if;

    for i in [3, 5..round(sqrt(n))+1] loop
        if n mod i = 0 then
            prime_hash(n) := false;
            return(false);
        end if;
    end loop;

    prime_hash(n) := true;
    return(true);
end proc;



proc problem41;
    -- Simplification (from on2e of the answers)
    -- n=9 is not possible since 1+2+3+4+5+6+7+8+9=45 is divisible by 3
    -- n=8 is not possible since 1+2+3+4+5+6+7+8=36 is divisible by 3
    n := 7;
    m := 0;
    while m = 0 and n >= 4 loop
        p := [];
        for i in [n,n-1..1] loop
            p := p + [i];
        end for;
        -- note: it's reversed sorted so we stop at first prime
        perms := perms2(p);
        for p in perms loop
          v := val(+/[str(i) : i in p]);
          if is_prime(v) then
              m := v; -- found it
              quit;
          end if;
          
        end loop;
        n -:= 1;

    end loop;

    print(m);

end proc;

-- Permutation (exhaustive)
procedure perms2(S);
  if S = [] then
    return [[]];
  else 
    return [ [a]+b : a in S, b in perms2([ p in S | p /= a]) ];
  end if;
end perms2;

