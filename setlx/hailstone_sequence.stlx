// 
// Hailstone sequence (Collatz sequence) in SetlX
//
// From http://rosettacode.org/wiki/Hailstone_sequence
// """
// The Hailstone sequence of numbers can be generated from a starting 
// positive integer, n by:
//
//  * If n is 1 then the sequence ends.
//  * If n is even then the next n of the sequence = n/2
//  * If n is odd then the next n of the sequence = (3 * n) + 1 
//
// The (unproven), Collatz conjecture is that the hailstone sequence for 
// any starting number always terminates.
//
// Task Description:
//
//  1. Create a routine to generate the hailstone sequence for a number.
//  2. Use the routine to show that the hailstone sequence for the number 
//     27 has 112 elements starting with 27, 82, 41, 124 and ending with 
//     8, 4, 2, 1
//  3. Show the number less than 100,000 which has the longest hailstone 
//     sequence together with that sequences length. (But don't show the 
//     actual sequence)! 
// """
//  
// Also see:
//   http://en.wikipedia.org/wiki/Collatz_conjecture
//
// This SetlX program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//


//
// Calculate the longest sequence for n < limit
// using a cache with the lengths of already known 
// sequences.
//
// Takes about 3 seconds.
//
get_longest_seq_cached := procedure(limit) {

  lens := {};
  max_len := 0;
  max_n := 1;

  for (n in [1..limit-1]) {
    m := n;
    c_len := 1;
    while (m > 1) {
      if (lens[m] != om) {
        // use the cached result
        c_len += lens[m] - 1;
        m := 1;
      } else {
        // else calculate the value
        m := hailstone(m);
        // It's a little bit faster to calculate the values.
        // if (m % 2 == 0) {
        //   m := m \ 2;
        // } else {
        //   m := 3*m + 1;
        // }

        c_len += 1;
      }
    }
    lens[n] := c_len;

    if (c_len > max_len) {
      max_len := c_len;
      max_n := n;
    }
  }

  return [max_n, max_len];

};

// using the built-in cache
get_longest_seq_cached2 := procedure(limit) {

  lens := {};
  max_len := 0;
  max_n := 1;

  for (n in [1..limit-1]) {
    m := n;
    c_len := 1;
    while (m > 1) {
      m := hailstone2(m);
      c_len += 1;
    }

    if (c_len > max_len) {
      max_len := c_len;
      max_n := n;
    }
  }

  return [max_n, max_len];

};


//
// Calculate the longest sequence for n < limit
// Brute force approach.
//
// Takes about 12 seconds.
//
get_longest_seq := procedure(limit) {
  max_len := 0;
  max_n := 0;
  for (n in [1..100000-1]) {
     l := #hailstone_seq(n);
    if (l > max_len) {
      max_n := n;
      max_len := l;
    }
  }

  return [max_n, max_len];

};


//
// get the Hailstone sequence for n
//
hailstone_seq := procedure(n) {
  h := [n];
  max_n := 1;
  while (n > 1) {
     n := hailstone2(n);
     h += [n];
  }

  return h;
};


//
// Hailstone number
//
hailstone2 := cachedProcedure(n) {
  if (n == 1) {
    return om;
  }
  if (n % 2 == 0) {
      return n \ 2;
  } else {
      return 3*n + 1;
  }
};

hailstone := procedure(n) {
  switch {
  case n == 1    : return om;
  case n % 2 == 0: return n \ 2;
  default        : return 3*n + 1;
  }
};


h27 := hailstone_seq(27);
// print(h27);
print("length:", #h27);
print(h27);
print(h27[1..4], " ..", h27[#h27-3..#h27]);

// calculate the longest sequence for n < 100000
time0 := now();
// m := get_longest_seq_cached(100000); // 3 seconds
m := get_longest_seq(100000); // 5 seconds with cachedProcedure
time1 := now();
print("max_n: $m[1]$ max_len: $m[2]$");
print("It took $(time1-time0)/1000.0$ seconds");

// print(hailstone_seq(m(1)));
