#!/usr/bin/env setl
-- 
-- Soundex in SETL
--
-- See for example:
--   http://en.wikipedia.org/wiki/soundex
--   http://rosettacode.org/wiki/Soundex
-- 
--
-- This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
-- Also see my SETL page: http://www.hakank.org/setl/
--

-- From J's test at http://rosettacode.org/wiki/Soundex
-- And O'Hara from the Forth test
names := split("Lloyd Woolcock Donnell Baragwanath Williams Ashcroft Euler Ellery Gauss Ghosh Hilbert Heilbronn Knuth Kant Ladd Lukasiewicz Lissajous O'Hara", " ");
soundexNames := split("L300 W422 D540 B625 W452 A226 E460 E460 G200 G200 H416 H416 K530 K530 L300 L222 L222 O600", " ");

i := 1;
all_ok := true;
for n in names loop
    s := soundex(n, 4);
    t := soundexNames(i);
    check := s = t;
    nprint(n,":\t",s);
    if check then
      print("\tOK");
    else 
      all_ok := false;
      print("\tNOT OK should be ", t);
    end if;
    i +:= 1;
end loop;

if all_ok then 
  print("ALL OK!");
end if;


-- This was inspired by the Python code from  
--   http://code.activestate.com/recipes/52213/
-- with the following comment:
-- """
-- soundex module conforming to Knuth's algorithm
-- implementation 2000-12-24 by Gregory Jorgensen
-- public domain
-- """
proc soundex(name, llen);
    if name = "" or name = om then
      return "";
    end if; 

    -- digits holds the soundex values for the alphabet
    digits := "01230120022455012623010202";
    sndx := "";
    fc   := "";

    -- translate alpha chars in name to soundex digits
    for c in to_upper(name) loop
        if is_alpha(c) then
            if fc = "" then
               fc := c;   -- remember first letter
            end if;
            d := digits(ichar(c)-ichar('A')+1);

            -- duplicate consecutive soundex digits are skipped
            if not sndx /= "" or (d /= sndx(#sndx)) then
                sndx +:= d;
            end if;
        end if;
    end loop;

    -- replace first digit with first alpha character
    sndx := fc + (sndx(2..));

    -- remove all 0s from the soundex code
    gsub(sndx,"0","");

    -- return soundex code padded to len characters
    if llen > #sndx then
       sndx := sndx + (llen - #sndx) * "0";
    end if;
    return sndx(1..llen);

end proc;


proc is_alpha(c);
  z:=c("[a-z0-9A-Z]");
  return z /= om;
end proc;
