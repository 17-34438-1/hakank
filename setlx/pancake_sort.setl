#!/usr/bin/env setl
-- 
-- Pancake sort in SETL.
-- 
-- See 
--  * http://en.wikipedia.org/wiki/Pancake_sorting
--  * http://rosettacode.org/wiki/Sorting_algorithms/Pancake_sort
--  * http://rosettacode.org/wiki/Number_reversal_game
-- 
-- This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
-- Also see my SETL page: http://www.hakank.org/setl/
--

nums := [7,6,5,9,8,4,3,1,2,0];
print(nums);
pancake_sort(nums);
print(nums);

setrandom(0);
time0 := time();
lst:=[random 1000 : i in [1..1000]];
pancake_sort(lst);
print("It took", (time()-time0)/1000,"seconds to sort", #lst, "numbers");


--
-- pancake sort (inline)
--
procedure pancake_sort(rw nums);
  for i in [#nums,#nums-1..1] loop
     -- find the index of the largest element not yet sorted

     -- nice but slower
     -- [this_max, max_idx] := find_max2(nums(1..i));

     -- this variant is sligtly faster
     [this_max, max_idx] := find_max(nums(1..i));

     if max_idx = i then
       continue; -- element already in place
     end if;

     -- flip this max element to index 1
     if max_idx > 1 then
       nums(1..max_idx) := rev(nums(1..max_idx));
     end if;

     -- then flip the max element to its place
     nums(1..i) := rev(nums(1..i));

  end loop;

end procedure;

--
-- reverse a tuple
--
procedure rev(a);
  return [a(i) : i in [#a,#a-1..1]];
end procedure;

--
-- find the (first) index of the max value 
-- in a tuple.
-- Returns [max_value, index]
procedure find_max(a);
  max_idx := 1;
  this_max := a(1);
  for j in [2..#a] loop
    if a(j) > this_max then
      this_max := a(j);
      max_idx := j;
    end if;
  end loop;
  return [this_max, max_idx];
end procedure;


-- This variant is somewhat slower (but nicer) since it 
-- first calculate the max value then loop again 
-- to find the index.
-- Returns [max, index]
procedure find_max2(a);
   m := max/a;
   return [m, [i : i in [1..#a] | a(i) = m](1)];
end procedure;


