// 
// Sorting a map in SETL.
//
// Some different methods of sorting a map.
//
// This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//


//
// count the occurrences of each items in a.
//
collect := procedure(a) {
  c := {};
  for (i in a) {
    if (c[i] == om) {
      c[i] := 1;
    } else {
      c[i] += 1;
    }
  }
  return c; 
};

as_map := procedure(a) {
  return {i: i in a};
};

as_list := procedure(a) {
  return [i: i in a];
};

// sort map on domain (keys)
sort_map := procedure(m) {
  return qsort_c(as_list(m), 1);
  // Alternative solution
  // s := qsort([i : i in domain(m)]);
  // return [ [r,m[r]] : r in s];
};

// sort map on domain (keys), reverse
sort_map_reverse := procedure(m) {
  return reverse(sort_map(m));
};


// sort a map on range (values)
sort_on_range := procedure(m) {
  return qsort_c(as_list(m), 2);
  // This reverses the order of tuples in m
  // m2 := { [m[dd],dd] : dd in domain(m)}; 
  // return [ [r,m2[r]]  : r in qsort(domain(m2))];
};

// sort a map on range (values), reversed
sort_on_range_reverse := procedure(m) {
  return reverse(sort_on_range(m));
};


//
// quicksort
//
qsort := procedure(a) {
  if (#a > 1) {
    pivot := a[#a \ 2 + 1];
    a := qsort([x in a | compare(x, pivot)  < 0]) +
               [x in a | compare(x, pivot) == 0]     +
         qsort([x in a | compare(x, pivot)  > 0]);
  }

  return a;
};

//
// quicksort for maps,
// sort on a certain column: col 1..2
//
qsort_c := procedure(a, col) {
  if (#a > 1) {
    pivot := a[#a \ 2 + 1][col];
    a := qsort_c([x in a | compare(x[col],pivot)  < 0], col) +
                 [x in a | compare(x[col],pivot) == 0]  +
         qsort_c([x in a | compare(x[col],pivot)  > 0], col);
  }

  return a;
};



n := 100000;
a := [rnd([1..10]) : i in [1..n]];
// print(a);

// collect (creates a map with [number, occurrences of number])
m := collect(a);
print("collect: ", m);

print("domain(m): ",domain(m));
print("range(m): ",range(m));

res1 := sort_map(m); 
print("sort_map: ", res1);

res2 := sort_map_reverse(m); 
print("sort_map_reverse: ", res2);

res3 := sort_on_range(m);
print("sort_on_range: ",res3);

res4 := sort_on_range_reverse(m);
print("sort_on_range_reverse: ", res4);


