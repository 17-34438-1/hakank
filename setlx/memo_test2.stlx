// 
// Memo test in SetlX
// 
// Version 1.3 supports memoization.
// 
// This SetlX program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//


fib1 := procedure(n) {
  if (n in [0, 1]) {
    return n;
  }

  return fib1(n-1) + fib1(n-2);
};


fib2 := cachedProcedure(n) {
  if (n in [0, 1]) {
    return n;
  }

  return fib2(n-1) + fib2(n-2);
};


fibtest1 := procedure() {
  for(m in [1..3]) {
    n := m*10;
    t1 := now();
    f1 := fib1(n);
    print("fib1($n$) took $(now()-t1)/1000.0$s");
    t2 := now();
    f2 := fib2(n);
    print("fib2($n$)  took $(now()-t2)/1000.0$s");
    print();
  }
};

fibtest2 := procedure() {
  for(m in [1..10]) {
    n := m*10;
    t1 := now();
    f2 := fib2(n);
    print("fib2($n$)=$f2$  took $(now()-t1)/1000.0$s");
    print("cacheStats(fib2): $cacheStats(fib2)$");
    clearCache(fib2);
    print();
  }
};

fibtest3 := procedure(n) {
  return [fib2(i) : i in [1..n]];
};


fibtest1();
fibtest2();
print("cacheStats(fib2): $cacheStats(fib2)$");
clearCache(fib2);
fibtest3(1000);
print("cacheStats(fib2): $cacheStats(fib2)$");
