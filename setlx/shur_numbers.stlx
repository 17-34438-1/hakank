//
// (Simplified) Shur numbers in SetlX
//
// Inspired from the {log} example:
// http://www.math.unipr.it/~gianfr/SETLOG/SamplePrograms/Shur.slog
// """
// (Simplified) Shur numbers problem.
//  Find all subsets S of {1,...,N} such that, for each pair of
// (not necessarily distinct) numbers in S, their sum is not in S
// """
//
// This SetlX program was written by Hakan Kjellerstrand (hakank@bonetmail.com).
// See also my SETL page: http://www.hakank.org/setl/ .
// 

// compact version
shur := procedure(n) {
  return [s in pow({1..n}) | forall(x in s | forall(y in s | x+y notin s))];
};


// another version
shur2 := procedure(n) {
  ss := {1..n};
  res := {};
  for (s in pow(ss)) {
    if (forall(x in s | forall(y in s | x+y notin s))) {
      res += {s}; 
    }
  }
  return res;
};

n := 5; 
print("shur($n$)");
res := shur(n); 
print(res);
print("card: ", #res);

print("\nshur2($n$)");
res2 := shur2(n); 
print(res2);
print("card: ", #res2);
