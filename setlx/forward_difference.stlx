// 
// Forward difference in SetlX
//
// From http://rosettacode.org/wiki/Forward_difference
// """
// Provide code that produces a list of numbers which is the n-th order 
// forward difference, given a non-negative integer (specifying the order) 
// and a list of numbers. The first-order forward difference of a list of 
// numbers (A) is a new list (B) where Bn = An+1 - An. List B should have 
// one less element as a result. The second-order forward difference of 
// A will be the same as the first-order forward difference of B. That 
// new list will have two fewer elements than A and one less than B. 
// The goal of this task is to repeat this process up to the desired order. 
// """
//
// Also, see http://mathworld.wolfram.com/ForwardDifference.html
//
//
// This SetlX program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

//
// all forward differences
//
all_diffs := procedure(x) {
  d:=[];
  while (x != []) {
    d += [x];
    x := diff(x);
  }
  return d;
};

//
// The i'th forward difference list of x
//
diff_i := procedure(x,i) {
  j := 1;
  while (j <= i && x != []) {
    j += 1;
    x := diff(x);
  }
  return x;

};

//
// different list of x
//
diff := procedure (x) {
  return [ x[i]-x[i-1] : i in [2..#x] ];
};

// destructive variant (using rw parameter)
diff_rw := procedure (rw x) {
  x := [ x[i]-x[i-1] : i in [2..#x] ];
  return x;
};

all_diffs2 := procedure(x) {  
  // This don't work since SetlX requires a ":" part:
  // return [x] + [ diff_rw(x)  | x != [] ];

  // This works
  return [x] + [ diff_rw(x) : i in [1..#x-1]];
};

x := [90, 47, 58, 29, 22, 32, 55, 5, 55, 73];

print(all_diffs(x));
print(all_diffs2(x));

for (i in [1..#x-1]) {
  d:= diff_i(x, i);
  print("i:$i$ d: $d$ #d $#d$");
}
