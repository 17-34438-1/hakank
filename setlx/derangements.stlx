// 
// Derangements (Rosetta code) in SetlX
// 
// From http://rosettacode.org/wiki/Permutations/Derangements
// """
// Permutations/Derangements
// A derangement is a permutation of the order of distinct items in which 
// no item appears in its original place.
//
// For example, the only two derangements of the three items 
//   (0, 1, 2) are (1, 2, 0), and (2, 0, 1).
// 
// The number of derangements of n distinct items is known as the subfactorial of n, 
// sometimes written as !n. There are various ways to calculate !n.
//
// Task
//
// The task is to:
//
//  - Create a named function/method/subroutine/... to generate derangements of the integers 
//    0..n-1, (or 1..n if you prefer).
//  - Generate and show all the derangements of 4 integers using the above routine.
//  - Create a function that calculates the subfactorial of n, !n.
//  - Print and show a table of the counted number of derangements of n vs. the calculated 
//    !n for n from 0..9 inclusive. 
//
// As an optional stretch goal:
//
//   Calculate !20. 
// """
// 
// This SetlX program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

derangements := procedure(n) {
  return [p : p in [] + permutations({1..n}) | forall(i in [1..n] | p[i] != i)];
};

// Subfactorial: Counting the number of derangements.
// From http://en.wikipedia.org/wiki/Derangement#Counting_derangements
// 
// Nice with memoization
subfactorial := cachedProcedure(n) {
  match(n) {
    case 0: return 1;
    case 1: return 0;
    case 2: return 1;
    default: return (n-1)*(subfactorial(n-1)+subfactorial(n-2));
  }
};

// Approximated version
subfactorial2 := procedure(n) {
  if (n == 0) { return 1; }
  return 1.0*floor(n!/mathConst("e") + 1/2);
};


print(derangements(4));

for (n in [0..9]) {
  print("n:$n$  $#derangements(n)$ calculated: $subfactorial(n)$");
}

print("!20: $subfactorial(20)$");

print("subfactorial(0..30): $[subfactorial(n) : n in [0..30]]$");
print("subfactorial2(0..30) (approx): $[subfactorial2(n) : n in [0..30]]$");
print("!200: $subfactorial(200)$");