// 
// Look and say sequence in SETL.
// 
// From http://rosettacode.org/wiki/Look-and-say_sequence
// """
// Sequence Definition
//
// * Take a decimal number
// * Look at the number, visually grouping consecutive runs of the 
//   same digit.
// * Say the number, from left to right, group by group; as how 
//   many of that digit there are - followed by the digit grouped. 
//
// * This becomes the next number of the sequence. 
//
// The sequence is from John Conway, of Conway's Game of Life fame.
//
// An example:
//
//  * Starting with the number 1, you have one 1 which produces 11.
//  * Starting with 11, you have two 1's i.e. 21
//  * Starting with 21, you have one 2, then one 1 i.e. (12)(11) 
//    which becomes 1211
//  * Starting with 1211 you have one 1, one 2, then two 1's i.e. 
//    (11)(12)(21) which becomes 111221 
// """
//
// Also, see:
//   http://en.wikipedia.org/wiki/Look-and-say_sequence
//   http://www.research.att.com/~njas/sequences/A005150
//
// This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

//
// Runs of a string, direct approach
// Note: we change x along the way (rw x)
runs := procedure(rw x) {
  s := ""; 
  last := x[1]; 
  c := 1; 
  for (i in [2..#x]) {
    if (x[i] == last) {
       c += 1; 
    }  else {
      s += c + x[i-1]; 
      c := 1;  
      last := x[i]; 
    }
  }
  x := s + c + last;
  return x;
};

// SNOBOL inspired function: 
// breaks off and yields as many as possible initial 
// characters in s that are in p
//        
// 
many := procedure(rw s, p) {
  if (#s == 0 || s[1] notin p) {
    return;
  }

  i := 1;
  t := "";
  while (i <= #s && s[i] in p) {
    t += s[i];
    i += 1;
  } 
  s := s[i..#s];
  return t;
};


//
// Runs of a string using many (see below).
// Otherwise, it's the same idea as in runs2()
//
runs2 := procedure(rw x) {
  s := "";
  while (x != "") {
    z := many(x,x[1]);
    if (#z > 0) {
      s += #z + z[1];
    }
  }
  x := s;
  return x;
};



n:=11;
s1 := ["1"];
print(s1 + [runs(s1): i in [1..n]] );   // direct approach
s2 := "1";
print([s2] + [runs2(s2): i in [1..n]]); // SNOBOL approach
