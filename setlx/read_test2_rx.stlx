// 
// Read test in in SetlX
//
// This is my standard a.*b.*c ... test when learning a new
// programming language.
//
// The goal is to show all words from a dictionary which matches
// the regular expressions (for n = 4):
//   a.*b.*c.*d, b*.c.*d.*e, c.*d.*e.*f etc.
//   
// This SetlX program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

//
// This version use regular expressions (requires SetlX version 1.3.2)
//

matches := procedure(word, pattern) {
  match(word) {
    regex pattern: return true;
    default: return false;
  }
};

dict_file := "/usr/share/dict/words";
n := 5;
lang := "eng";

if (#params > 0) {
  dict_file := params[1];
}

if (#params > 1) {
  n := int(params[2]);
}

if (#params > 2) {
  lang := params[3];
}


print("dict_file: $dict_file$");
print("n: $n$");
print("lang: $lang$");

num_chars := 26;
chars := [char(i) : i in [97..97+num_chars-1]];

// for Swedish words
if (lang == "swe" || lang == "Swe") {
  num_chars := 29;
  chars += ["å","ä","ö"];
}

char_len := #chars;
print("char_len:", char_len);

// create the patterns
patterns := [];
for (i in [1..char_len-n+1]) {
  pattern := ".*" + join(chars[i..i+n-1],".*") + ".*";
  patterns += [pattern];
}

// read the dict file
dict := readFile(dict_file);
words := [];
for (word in dict) {
  words += [toLowerCase(word)];
}

print("Finished reading file.");
print("Total number of words:", #words);

for (pattern in patterns) {
  matched_words := [];
  print("\nTesting pattern:", pattern);
  for (word in words) {
    if (matches(word, pattern)) {
      matched_words += [word];
    }
  }
  print(#matched_words, ": ", matched_words);
  matched_words := [];
   
}

