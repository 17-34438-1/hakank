#!/usr/bin/env setl
-- 
-- Look and say sequence in SETL.
-- 
-- From http://rosettacode.org/wiki/Look-and-say_sequence
-- """
-- Sequence Definition
--
-- * Take a decimal number
-- * Look at the number, visually grouping consecutive runs of the 
--   same digit.
-- * Say the number, from left to right, group by group; as how 
--   many of that digit there are - followed by the digit grouped. 
--
-- * This becomes the next number of the sequence. 
--
-- The sequence is from John Conway, of Conway's Game of Life fame.
--
-- An example:
--
--  * Starting with the number 1, you have one 1 which produces 11.
--  * Starting with 11, you have two 1's i.e. 21
--  * Starting with 21, you have one 2, then one 1 i.e. (12)(11) 
--    which becomes 1211
--  * Starting with 1211 you have one 1, one 2, then two 1's i.e. 
--    (11)(12)(21) which becomes 111221 
-- """
--
-- Also, see:
--   http://en.wikipedia.org/wiki/Look-and-say_sequence
--   http://www.research.att.com/~njas/sequences/A005150
--
-- This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
-- Also see my SETL page: http://www.hakank.org/setl/
--

n:=11;
print([s:="1"]+[s:=runs(s):i in[1..n]]); -- direct approach
print([s:="1"]+[s:=runs2(s):i in[1..n]]); -- regular expressions
print([s:="1"]+[s:=runs3(s):i in[1..n]]); -- S*BOL functions


--
-- Runs of a string, direct approach
--
proc runs(x);
  s := ""; 
  last := x(1); 
  c := 1; 
  for i in [2..#x] loop 
    if x(i) = last then 
       c +:= 1; 
    else 
      s +:= c + x(i-1); 
      c := 1;  
      last := x(i); 
    end if; 
  end loop; 
  return s + c + last;
end proc;

--
-- Runs of a string using regular expression.
-- AFAIK, it is not possible to take the length 
-- of the captured pattern in the replacement part
-- of sub(), i.e. as in Perl-style regexps. 
-- Hence this solution.
--
proc runs2(x);
  while #x > 0 loop 
    z := sub(x,x(1)+"+","");
    s +:= #z + z(1);
  end loop;
  return s;
end proc;

--
-- Runs of a string using many (see below).
-- Otherwise, it's the same idea as in runs2()
--
proc runs3(x);
  while x /= "" loop
     z := many(x,x(1));
     s +:= #z + z(1);
  end loop;
  return s;
end proc;

--
-- many is a generalization of any() and S*BOL function, 
-- see
-- http://setl.org/doc/setl-lib.html#any
-- (SETL has also support for some other S*BOL functions, 
--  like len, break, span, etc.)
--
-- Also note that s is defined as a read/write here.
--
proc many(rw s,p); 
   while (zz := any(s,p)) /= "" and zz /= "" loop 
        z +:= zz; 
   end loop; 
   return z; 
end proc;
