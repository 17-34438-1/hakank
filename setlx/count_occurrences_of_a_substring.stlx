// 
// Count occurrences of a substring in SETL
// 
// From
// http://rosettacode.org/wiki/Count_occurrences_of_a_substring
// """
// The task is to either create a function, or show a built-in function, 
// to count the number of non-overlapping occurrences of a substring 
// inside a string. The function should take two arguments: the first 
// argument being the string to search and the second a substring to be 
// search for. It should return an integer count.
// 
// print countSubstring("the three truths","th")
// 3
//
// // do not count substrings that overlap with previously-counted substrings:
// print countSubstring("ababababab","abab")
// 2
//
// The matching should yield the highest number of non-overlapping matches. 
// In general, this essentially means matching from left-to-right or 
// right-to-left (see proof on talk page).
// """
//
// This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

load("string_utils.stlx");

count_substrings := procedure(s, sb) {
  c := 0;
  i := 1;
  while (i < #s && i+#sb <= #s ) {
    if (s[i..i+#sb-1] == sb) {
      c += 1;
      i += #sb;
    } else {
      i += 1;
    }
  }

  return c;
};

count_substrings2 := procedure(s, sb) {
  c := 0;
  while (#s > 0) {
    breaks(s, sb);       // remove chars not in sb
    cc := matchs(s, sb); // match the substring and consume it
    if (cc != "" && cc != om) {
      c += 1;
    } else {
      len(s, 1);         // go forward one character
    }
  }
  return c;
};



print(count_substrings("the three truths", "th")); // 3
print(count_substrings("ababababab", "abab"));     // 2
print(count_substrings("aaaaaaaaaaa", "aa"));      // 5
print(count_substrings("aaaaaaaaaaa", "c"));       // 0

print("\nUsing SNOBOL scan patterns (in string_utils.stlx):");
print(count_substrings2("the three truths", "th")); // 3
print(count_substrings2("ababababab", "abab"));     // 2
print(count_substrings2("aaaaaaaaaaa", "aa"));      // 5
print(count_substrings2("aaaaaaaaaaa", "c"));       // 0

