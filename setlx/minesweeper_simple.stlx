// 
// Minesweeper (simple) problem in SetlX
// 
// Problem description from Skiena "Programming Challenges", page 16
//
// """
// Have you ever played Minesweeper? This cute little game comes with a certain op-
// erating system whose name we can’t remember. The goal of the game is to find where
// all the mines are located within a M × N field.
//
// The game shows a number in a square which tells you how many mines there are
// adjacent to that square. Each square has at most eight adjacent squares. The 4 × 4 field
// on the left contains two mines, each represented by a "*" character. If we represent the
// same field by the hint numbers described above, we end up with the field on the right:
//
//    *...    *100
//    ....    2210
//    .*..    1*10
//    ....    1110
//
// Input
// The input will consist of an arbitrary number of fields. The first line of each field
// contains two integers n and m (0 < n, m <= 100) which stand for the number of lines
// and columns of the field, respectively. Each of the next n lines contains exactly m
// characters, representing the field.
// Safe squares are denoted by "." and mine squares by "*" both without the quotes.
// The first field line where n = m = 0 represents the end of input and should not be
// processed.
//
// Output
// For each field, print the message Field #x: on a line alone, where x stands for the
// number of the field starting from 1. The next n lines should contain the field with the
// "." characters replaced by the number of mines adjacent to that square. There must
// be an empty line between field outputs.
// """

// A comment about "Minesweeper (simple)":
// Note: This is _not_ the same problem as the one solved with my 
// Constraint Programming models, e.g. http://www.hakank.org/minizinc/minesweeper.mzn
// In these models, we are given some hints - some of the neighbour numbers - and
// then the object is to locate all the bombs, i.e. in a way the inverse problem.
//
// I regard the problem stated in Programming Challenges as simpler, 
// hence the name.
//


// This SetlX program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

//
// m is a matrix of 0/1 where 1 indicates a bomb.
//
minesweeper1 := procedure(m, rows, cols, k) {
  print("Field #$k$:");
  for(i in [1..rows]) {
    for (j in [1..cols]) {
      if (m[i][j] == 1) {
        nPrint("*"); // It's a bomb
      } else {
        // Otherwise: sum the number of bombs in all neighboring cells.
        nPrint(+/[ m[i+a][j+b] : a in [-1..1], b in [-1..1] | 
                   i+a > 0 && i+a <= rows && j+b > 0 && j+b <= cols]);
      }
    }
    print();
  }
  print();

};


//
// input is a string version of the problem.
//
minesweeper := procedure(input, k) {
  s := split(input,"\n");
  [rows, cols] := [int(i) : i in split(s[1], "\\s")];
  h := {["*",1],[".",0]}; // conversion table
  m := [ [h[j] : j in split(s[i],"")] : i in [2..rows+1]];
  minesweeper1(m, rows, cols, k);
};


//
// Define the problem instances
//
input1 := 
"4 4
*...
....
.*..
....";


input2 :=
"3 5 
**... 
..... 
.*...";


input3 :=
"6 6
*....*
.*.**.
....*.
....*.
.***..
*...**";


input4 :=
"8 8
.*.*....
*.*.**..
**.*..*.
..**.*.*
.....**.
.*.**...
.***.*.*
..*..**.";


input5 :=
"10 10
......*...
.....*...*
.*.*....*.
......*...
..*.......
.....*..*.
**..*.....
*.....*.*.
*.*..*.*..
..........";

input6 :=
"6 6
..**..
......
*....*
*....*
......
..**..";

inputs := [input1, input2, input3, input4, input5, input6];

/*
k := 1;
for(input in inputs) {
  minesweeper(input, k);
  k += 1;
}
*/

//
// Make all input a single string (according to the Programming Challenge).
//
p := join(inputs ,"\n") + "\n0 0";
s := split(p, "\n");

m := [];
isNew := true;
i := 1;
k := 1;
while (i <= #s) {
  [rows, cols] := [int(j) : j in split(s[i], "\\s")];
  if (rows == 0) {
    break;
  }
  m := join([s[j] : j in [i..i+rows+1]],"\n");
  minesweeper(m,k);
  i += rows+1;
  k += 1;
}