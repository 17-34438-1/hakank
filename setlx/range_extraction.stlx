// 
// Range extraction in SetlX
// 
// From Rosetta code
// http://rosettacode.org/wiki/Range_extraction
// """
// A format for expressing an ordered list of integers is to use a comma 
// separated list of either
//
//   * individual integers
//   * Or a range of integers denoted by the starting integer separated 
//     from the end integer in the range by a dash, '-'. (The range includes 
//     all integers in the interval including both endpoints) 
//
//     * The range syntax is to be used only for, and for every range 
//       that expands to more than two values. 
//
// Example
// The list of integers:
//
//     -6, -3, -2, -1, 0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 17, 18, 19, 20 
//
// Is accurately expressed by the range expression:
//
//     -6,-3-1,3-5,7-11,14,15,17-20 
//
// (And vice-versa).
//
// The task
//
// Create a function that takes a list of integers in increasing order 
// and returns a correctly formatted string in the range format.
// Use the function to compute and print the range formatted version of the 
// following ordered list of integers: 
// 
//     0,  1,  2,  4,  6,  7,  8, 11, 12, 14,
//    15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
//    25, 27, 28, 29, 30, 31, 32, 33, 35, 36,
//    37, 38, 39
// """
// 
// This SetlX program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

join2 := procedure(s, c) {
  if (#s == 1) {
    return +/s;
  } 
  return +/(s[1]+ +/[c + t : t in s[2..#s]]);
};

get_range := procedure(r) {
  switch {
  case #r==1: return min(r);
  default   : return "$min(r)$-$max(r)$";
  }
};

make_ranges := procedure(list) {
  ranges := [];
  range := [list[1]];
  for (i in [2..#list]) {
    li1 := list[i-1]; li := list[i];
    if (li == li1+1) {
      range += [li]; // add to existing range
    } else {
      ranges += [range];
      range := [li]; // create new range
    }
  }
  ranges += [range]; // pickup the last range
  return  join2([get_range(r) : r in ranges],",");
};

// Union-find approach
make_ranges2 := procedure(list) {
  ranges := {[list[1], {list[1]}]};
  for (i in [2..#list]) {
    li1 := list[i-1]; li := list[i];
    if (exists(r in domain(ranges) | 
               li1+1 == li && li1 in ranges[r])) {
      ranges[r] += {li};
    } else {
      ranges[li] := {li};
    }
  }
  return join2([get_range(r[2]) : r in ranges],",");
};


list := [-6, -3, -2, -1, 0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 17, 18, 19, 20];
print(make_ranges(list));
print(make_ranges2(list));

list2 := [0,  1,  2,  4,  6,  7,  8, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,25, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39];
print(make_ranges(list2));
print(make_ranges2(list2));

list3 := [1..20];
print(make_ranges(list3));
print(make_ranges2(list3));

list4 := [13];
print(make_ranges(list4));
print(make_ranges2(list4));

list4 := [11,12,13,15];
print(make_ranges(list4));
print(make_ranges2(list4));
