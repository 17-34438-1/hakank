// 
// Power set in SetlX
// 
// From Rosetta code:
// http://rosettacode.org/wiki/Power_set
// """
// A set is a collection (container) of certain values, without 
// any particular order, and no repeated values. It corresponds with 
// a finite set in mathematics. A set can be implemented as an 
// associative array (partial mapping) in which the value of each 
// key-value pair is ignored.
//
// Given a set S, the power set (or powerset) of S, written P(S), or 
// 2^S, is the set of all subsets of S.
// Task : By using a library or build-in set type, or defining a 
// set type with necessary operations, write a function with a set S 
// as input that yields a power set 2S of S.
//
// For example, the power set of {1,2,3,4} is {{}, {1}, {2}, {1,2}, {3}, 
// {1,3}, {2,3}, {1,2,3}, {4}, {1,4}, {2,4}, {1,2,4}, {3,4}, {1,3,4}, 
// {2,3,4}, {1,2,3,4}}. 
// """
// 
// This SetlX program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

// SetlX has a built-in power set function.
// Note: The sets in SetlX are ordered.
print(pow({1,2,3,4}));


