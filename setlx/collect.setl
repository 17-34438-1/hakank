#!/usr/bin/env setl
-- 
-- Collect occurrences in SETL
--
--
-- This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
-- Also see my SETL page: http://www.hakank.org/setl/
--


setrandom(0); -- indeterministic
a := [random 10 : i in [1..1000000]];
m := collect(a);
print(m);

print("range(m)",range(m));
print("domain(m)",domain(m));

--
-- Collect:
-- return a map with counts of the occurrences of 
-- each items in tuple a
--
proc collect(a);
  -- c := { [i, #[j : j in [1..#a] | a(j) = i ]] :  i in { i : i in a}}; 
  c := {};
  -- this is a faster solution
  for i in a loop 
    c(i) +:= 1;
  end loop;
  return c; 
end proc;

-- alternative version
proc collect2(a);
  c := {};
  -- We use this for the side effect of filling c.
  -- But must assign to something...
  x := { c(i) +:= 1 : i in a};
  return c;
end proc;


proc as_map(a);
  return {i: i in a};
end proc;
