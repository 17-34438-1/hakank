// Testing sort on strings and in general arrays


//
// quicksort
//
qsort := procedure(a) {
  if (#a > 1) {
    pivot := a[#a \ 2 + 1];
    a := qsort([x in a | compare(x, pivot)  < 0]) +
               [x in a | compare(x, pivot) == 0]     +
         qsort([x in a | compare(x, pivot)  > 0]);
  }

  return a;
};

//
// quicksort for maps,
// sort on a certain column: col 1..2
//
qsort_c := procedure(a, col) {
  if (#a > 1) {
    pivot := a[#a \ 2 + 1][col];
    a := qsort_c([x in a | compare(x[col],pivot)  < 0], col) +
                 [x in a | compare(x[col],pivot) == 0]  +
         qsort_c([x in a | compare(x[col],pivot)  > 0], col);
  }

  return a;
};


//
// insertion sort
//
insertion_sort := procedure(a) {
   for (i in [2..#a]) {
      v := a[i];
      j := i-1;
      while (j >= 1 && compare(a[j], v) > 0) {
        a[j+1] := a[j];
        j := j - 1;
      }
      a[j+1] := v; 
   }

   return a;

};


insertion_sort_c := procedure(a, col) {
   for (i in [2..#a]) {
      v := a[i];
      j := i-1;
      while (j >= 1 && compare(a[j][col], v[col]) > 0) {
        a[j+1] := a[j];
        j := j - 1;
      }
      a[j+1] := v; 
   }

   return a;

};


// random int in 1..to
random_int := procedure(to) {
   return rnd({1..to});
};

