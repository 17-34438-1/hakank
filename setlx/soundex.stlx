// 
// Soundex in SetlX
//
// See for example:
//   http://en.wikipedia.org/wiki/soundex
//   http://rosettacode.org/wiki/Soundex
// 
//
// This SetlX program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//


// This was inspired by the Python code from  
//   http://code.activestate.com/recipes/52213/
// with the following comment:
// """
// soundex module conforming to Knuth's algorithm
// implementation 2000-12-24 by Gregory Jorgensen
// public domain
// """
soundex := procedure(name, llen) {
  if (name == "" || name == om) {
    return "";
  }
  
  // digits holds the soundex values for the alphabet
  digits := "01230120022455012623010202";
  sndx := "";
  fc   := "";

  // translate alpha chars in name to soundex digits
  for (c in toUpperCase(name)) {
    if (is_alpha(c)) {
      if (fc == "") {
        fc := c;   // remember first letter
      }
      d := digits[abs(c)-abs("A")+1];
      // duplicate consecutive soundex digits are skipped
      if (#sndx == 0 || d != sndx[#sndx]) {
        sndx += d;
      }
    }
  }

  // replace first digit with first alpha character
  if (#sndx >= 2) {
    sndx := fc + sndx[2..];
  } else {
    sndx := fc;
  }

  // remove all 0s from the soundex code
  // gsub(sndx,"0",""); // GNU SETL
  sndx := +/[s : s in sndx | s != "0"];

  // return soundex code padded to len characters
  if (llen > #sndx) {
    sndx := sndx + (llen - #sndx) * "0";
  }

  return sndx[1..llen];

};


is_alpha := procedure(c) {
  if (c == om || #c == 0) {
    return false;
  }
  alpha := "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  return !(exists(i in c | i notin alpha));
};


// From J's test at http://rosettacode.org/wiki/Soundex
// And O'Hara from the Forth test
names := split("Lloyd Woolcock Donnell Baragwanath Williams Ashcroft Euler Ellery Gauss Ghosh Hilbert Heilbronn Knuth Kant Ladd Lukasiewicz Lissajous O'Hara", " ");
soundexNames := split("L300 W422 D540 B625 W452 A226 E460 E460 G200 G200 H416 H416 K530 K530 L300 L222 L222 O600", " ");

i := 1;
all_ok := true;
for (n in names) {
  s := soundex(n, 4);
  t := soundexNames[i];
  checkx := s == t;
  check_str := "";
  check_str := "\tOK";
  if (!checkx) {
    all_ok := false;
    check_str := "\tNOT OK should be " + t;
  }
  print(n, ":\t", s, " ", check_str);
  i += 1;
}

if (all_ok) {
  print("ALL OK!");
}

