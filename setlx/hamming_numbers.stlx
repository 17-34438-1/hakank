// 
// Hamming numbers in SetlX
// 
// From Rosetta code:
// http://rosettacode.org/wiki/Hamming_numbers
// """
// Hamming numbers are numbers of the form
//   H = 2**i * 3**j * 5**k, where  i, j, k >= 0. 
//
// Hamming numbers are also known as ugly numbers and also 5-smooth numbers 
// (numbers whose prime divisors are less or equal to 5).
// 
// Generate the sequence of Hamming numbers, in increasing order. In particular:
//
//  * Show the first twenty Hamming numbers.
//  * Show the 1691st Hamming number (the last one below 231).
//  * Show the one millionth Hamming number (if the language – or a 
//    convenient library – supports arbitrary-precision integers). 
// """
// 
// 
// This SetlX program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//


// Inspired by one of the D solutions.
// But it's quite slow on larger n (e.g. 1000000)
hamming := procedure(n) {

  q := {1,2,3,5};
  low := 1;
  for (i in [1..n]) {
    low := fromB(q);
    q += {low * 2, low * 3, low * 5};
  }
  return(low);
};


// Much faster
hamming2 := procedure(n) {

  h := [];
  [next2,next3,next5] := [2,3,5];
  i := j := k := 0;
  m := 1;
  while (m < n) {
    h[m] := min([next2,next3,next5]);
    // Note that we might update more than one counters
    // so a switch {} is not appropriate
    if (h[m] == next2) { i+=1; next2 := 2*h[i]; }
    if (h[m] == next3) { j+=1; next3 := 3*h[j]; }
    if (h[m] == next5) { k+=1; next5 := 5*h[k]; }
    m += 1;
  }

  hh := [1] + h; // adjust for 1-based
  return hh[n];
};



// First 20 Hamming numbers:  1 2 3 4 5 6 8 9 10 12 15 16 18 20 24 25 27 30 32 36
// 1691 st Hamming number:  2125764000

print([hamming(i) : i in [1..20]]);
print(hamming(1691));
// print(hamming(1000000)); // too slow

print([hamming2(i) : i in [1..20]]);
print(hamming2(1691));
t1 := now();
print(hamming2(1000000)); // 3.37s
print("hamming2(1000000) took $(now()-t1)/1000.0$s");

// t2 := now(); 
// print(hamming2(10000000)); // 40.7s
// print("hamming2(10000000) took $(now()-t2)/1000.0$s");



