// 
// Price fraction in SetlX
// 
// From Rosetta code:
// http://rosettacode.org/wiki/Price_fraction
// """
// A friend of mine runs a pharmacy. He has a specialised function in his 
// Dispensary application which receives a decimal value of currency and 
// replaces it to a standard value. This value is regulated by a government department.
//
// Task: Given a floating point value between 0.00 and 1.00, rescale according to 
// the following table:
//
// >=  0.00  <  0.06  :=  0.10
// >=  0.06  <  0.11  :=  0.18
// >=  0.11  <  0.16  :=  0.26
// >=  0.16  <  0.21  :=  0.32
// >=  0.21  <  0.26  :=  0.38
// >=  0.26  <  0.31  :=  0.44
// >=  0.31  <  0.36  :=  0.50
// >=  0.36  <  0.41  :=  0.54
// >=  0.41  <  0.46  :=  0.58
// >=  0.46  <  0.51  :=  0.62
// >=  0.51  <  0.56  :=  0.66
// >=  0.56  <  0.61  :=  0.70
// >=  0.61  <  0.66  :=  0.74
// >=  0.66  <  0.71  :=  0.78
// >=  0.71  <  0.76  :=  0.82
// >=  0.76  <  0.81  :=  0.86
// >=  0.81  <  0.86  :=  0.90
// >=  0.86  <  0.91  :=  0.94
// >=  0.91  <  0.96  :=  0.98
// >=  0.96  <  1.01  :=  1.00
// """
// 
// This SetlX program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

var limits, value; // global variables


is_out_of_range := procedure(v) {
  return v < 0 || v > 1;
};

out_of_range := procedure(v) {
  switch {
  case v < 0 || v > 1: return om;   
  default: return v;
  }
};

rescale1 := procedure(v) {
  if (is_out_of_range(v)) {
    return out_of_range(v);
  }

  // here we rely on the fact that i will have the value of 
  // when it fails. If it don't fail i->om (which we fix below)
  forall(i in [1..#limits] | v >= limits[i]);
  if (i==om) { 
    i := 1+#limits; 
  }
  return value[i];
};

between := procedure(v, a,b) {
  return v >= a && v < b;
};

rescale1b := procedure(v) {
  if (is_out_of_range(v)) {
    return out_of_range(v);
  }

  limits2 := [0.00] + limits; // add first limit

  // using exists instead
  if (exists(i in [1..#limits2-1] | between(v, limits2[i], limits2[i+1])) ) {
    return value[i];
  }
  return value[#value];
};


// Same principle using a while loop
rescale2 := procedure(v) {
  if (is_out_of_range(v)) {
    return out_of_range(v);
  }

  i := 1;
  while(i <= #limits && v >= limits[i]) {
    i += 1;
  }
  return value[i];
};

rescale3 := procedure(v) {
  if (is_out_of_range(v)) {
    return out_of_range(v);
  }

  switch {
  case v < 0.06: return 0.10;
  case v < 0.11: return 0.18;
  case v < 0.16: return 0.26;
  case v < 0.21: return 0.32;
  case v < 0.26: return 0.38;
  case v < 0.31: return 0.44;
  case v < 0.36: return 0.50;
  case v < 0.41: return 0.54;
  case v < 0.46: return 0.58;
  case v < 0.51: return 0.62;
  case v < 0.56: return 0.66;
  case v < 0.61: return 0.70;
  case v < 0.66: return 0.74;
  case v < 0.71: return 0.78;
  case v < 0.76: return 0.82;
  case v < 0.81: return 0.86;
  case v < 0.86: return 0.90;
  case v < 0.91: return 0.94;
  case v < 0.96: return 0.98;
  case v < 1.01: return 1.00;
  }

};

// Inspired by the Perl version
rescale4 := procedure(v) {

  if (is_out_of_range(v)) {
    return out_of_range(v);
  }

  s := ">=  0.00  <  0.06  :=  0.10
>=  0.06  <  0.11  :=  0.18
>=  0.11  <  0.16  :=  0.26
>=  0.16  <  0.21  :=  0.32
>=  0.21  <  0.26  :=  0.38
>=  0.26  <  0.31  :=  0.44
>=  0.31  <  0.36  :=  0.50
>=  0.36  <  0.41  :=  0.54
>=  0.41  <  0.46  :=  0.58
>=  0.46  <  0.51  :=  0.62
>=  0.51  <  0.56  :=  0.66
>=  0.56  <  0.61  :=  0.70
>=  0.61  <  0.66  :=  0.74
>=  0.66  <  0.71  :=  0.78
>=  0.71  <  0.76  :=  0.82
>=  0.76  <  0.81  :=  0.86
>=  0.81  <  0.86  :=  0.90
>=  0.86  <  0.91  :=  0.94
>=  0.91  <  0.96  :=  0.98
>=  0.96  <  1.01  :=  1.00";

  for(line in split(s, "\n")) {
    lim := [real(i) : i in split(line, " ") | real(i) != om];
    // if (v >= lim[1] && v < lim[2]) {
    if (between(v, lim[1], lim[2])) {
      return lim[3];
    }
  }

  return om;

};

// build the limits and value tables (for this specific problem)
rescale5 := procedure(v) {

  if (is_out_of_range(v)) {
    return out_of_range(v);
  }

  // limit diffs: [0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05]
  // limit value: [0.08, 0.08, 0.06, 0.06, 0.06, 0.06, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.02]
  a := [0.10] + rep(0.08,2) + rep(0.06,4) + rep(0.04,12) + [0.02];
  values2 := [+/a[1..i] : i in [1..#a]]; // cumulative sum
  i := 1;
  while (i <= 19 && v >= 0.01+(0.05*i)) {
    i += 1;
  }
  
  return values2[i];

};

// using a map for the range -> recale value
rescale6 := procedure(v) {

  if (is_out_of_range(v)) {
    return out_of_range(v);
  }

  conv := {
    [[0.00, 0.06],0.10],
    [[0.06, 0.11],0.18],
    [[0.11, 0.16],0.26],
    [[0.16, 0.21],0.32],
    [[0.21, 0.26],0.38],
    [[0.26, 0.31],0.44],
    [[0.31, 0.36],0.50],
    [[0.36, 0.41],0.54],
    [[0.41, 0.46],0.58],
    [[0.46, 0.51],0.62],
    [[0.51, 0.56],0.66],
    [[0.56, 0.61],0.70],
    [[0.61, 0.66],0.74],
    [[0.66, 0.71],0.78],
    [[0.71, 0.76],0.82],
    [[0.76, 0.81],0.86],
    [[0.81, 0.86],0.90],
    [[0.86, 0.91],0.94],
    [[0.91, 0.96],0.98],
    [[0.96, 1.01],1.00]
  };

  if (exists([[lb, ub], val] in conv | between(v,lb, ub))) {
    return val;
  }
};

round2 := procedure(v, d) {
  d2 := 10**d;
  return 1.0*round(v*d2)/d2;
};

rep := procedure(v, n) {
  return [v : i in [1..n]];
};

all_same := procedure(list) {
  return forall(i in list, j in list | i == j);

};

// Global variables
limits := [0.06, 0.11, 0.16, 0.21, 0.26,  0.31, 0.36, 0.41, 0.46, 0.51,
           0.56, 0.61, 0.66, 0.71, 0.76,  0.81, 0.86, 0.91, 0.96];
value  := [0.10, 0.18, 0.26, 0.32, 0.38,  0.44, 0.50, 0.54, 0.58, 0.62,
           0.66, 0.70, 0.74, 0.78, 0.82,  0.86, 0.90, 0.94, 0.98, 1.0];


print("\nNote: Lists with all [om] (i.e. out of range) prints as [].\n");
for(i in [1..10]) {
  r := round2(1.3*random()-random(),3);
  res := [rescale1(r), rescale1b(r), rescale2(r), rescale3(r), rescale4(r), rescale5(r), rescale6(r)];
  print("$r$: $res$  all_same: $all_same(res)$");
}
print();
// for(v in [0..100]) {
for(v in limits) {
  // v /= 100.0;
  res := [rescale1(v), rescale1b(v), rescale2(v), rescale3(v), rescale4(v), rescale5(v), rescale6(v)];
  print("$v$: $res$   all_same: $all_same(res)$");
}
