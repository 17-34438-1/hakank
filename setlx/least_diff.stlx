//
// Alphametic problem in SetlX
// 
// Minimize the difference between 
//   ABCDE - FGHIJ
// where A..J are all different digits (0..9)
// 
// This SetlX program was written by Hakan Kjellerstrand (hakank@bonetmail.com).
// See also my SETL page: http://www.hakank.org/setl/ .
//


//
// for | list | condition
//
// 19s
least_diff := procedure() {
  ss := {0..9};
  diff := 999999;
  // We must loop through all combinations
  // to ensure optimality.
  for ([a,b,c,d,e,f,g,h,i,j] in 
         [[a,b,c,d,e,f,g,h,i,j] :
          // ensure that all numbers are different
          a in ss, 
          b in ss - {a},
          c in ss - {a,b},
          d in ss - {a,b,c},
          e in ss - {a,b,c,d},
          f in ss - {a,b,c,d,e},
          g in ss - {a,b,c,d,e,f},
          h in ss - {a,b,c,d,e,f,g},
          i in ss - {a,b,c,d,e,f,g,h},
          j in ss - {a,b,c,d,e,f,g,h,i}
          | 
          a > 0 && f > 0 && a > f
          ]) {
    tmp := (a * 10000 + b * 1000 + c * 100 + d * 10 + e) - (f * 10000 + g * 1000 + h * 100 + i * 10 + j);
    if (tmp < diff && tmp > 0) {
      diff := tmp;
      print("$a$$b$$c$$d$$e$ - $f$$g$$h$$i$$j$ = $diff$ ");
    }
  }

  return diff;
};

//
// while exists...
//
// 2:08.49minutes
least_diff2 := procedure() {
  ss := {0..9};
  diff := 999999;
  // We must loop through all combinations
  // to ensure optimality.
  while (exists(
          a in ss, 
          b in ss - {a},
          c in ss - {a,b},
          d in ss - {a,b,c},
          e in ss - {a,b,c,d},
          f in ss - {a,b,c,d,e},
          g in ss - {a,b,c,d,e,f},
          h in ss - {a,b,c,d,e,f,g},
          i in ss - {a,b,c,d,e,f,g,h},
          j in ss - {a,b,c,d,e,f,g,h,i}
          |
          a > f &&
          // (a * 10000 + b * 1000 + c * 100 + d * 10 + e) - (f * 10000 + g * 1000 + h * 100 + i * 10 + j) > 0 &&
          (a * 10000 + b * 1000 + c * 100 + d * 10 + e) - (f * 10000 + g * 1000 + h * 100 + i * 10 + j) < diff &&
          a > 0 && f > 0
          )) {
    diff := (a * 10000 + b * 1000 + c * 100 + d * 10 + e) - (f * 10000 + g * 1000 + h * 100 + i * 10 + j);
    if (diff > 0) {
      print("$a$$b$$c$$d$$e$ - $f$$g$$h$$i$$j$ = $diff$ ");
    }
  }

  return diff;
};

//
// Using nextPermutation
// Fastest: 5.082s!
//
least_diff3 := procedure() {
  p := [0..9];
  diff := 999999;  
  while (p != om) {
    [a,b,c,d,e,f,g,h,i,j] := p;
    
    if (a > 0 && a > f &&
        (a * 10000 + b * 1000 + c * 100 + d * 10 + e) - 
        (f * 10000 + g * 1000 + h * 100 + i * 10 + j) < diff 
        ) {
      new_diff := (a * 10000 + b * 1000 + c * 100 + d * 10 + e) - (f * 10000 + g * 1000 + h * 100 + i * 10 + j);
      if (new_diff > 0 && new_diff < diff) {
        diff := new_diff;
        print("$a$$b$$c$$d$$e$ - $f$$g$$h$$i$$j$ = $diff$ ");
      }
      
    }
    p := nextPermutation(p);
  }
  
  return diff;
};

//
// Using permutations()
//
// 18.1s
least_diff4 := procedure() {
  p := [0..9];
  diff := 999999;  
  for ([a,b,c,d,e,f,g,h,i,j] in permutations(p)) {
    if (a > 0 && a > f &&
        (a * 10000 + b * 1000 + c * 100 + d * 10 + e) - 
        (f * 10000 + g * 1000 + h * 100 + i * 10 + j) < diff 
        ) {
      new_diff := (a * 10000 + b * 1000 + c * 100 + d * 10 + e) - (f * 10000 + g * 1000 + h * 100 + i * 10 + j);
      if (new_diff > 0 && new_diff < diff) {
        diff := new_diff;
        print("$a$$b$$c$$d$$e$ - $f$$g$$h$$i$$j$ = $diff$ ");
      }
      
    }
  }
  
  return diff;
};


pp := procedure(s) {
  print(s);
  return true;
};

// print(least_diff());
// print(least_diff2());
print(least_diff3()); // fastest
// print(least_diff4());
