// Test of string_utils.stlx

load("string_utils.stlx");
load("general_utils.stlx");

tests := [
            "strip_chars(\"this is a string\", \" \")",
            "strip_chars(\"thisAisBaCstringDE\", \"ABCDE\")",
            "to_code_ascii(\"thisisastring\")",
            "to_code(\"abcd\", {[\"a\",\"c\"], [\"b\",\"d\"],[\"c\",\"a\"],[\"d\",\"b\"]})",
            "join([1..10],\",\")",
            "join2([1..10],\",\")",
            "str2a(str(123456))",

            "span(\"If, gentlemen\", \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghij\")",
            "span(\"If, gentlemen\", \"abcdefghijklmnopqrstuvwxyz\")",
            "rspan(\"If, gentlemen\", \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghij\")",
            "rspan(\"If, gentlemen\", \"abcdefghijklmnopqrstuvwxyz\")",

            "any(\"This is a string\", \"abcdefghijklmnopqrstuvzyzSTUV\")",
            "any(\"This is a string\", \"abcdefghijklmnopqrstuvzyz\")",
            "rany(\"This is a string\", \"abcdefghijklmnopqrstuvzyzSTUV\")",
            "rany(\"This is a stringS\", \"abcdefghijklmnopqrstuvzyz\")",
            "many(\"This is a string\", \"abcdefghijklmnopqrstuvzyzSTUV\")",
            "many(\"This is a string\", \"abcdefghijklmnopqrstuvzyz\")",
            "rmany(\"This is a STRING\", \"ABCDEFGHIJKLMNOPQRSTUVZYZ\")",
            "rmany(\"This is a string\", \"ABCDEFGHIJKLMNOPQRSTUVZYZ\")",
            "breaks(\"This is a string\", \" \")",
            "breaks(\"This is a string\", \"abcSTU\")",
            "rbreaks(\"This is a string\", \" \")",
            "rbreaks(\"This is a string\", \"abcSTU\")",
            "len(\"This is a string\", 4)",
            "len(\"This is a string\", 24)",
            "rlen(\"This is a string\", 4)",
            "rlen(\"This is a string\", 24)",
            "matchs(\"This is a string\", \"This\")",
            "matchs(\"This is a string\", \"his\")",
            "matchs(\"This is a string\", \"Not\")",
            "rmatchs(\"This is a string\", \"string\")",
            "rmatchs(\"This is a string\", \"ring\")",
            "rmatchs(\"This is a string\", \"Not\")",
            "notany(\"This is a string\", \"abcd\")",
            "notany(\"This is a string\", \"THIS\")",
            "notmany(\"This is a string\", \"abcd\")",
            "notmany(\"This is a string\", \"THIS\")",
            "rnotany(\"This is a string\", \"ginrst\")",
            "rnotany(\"This is a string\", \"THIS\")",
            "rnotmany(\"This is a string\", \"ginrst\")",
            "rnotmany(\"This is a string\", \"THIS\")",
            "lpad(\"This is a string\", 40)",
            "lpad(\"This is a string\", 10)",
            "rpad(\"This is a string\", 40)",
            "rpad(\"This is a string\", 10)"
         ];

testit(tests);
print();

// Special tests for the rw stuff (i.e. the 'SNOBOL' functions)
s := "If, gentlemen";
p := "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghij";
print("span(s, p): '$span(s, p)$' s: '$s$'");

//
// Find all the numbers in a string
//
find_all_numbers := procedure(s) {
  print("s: $s$");
  digits := "0123456789";
  numbers := [];
  while (#s > 0) {
    breaks(s, digits);
    t := span(s, digits);
    numbers += [int(t)];
    // or perhaps
    // numbers += [int(span(s, digits))];
    print("t:'$t$' s: '$s$'");
  }
  return numbers;
};

s2 := ":- 12 not a number 13 xyz 14 --- 15";

print("find_all_numbers: $find_all_numbers(s2)$");

// Test of len
//     12345678901234567801   // positions
get_scores := procedure(s) {

  fname := trim(len(s,4));
  lname := trim(len(s,8));
  year  := trim(len(s,4));
  score := trim(len(s,2));
  print("fname:<$fname$> lname:<$lname$> year:<$year$> score:<$score$>");
  return [fname, lname, year, score];
};


s3 := ["AdamNielsen 199912",
       "JoelSmith   200121",
       "Ana Hu      201234"
       ];

for (s in s3) {
  print(get_scores(s));
}

s4 := "this is a string";
p4 := "abcdefghijklmnopqrstuvwxyz";
while (#s4 > 0) {
  rbreaks(s4, p4);
  print(rspan(s4,p4));
}

s5 := "hello";
r5 := rpad(s5,10);
print("r5: '$r5$', #r5: $#r5$");