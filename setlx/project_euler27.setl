--
-- Euler problem 27
-- """
-- Euler published the remarkable quadratic formula:
--
-- n^2 + n + 41
--
-- It turns out that the formula will produce 40 primes for the consecutive values 
-- n = 0 to 39. However, when n = 40, 402 + 40 + 41 = 40(40 + 1) + 41 is divisible by 
-- 41, and certainly when n = 41, 41^2 + 41 + 41 is clearly divisible by 41.
--
-- Using computers, the incredible formula  n^2 − 79n + 1601 was discovered, which 
-- produces 80 primes for the consecutive values n = 0 to 79. The product of the 
-- coefficients, −79 and 1601, is −126479.
--
-- Considering quadratics of the form:
--
--     n^2 + an + b, where |a| < 1000 and |b| < 1000
--
--     where |n| is the modulus/absolute value of n
--     e.g. |11| = 11 and |−4| = 4
--
-- Find the product of the coefficients, a and b, for the quadratic 
-- expression that produces the maximum number of primes for consecutive 
-- values of n, starting with n = 0.
-- 
-- """ 
--
-- This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com).
-- See also my SETL page: http://www.hakank.org/setl/

var prime_hash := {};

problem27();


proc p(a,b);
    n :=0;
    while true loop
        pp := n**2 + a*n + b;
        if pp <= 1 or not(is_prime(pp)) then
            quit;
        else
            n:=n+1;
        end if;
    end loop;

    return(n+1);
end proc;

proc problem27;
    t := 999;
    bestLen := 0;
    besta := 0;
    bestb := 0;
    for a in [-t..t] loop
        for b in [-t..t] loop
            llen := p(a,b);
            if llen > bestLen then
                bestLen := llen;
                besta := a;
                bestb := b;
            end if;
        end loop;
    end loop;

    print("besta:",besta, "bestb:", bestb, "bestLen:", bestLen, "answer:", besta*bestb);

end proc;


proc is_prime(n);
    
    if prime_hash(n) /= om then 
       return prime_hash(n);
    end if;

    if n = 2 or n = 3 then
        prime_hash(n) := true;
        return(true);
    end if;
    if n mod 2 = 0 then
        prime_hash(n) := false;
        return(false);
    end if;
    for i in [3,5..round(sqrt(n))+1] loop
        if n mod i = 0 then
            prime_hash(n) := false;
            return(false);
        end if;
    end loop;
    prime_hash(n) := true;
    return(true);
end proc;
