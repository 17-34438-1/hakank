// 
// Fibonacci sequence in SetlX.
//
// See 
//   * http://en.wikipedia.org/wiki/Fibonacci_chain
//   * http://mathworld.wolfram.com/FibonacciNumber.html
//
// From http://rosettacode.org/wiki/Fibonacci_sequence
// """
// Write a function to generate the nth Fibonacci number. Solutions can be 
// iterative or recursive (though recursive solutions are generally considered 
// too slow and are mostly used as an exercise in recursion). Support for 
// negative n is optional. 
// """
//
// This SetlX program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

//
// recursive: slow
//
fib_rec := procedure(n) {
  if (n <= 2) {
     return 1;
  } else {
     return fib_rec(n-1) + fib_rec(n-2);
  }
};


//
// recursive with cache. Fast.
//
fib_rec_cache := procedure(n) {
  cache := {[1,1],[2,1]}; 
  f:=fib_rec_cache1(n,cache);
  return f;
};

fib_rec_cache1 := procedure(n,rw cache) {
  if (cache[n] != om) {
    return cache[n];
  }
  if (n <= 2) {
    return 1;
  }

  f1 := fib_rec_cache1(n-1, cache);
  cache[n-1] := f1;
  f2 := fib_rec_cache1(n-2, cache);
  cache[n-2] := f2;
  
  return f1 + f2;
};


//
// Iterative solution
//
fib := procedure(n) {
  f1 := 1; f2 := 1;   
  ix := 2;
  while (ix < n) {
    tmp := f1; f1 := f2; f2 := tmp + f1;
    ix += 1;
  }
  return f2;
  
};

//
// collect in an array
//
fib_array := procedure(n) {
   f1 := 1; f2 := 1; f := [f1,f2];
   ix := 2;
   while (ix < n) {
     tmp := f1; f1 := f2; f2 := tmp + f1;
     f += [f2];
     ix += 1;
   }

   return f;

};

//
// array (tuple) comprehension
//
// This don't work in SetlX since it's not
// allowed to do assignments in an array comprehension.
// fib_array2 := procedure(n) {
//    s:= [1,1];
//    f:= s;
//    return s + [f(i) := f(i-1)+f(i-2) : i in [3..n]];
// };



n:= 100;
n2 := 20;
print("fib($n$): $fib(n)$");
print("fib_array($n$): $fib_array(n)$");
// print("fib_array2(",n,"):",fib_array2(n));

print("fib_rec(n2): $fib_rec(n2)$"); // slow
print("fib_rec_cache($n$): $fib_rec_cache(n)$"); // fast


