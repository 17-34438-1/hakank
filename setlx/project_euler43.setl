#!/usr/bin/env setl
-- 
-- Project Euler problem 43 in SETL
--
-- """  
-- The number, 1406357289, is a 0 to 9 pandigital number because it is made up of 
-- each of the digits 0 to 9 in some order, but it also has a rather interesting 
-- sub-string divisibility property.
--
-- Let d1 be the 1st digit, d2 be the 2nd digit, and so on. In this way, we 
-- note the following:
--
--     * d2d3d4=406 is divisible by 2
--     * d3d4d5=063 is divisible by 3
--     * d4d5d6=635 is divisible by 5
--     * d5d6d7=357 is divisible by 7
--     * d6d7d8=572 is divisible by 11
--     * d7d8d9=728 is divisible by 13
--     * d8d9d10=289 is divisible by 17
--
-- Find the sum of all 0 to 9 pandigital numbers with this property.
-- """
--
-- This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
-- Also see my SETL page: http://www.hakank.org/setl/
--

problem43();

proc next_permutation(p);

    n := #p;
    k := n - 1;

    while p(k) > p(k+1) loop
        k := k-1;
        if k = 0 then
            return([]);
        end if;
    end loop;
    if k = 0 then
        return([]);
    else
        j := n;
        while p(k) > p(j) loop
            j := j-1;
        end loop;

        [p(j),p(k)] := [p(k),p(j)];
        r := n;
        s := k+1;
        while r > s loop
            [p(s),p(r)] := [p(r),p(s)];
            r := r-1;
            s := s+1;
        end loop;
    end if;

    return(p);

end proc;

proc problem43;
    
    P := [2, 3, 5, 7, 11, 13, 17];

    -- s := [0..9]; -- first permutation
    s := [1, 0, 2, 3, 4, 5, 6, 7, 8, 9];
    sum := 0;

    while s /= [] loop
         -- skip the permutations that starts with a 0
         -- if s(1) = 0 then s := next_permutation(s); continue; end if;
         s2 := ""+/[i : i in s];
         if forall i in [1..7] | val(s2(1+i..3+i)) mod P(i) = 0 then
           print("\t", s2);
           sum +:= val(s2);
         end if;

         s := next_permutation(s);

    end loop;

    print(sum);

end proc;
