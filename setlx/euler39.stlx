// 
// Project Euler problem 39 in SETL
//
// """
// If p is the perimeter of a right angle triangle with integral length sides, 
// {a,b,c}, there are exactly three solutions for p = 120.
//  
// {20,48,52}, {24,45,51}, {30,40,50}
//  
// For which value of p <= 1000, is the number of solutions maximised?
// """
//
// This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

// Very slow
problem39 := procedure() {
  print("problem39b");
  m := 1000;
  best_p := 0;
  best_cc := 0;

  for (p in [1..m]) {
    cc := 0;
    for (a in [1..p \ 2]) {
      for (b in [a..(p-a) \ 2]) {
        c := sqrt(a**2+b**2);
        if (a + b + c == p) {
          cc += 1;
        } else {
          continue;
        }

        if (best_cc < cc) {
          best_cc := cc;
          best_p := p;
          print("p: ",p, " cc: ",cc);
        }

      }
    }
  }

  print(best_p);

};

// Much faster (but still too slow: ~20s)
problem39b := procedure() {
  print("problem39b");
  m := 1000;
  best_p := 0;
  best_cc := 0;

  for (p in [1..m]) {
    cc := 0;
    for (a in [1..p \ 2]) {
      for (b in [a..(p-a) \ 2]) {
        c := p-a-b;
        if (a*a + b*b == c*c) {
          cc += 1;
        }
      }
      if (cc > best_cc) {
        best_cc := cc;
        best_p := p;
        print("p: ",p, " cc: ",cc);
      }
    }
  }

  print(best_p);

};

// argMax|argMin
argM := procedure(a, f) {
  return [i : i in [1..#a] | a[i] == f(a)];
};


// Better: ~4.5s
problem39c := procedure() {

  print("problem39c");
  n := 1000-1;
  squares := [x*x : x in [1..n]];
  valid := {[x,y] : x in squares, y in squares | 
               x < y && (x+y) in squares && (sqrt(x) + sqrt(y) + sqrt(x+y)) < 1000};

  counts := [0 : x in [1..n]];
  for ([x,y] in valid) {
    counts[int(sqrt(x) + sqrt(y) + sqrt(x+y))] += 1;
  }
  p := max(counts);
  print("Best p ($p$) is for ", first(argM(counts, max)));

};

// problem39();
// problem39b();
problem39c();

