// 
// Knuth Shuffle in SETL.
//
// From http://rosettacode.org/wiki/Knuth_shuffle
// """
// Implement the Knuth shuffle (aka the Fisher-Yates shuffle) for an 
// integer array (or, if possible, an array of any type). The Knuth shuffle 
// is used to create a random permutation of an array. 
// """
//
// Also see: http://en.wikipedia.org/wiki/Knuth_shuffle
//
// This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//


//
// Knuth shuffle
//
knuth_shuffle := procedure(a) {
  alen := #a-1;
  i := #a;
  while (i > 0) {
    r := 1+rnd([1..alen]);
    [a[r], a[i]] := [a[i],a[r]];
    i -= 1;
  }

  return a;
};

//
// Knuth shuffle, inline version (read write)
//
knuth_shuffle_rw := procedure(rw a) {
  alen := #a-1;
  i := #a;
  while (i > 0) {
    r := 1+rnd([1..alen]);
    [a[r], a[i]] := [a[i],a[r]];
    i -= 1;
  }
};


n:=100;

// plain shuffle
a := [1..n];
print("a: ",knuth_shuffle(a));

// inline shuffle
print();
b := [1..n];
knuth_shuffle_rw(b);
print("b: ", b);

print();
s := split("Implement the Knuth shuffle (aka the Fisher-Yates shuffle) for an integer array (or, if possible, an array of any type). The Knuth shuffle is used to create a random permutation of an array.", "");
s2 := s;
knuth_shuffle_rw(s2);
print(+/s2);

// use the built-in shuffle
print(+/shuffle(s));
