#!/usr/bin/env setl
-- 
-- Project Euler problem 35 in SETL
--
-- Problem 35
-- """
-- The number, 197, is called a circular prime because all rotations 
-- of the digits: 197, 971, and 719, are themselves prime.
--
-- There are thirteen such primes below 100: 
-- 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.
--
-- How many circular primes are there below one million?
-- """
--
-- This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
-- Also see my SETL page: http://www.hakank.org/setl/
--

problem35();

procedure problem35;
   nprint("Problem 35: ");

   num_circular_primes := 0;
   primes := prime_sieve(1000000);
   for n in primes loop
     if is_circular_prime(n) then
          num_circular_primes +:= 1;
     end if;
   end loop;
  
   print(num_circular_primes);

end problem35;


--
-- check is a number (a prime) is a circular prime
--
procedure is_circular_prime(p);
   s := str(p);
   size := #s;
   for i in [2..#s] loop
      v:= val(s(i..size) + s(1..i-1));
      if not is_prime(v) then 
        return false;
      end if;
   end loop;

   return true;

end is_circular_prime;

--
-- Prime sieve
--
procedure prime_sieve(n);
    primes := [1 .. n];
    for i in [2 .. n] loop
        if primes(i) = 0 then
            continue;
        end if;
        j := 2;
        while i * j <= n loop
            primes(i * j) := 0;
            j := j + 1;
        end loop;
    end loop;

    res := {};
    for i in [2 .. n] loop
        if primes(i) > 0 then
           res with:= i;
        end if;
    end loop;

    return res;

end prime_sieve;


proc is_prime(n);
    
    if n = 2 or n = 3 then
        return(true);
    end if;
    if n mod 2 = 0 then
        return(false);
    end if;

    if exists i in [3,5..fix(sqrt(n))+1] | n mod i = 0 then
       return(false);
    end if;

    return(true);

end proc;
