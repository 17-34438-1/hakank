#!/usr/bin/env setl
-- 
-- Even or odd in SETL.
--
-- http://rosettacode.org/wiki/Even_or_odd
-- """
-- Test whether an integer is even or odd.
--
-- There is more than one way to solve this task:
--
--  * Use the even and odd predicates, if the language provides them.
--  * Check the least significant digit. With binary integers, i bitwise-and 
--    1 equals 0 iff i is even, or equals 1 iff i is odd.
--  *  Divide i by 2. The remainder equals 0 iff i is even. The remainder equals 
--    +1 or -1 iff i is odd.
--  * Use modular congruences:
--        i ≡ 0 (mod 2) iff i is even.
--        i ≡ 1 (mod 2) iff i is odd. 
-- """
--
-- This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
-- Also see my SETL page: http://www.hakank.org/setl/
--

-- built-in even/odd
print("even(10):", even(10));
print("odd(10):", odd(10));

-- bit-wise
print("even2 11", even2 11);
print("odd2 11", odd2 11);

-- modulo
print("even3 12", even3 12);
print("odd3 12", odd3 12);

-- remainder after division
print("even4 14", even4 14);
print("odd4 14", odd4 14);
print("even4 15", even4 15);
print("odd4 15", odd4 15);


-- modulo
op even2(n);
  return n mod 2 = 0;
end op;

op odd2(n);
  return n mod 2 = 1;
end op;

-- bit wise
op even3(n);
  b:=strad(n,2);
  return b(#b) = 0;
end op;

op odd3(n);
  return not(even3(n));
end op;

-- remainder after division
-- Note: not reliable for large numbers...
op even4(n);
  return 2*(n / 2) = 0;
end op;

op odd4(n);
  return not(even4(n));
end op;
