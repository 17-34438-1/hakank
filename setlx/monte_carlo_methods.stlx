// 
// Monte carlo methods in SETL.
//
// From Rosetta code: 
// http://rosettacode.org/wiki/Monte_Carlo_methods
// """
// A Monte Carlo Simulation is a way of approximating the value of a 
// function where calculating the actual value is difficult or impossible. 
// It uses random sampling to define constraints on the value and then makes 
// a sort of "best guess."
//
// A simple Monte Carlo Simulation can be used to calculate the value for π. 
// If you had a circle and a square where the length of a side of the square 
// was the same as the diameter of the circle, the ratio of the area of the 
// circle to the area of the square would be π/4. So, if you put this circle 
// inside the square and select many random points inside the square, the number 
// of points inside the circle divided by the number of points inside the square 
// and the circle would be approximately π/4.
//
// Write a function to run a simulation like this with a variable number of 
// random points to select. Also, show the results of a few different sample 
// sizes. For software where the number π is not built-in, we give π to a 
// couple of digits: 3.141592653589793238462643383280 
// """
//
// This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

sim_pi := procedure(n) {
  t1 := now();
  inside := sim(n, pi_f);
  t2 := now();
  my_pi := 4.0*inside/n;
  // pi := 4*(atan2(1.0)); // atan is not supported in SetlX
  pi := mathConst("pi");
  print("n:", n, " ", my_pi, " diff: ", pi - my_pi, " (time: ", (t2-t1)/1000.0, "s)");


};

// the simulation function: returns 1 if success, 0 otherwise
pi_f := procedure() {
  if (random()**2 + random()**2 <= 1) { return 1; } else {return 0; }
};

// simple (but general) Monte Carlo simulator
// f() is the simulation function
sim := procedure(n, f) {
  c := 0;
  for (i in [1..n]) {
    c += f(); 
  }
  return c;
};

// alternative
// note: it build a large list which makes it slower than sim()
sim2 := procedure(n, f) {
  return +/[f() : i in [1..n]];
};


print("mathConst(\"pi\"): ", mathConst("pi"));
for (n in [0..6]) {
  sim_pi(10**n);
}

