// 
// Rot-13 in SETL
//
// See 
//   http://en.wikipedia.org/wiki/ROT13
//   http://rosettacode.org/wiki/Rot-13
//
//
// This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

// Emulating SETL's v?d default operator (which is not supported in SetlX):
// returns d if v == om
qq:= procedure(v, d) {
  match(v) {
  case om: return d;
  default:  return v;
  }
};


// Rot 13 using a map
rot13 := procedure(s) {
  lower := "abcdefghijklmnopqrstuvwxyz";
  upper := "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
  m := create_map(lower, upper);
  s2 := ""+/[qq(m[c],c) : c in s];
  return s2;
};


// create the map
create_map := procedure(lower, upper) {
  m := {};
  llen := #lower;
  ldiv := #lower \ 2;
  for (i in [1..#lower]) {
    ii := (ldiv+i) % llen;
    if (ii == 0) { ii := llen; }
    m[upper[i]] := upper[ii];
    m[lower[i]] := lower[ii];
  }
  return m;
};

// create the map: alternative version 
// This don't work. SetlX has problem with the indexing of [...][i]
// create_map2 := procedure(l, u) {
//   d := #l \ 2; 
//   ll := #l;
//   return {[l[i] , [l[d+1..ll]+l[1..d]][i]] : i in[1..ll]} + 
//          {[u[i] , [u[d+1..ll]+u[1..d]][i]] : i in[1..ll]};
// };


// s := args[1] 
s := "Big fjords vex quick waltz nymph!";
s2 := rot13(s);  // rot13'ed string
s3 := rot13(s2); // back again
print(s);
print(s2);
print(s3);
print(s == s3);
