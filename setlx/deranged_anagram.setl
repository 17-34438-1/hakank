#!/usr/bin/env setl
-- 
-- Deranged anagrams in SETL.
--
-- http://rosettacode.org/wiki/Anagrams/Deranged_anagrams
-- """
-- Two or more words are said to be anagrams if they have the same characters, 
-- but in a different order. By analogy with derangements we define a deranged 
-- anagram as two words with the same characters, but in which the same character 
-- does not appear in the same position in both words.
--
-- The task is to use the word list at 
-- http://www.puzzlers.org/pub/wordlists/unixdict.txt to find and show 
-- the longest deranged anagram. 
-- """
--
--
-- This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
-- Also see my SETL page: http://www.hakank.org/setl/
--

--word_list := command_line(1) ? '/usr/share/dict/words';
--h := open(word_list, "r");
h := open('unixdict.txt', "r");

--
-- get all anagrams
--
anagrams := {};
while not eof(h) loop
  geta(h, word);
  if word = om or word = "" then
    continue;
  end if;
  sorted := insertion_sort(word);
  anagrams{sorted} with:= word;
end loop;

--
-- get the deranged anagrams
--
deranged := [];
max_len := 0;
for words = anagrams{sorted} loop
  if #words >= 2 and and/[is_deranged(w1,w2) : 
                 w1 in words, w2 in words | w1 /= w2] then
     deranged with:= words;
  end if;
end loop;

--
-- print all derangement with max word length
--
lens:=[#arb w : w in deranged]; -- length of the first word
max_val := max/lens;
ix := [i : i in [1..#lens] | lens(i) = max_val] ;
print([deranged(i) : i in ix]);

--
-- is_deranged(a,b)
--
procedure is_deranged(a,b);
  return and/[a(i) /= b(i) : i in [1..#a]];
end procedure;

procedure insertion_sort(A);
   for i in [2..#A] loop
      v := A(i);
      j := i-1;
      while j >= 1 and A(j) > v loop
        A(j+1) := A(j);
        j := j - 1;
      end loop;
      A(j+1) := v; 
   end loop;
   return A;
end procedure;

