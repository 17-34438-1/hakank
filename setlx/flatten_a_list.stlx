// 
// Flatten a list in SETL.
//
// From http://rosettacode.org/wiki/Flatten_a_list
// """
// Write a function to flatten the nesting in an arbitrary list of 
// values. Your program should work on the equivalent of this list:
//
//  [[1], 2, [[3,4], 5], [[[]]], [[[6]]], 7, 8, []]
//
// Where the correct result would be the list:
//
//   [1, 2, 3, 4, 5, 6, 7, 8]
// """
//
// This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

//
// wrapper proc
//
flatten := procedure(ll) {
  res := [];
  flatten1(ll, res);
  return res;
};

//
// flattening
//
flatten1 := procedure(ll, rw res) {
  for (l in ll) {
    if (isList(l)) {
       flatten1(l,res); 
    } else {
       res += [l];
    }
  }
};


//
// recursive version
//
flatten_rec := procedure(ll) {
  if (ll == []) {
      return []; 
  } else if (isList(ll)) {
      return flatten_rec(ll[1]) + flatten_rec(ll[2..]); 
  } else {
      return [ll];
  }

};


// recursive version using switch/case.
flatten_rec2 := procedure(ll) {
  switch {
  case ll == []  : return ([]);
  case isList(ll): return flatten_rec2(ll[1]) + flatten_rec2(ll[2..]);
  default        : return [ll];
  }
};

// recursive version using "Prolog-style" match
flatten_rec3 := procedure(ll) {
  match(ll) {
  case []    : return ([]);
  case [x|xs]: return flatten_rec3(x) + flatten_rec3(xs);
  default    : return [ll];
  }
};


// "recreational" version:
// string based solution (assumes that the elements are integers)
flatten_str := procedure(l) {
  convert := procedure(e) {
    switch {
    case int(e) != om: return int(e);
    default: return +/[i : i in e | i != "\""];
    }
  };
  p := "[],";
  return [convert(i) : i in split(+/[s : s in str(l) | s notin p], " ") | i != ""];
};


ll := [[1], 2, [[3,4], 5], [[[]]], [[[16]]], 27, 238, []];
print(ll);

print("flatten     :",flatten(ll));
print("flatten_rec :",flatten_rec(ll));
print("flatten_rec2:",flatten_rec2(ll));
print("flatten_rec3:",flatten_rec3(ll));
print("flatten_str :",flatten_str(ll));
print("flatten_str :",flatten_str([["1"], "2", [["3","4"], "5"], [[[]]], [[["16"]]], "27", "238", []]));

