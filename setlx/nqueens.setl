#!/usr/bin/env setl
-- 
-- nqueens problem in SETL
--
-- One dimensional version of N-queens problem:
-- http://en.wikipedia.org/wiki/Eight_queens_puzzle
--
-- Compare with my SetlX implementation
--  http://www.hakank.org/setl/nqueens.stlx
--
-- This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
-- Also see my SETL page: http://www.hakank.org/setl/
--

-- all solutions
-- for n in [8..10] loop;
--   t1 := time();
--   nqueens6(n);
--   t2 := time();
--   print("n:", n, "took", (t2-t1)/1000.0, "s");
-- end loop;

for n in [2..14] loop;
  t1 := time();
  sol := nqueens6_onesol(n);
  t2 := time();
  print("n:", n, "took", (t2-t1)/1000.0, "s  solution:", sol);
end loop;


--
-- all elements in x are different
--
proc all_different(x);
  -- print("all_different check:", x);
  return #x = #{i : i in x};
end proc;

--
-- next_permutation + all_different
-- generates all solutions
procedure nqueens6(n);
  c := 0;
  s := [1..n];
  q := [1..n];
  while q /= om loop;
    if 
        all_different([q(i)+i : i in s]) and
        all_different([q(i)-i : i in s])
    then                              
      -- print(q);
      c +:= 1;
    end if;
    q := next_permutation(q);
  end loop;

  print("It was", c,"solutions.");
  return c;

end procedure;

--
-- Same approach as nqueens6 but finds only the first
-- solution.
--
procedure nqueens6_onesol(n);
  c := 0;
  s := [1..n];
  q := [1..n];
  while q /= om loop;
    if 
        all_different([q(i)+i : i in s]) and
        all_different([q(i)-i : i in s])
    then                              
      return q;
    end if;
    q := next_permutation(q);
  end loop;

end procedure;


--
-- Calculates the next permutation for p
--
procedure next_permutation(p);
    n := #p;
    k := n - 1;
    while p(k) > p(k+1) loop 
        k := k - 1; 
        if k = 0 then 
           return om;
        end if;
    end loop;
    if k = 0 then 
        return om;
    else
         j := n;
         while p(k) > p(j) loop j := j - 1; end loop;
         [p(k),p(j)] := [p(j), p(k)];
         r := n; 
         s := k + 1;
         while r > s loop
              [p(r),p(s)] := [p(s),p(r)];
              r := r - 1; 
              s := s + 1;
         end loop;
    end if;
    return p;
end procedure;
