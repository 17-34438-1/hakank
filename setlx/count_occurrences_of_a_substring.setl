#!/usr/bin/env setl
-- 
-- Count occurrences of a substring in SETL
-- 
-- From
-- http://rosettacode.org/wiki/Count_occurrences_of_a_substring
-- """
-- The task is to either create a function, or show a built-in function, 
-- to count the number of non-overlapping occurrences of a substring 
-- inside a string. The function should take two arguments: the first 
-- argument being the string to search and the second a substring to be 
-- search for. It should return an integer count.
-- 
-- print countSubstring("the three truths","th")
-- 3
--
-- // do not count substrings that overlap with previously-counted substrings:
-- print countSubstring("ababababab","abab")
-- 2
--
-- The matching should yield the highest number of non-overlapping matches. 
-- In general, this essentially means matching from left-to-right or 
-- right-to-left (see proof on talk page).
-- """
--
-- This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
-- Also see my SETL page: http://www.hakank.org/setl/
--

print(count_substrings("the three truths", "th"));
print(count_substrings("ababababab", "abab"));
print(count_substrings("aaaaaaaaaaa", "aa"));
print(count_substrings("aaaaaaaaaaa", "c"));

-- gmark returns a list of all non-overlapping substrings
-- (a list of indices [from to])
print();
print(gmark("the three truths","th"));
print(#gmark("the three truths","th"));
print(#gmark("ababababab","abab"));
print(#gmark("aaaaaaaaaaa","aa"));
print(#gmark("aaaaaaaaaaa","c"));

proc count_substrings(s, sb);
  c := 0;
  i := 1;
  while i < #s loop
    if s(i..i+#sb-1) = sb then 
      c +:= 1;
      i +:= #sb;
    else 
      i +:= 1;
    end if;
  end loop;

  return c;
end proc;

