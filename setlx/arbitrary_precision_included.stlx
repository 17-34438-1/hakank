// 
// Arbitrary precision in SetlX
//
// From Rosetta code:
// http://rosettacode.org/wiki/Arbitrary-precision_integers_%28included%29
// """ 
// Using the in-built capabilities of your language, calculate the 
// integer value of:
//
//     5^{4^{3^2}} 
//
//  Confirm that the first and last twenty digits of the answer are: 
// 62060698786608744707...92256259918212890625
//
//    Find and show the number of decimal digits in the answer. 
// 
// C.F. Long multiplication
// Note:
// *  Do not submit an implementation of arbitrary precision arithmetic. 
//    The intention is to show the capabilities of the language as 
//    supplied. If a language has a single, overwhelming, library of 
//    varied modules that is endorsed by its home site – such as CPAN 
//    for Perl or Boost for C++ – then that may be used instead.
// *  Strictly speaking, this should not be solved by fixed-precision 
//    numeric libraries where the precision has to be manually set to 
//    a large value; although if this is the only recourse then it may 
//    be used with a note explaining that the precision must be set 
//    manually to a large enough value.
// """
//
// This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

assertx := procedure(a, b) {
     return a == b;
};

t1:=now();
s:=str(5**4**3**2); 
t2:=now(); 
print(s[1..20],"...",s[#s-19..#s], "  Num digits: $#s$. Time: $t2-t1$ms");

print(assertx(s[1..20] + "..." + s[#s-19..#s], "62060698786608744707...92256259918212890625"));

