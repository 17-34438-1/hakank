// 
// Evolutionary algorithm in SetlX
// 
// http://rosettacode.org/wiki/Evolutionary_algorithm
// """
// Starting with:
//
//  * The target string: "METHINKS IT IS LIKE A WEASEL".
//  * An array of random characters chosen from the set of upper-case 
//    letters together with the space, and of the same length as the 
//    target string. (Call it the parent).
//  * A fitness function that computes the ‘closeness’ of its argument 
//    to the target string.
//  * A mutate function that given a string and a mutation rate returns 
//    a copy of the string, with some characters probably mutated.
//  * While the parent is not yet the target: 
//     * copy the parent C times, each time allowing some random 
//       probability that another character might be substituted using mutate.
//     * Assess the fitness of the parent and all the copies to the 
//       target and make the most fit string the new parent, discarding 
//       the others.
//     * repeat until the parent converges, (hopefully), to the target. 
// """
//
// This solution was inspired the Icon/Unicon solution:
// http://rosettacode.org/wiki/Evolutionary_algorithm#Icon_and_Unicon
//
//
// This SetlX program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

// global variables
var target, chars, parent, cc, mm, current_fitness;

// An expression version of 
//     if(c) { return t; } else { return e;}
if2 := procedure(c, t, e) {
  if (c) { return t; } else { return e; }
};

// Increment the fitness for every position in the string 
// s that matches the target
fitness := procedure(s) {
  return 0+/[if2(s[i] == target[i], 1, 0) : i in [1..#target] ];
};

// If a random number between 0 and 1 is inside the 
// bounds of mutation randomly alter a character in the string  
mutate := procedure(s) {
  if (random() <= mm) {
    s[rnd([1..#s])] := chars[rnd([1..#chars])];
  }
  return s;
};


// Create the next population of parent
generation := procedure() {
  population := [mutate(parent) : i in [1..cc]];
  // Find the member of the population with highest fitness, 
  // or use the last one inspected
  next_parent := "";
  next_fitness := -1;
  for (p in population[2..#population]) {    
    xf := fitness(p);
    if (xf > next_fitness) {
      next_parent  := p;
      next_fitness := xf;
    }
  }

  parent := next_parent; 
  return next_fitness;

};


my_rand := procedure(n) {
  return rnd([1..n]);
};


 // Our target string
target := "METHINKS IT IS LIKE A WEASEL";
chars := "ABCDEFGHIJKLMNOPQRSTUVWXYZ "; // Set of usable characters

if (exists(i in [1..#target] | target[i] notin chars)) {
  print("The character", t, "is not in the character set: ", chars);
  stop;
}

// generate a random string to start with
parent := ""+/[chars[rnd([1..#chars])] : i in [1..#target]];
current_fitness := fitness(parent); //The best fitness we have so far.
cc := 50;   // Population size in each generation
mm := 0.5;  // Mutation rate per individual in a generation
 
// Until current fitness reaches a score of perfect match 
// with the target string keep generating new populations
fitnesses := [];
current_fitness := generation();
gen := 1;
while (current_fitness != #target) {
  print(gen, ":" , current_fitness, " ", parent);
  fitnesses += [current_fitness];
  gen += 1;
  current_fitness := generation();
}

print(gen, ":" , current_fitness, " ", parent);
print("Found a perfect fitness $current_fitness$ at generation $gen$");
print("Fitnesses:", fitnesses);

