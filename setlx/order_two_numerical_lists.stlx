// 
// Order two numerical lists in SETL.
//
// http://rosettacode.org/wiki/Order_two_numerical_lists
// """
// Write function that orders two lists or arrays filled with numbers. The function 
// should accept two lists as arguments and return true if the first list should be 
// ordered before the second, and false otherwise.
//
// The order is determined by lexicographic order: Comparing the first element of 
// each list. If the first elements are equal, then the second elements should be 
// compared, and so on, until one of the list has no more elements. If the first 
// list runs out of elements the result is true. if the second list or both run 
// out of elements the result is false. 
// """
//
// This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

// SetlX has built in support for array comparison:
// if a  < b -> < 0
// if a == b -> == 0
// if a  > b -> > 0
print("compare([1,2,3,4,5],[2,3,4]): ", compare([1,2,3,4,5],[2,3,4]));

r := [1..1000];
a := [rnd(r) : i in [1..1000]];
b := [rnd(r) : i in [1..1000]];

print("random arrays: a cmp b: ", compare(a,b));
print("a[1..10]: ", a[1..10]);
print("b[1..10]: ", b[1..10]);

// Example from Ada's solution
l := [[1, 2, 3, 4, 5],
      [1, 2, 1, 5, 2, 2],
      [1, 2, 1, 5, 2],
      [1, 2, 1, 5, 2],
      ["Cat", "Elephant", "Rat", "Cat"],
      ["Cat", "Elephant", "Rat"],
      ["Cat", "Cat", "Elephant"]
      ];
 
for (i in [1..#l-1]) {
  if (isInteger(l[i][1]) == isInteger(l[i+1][1])) {
    print(l[i], " cmp ", l[i+1], ": ", compare(l[i], l[i+1]));
  }
}

