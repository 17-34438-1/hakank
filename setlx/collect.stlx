// 
// Collect occurrences in SETL
//
//
// This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

//
// Collect:
// return a map with counts of the occurrences of 
// each items in tuple a
//

ifc := procedure(c) { if (c == om) { return 1; } else { return c+1; } };

// tini bit slower than ifc
ifc2 := procedure(c) { 
  match(c) {
   case om: return 1;
  default: return c+1;
  }
};

// 7.042s on [rnd({1..10}) : i in [1..1000000]]
//    Generation: 2196ms collect: 5003ms
// 53.991s on [rnd({1..100}) : i in [1..1000000]]
//    Generation: 18375ms collect: 37316ms

// Using rnd([1..n]) instead is much faster:
// 6.607s on [rnd([1..100]) : i in [1..1000000]]
//    Generation: 1431ms collect: 4874ms
// 42.981s on [rnd([1..100]) : i in [1..1000000]]
//    Generation: 6495ms collect: 36173ms
collect := procedure(a) {
  s := {i : i in a}; // unique values
  return { [i, #[j : j in [1..#a] | a[j] == i ]] :  i in s}; 
};


// Faster than collect: 
// 5.777s on [rnd({1..10}) : i in [1..1000000]]
//   Generation: 2165ms collect: 3498ms
// 22.316s on [rnd({1..100}) : i in [1..1000000]]
//   Generation: 17604ms collect: 4550mas

// Using rnd([1..n]) instead is much faster:
// 4.916s on [rnd([1..100]) : i in [1..1000000]]
//    Generation: 1457ms collect: 3176ms
// 11.088s on [rnd([1..100]) : i in [1..1000000]]
//    Generation: 6385ms collect: 4394ms
collect2 := procedure(a) {
  c := {}; 
  for (i in a) {
    if (c[i] == om) {
      c[i] := 1; 
    } else {
      c[i] += 1;
    }
  }
  return c; 
};

// 5.595s on [rnd({1..10}) : i in [1..1000000]]
//    Generation: 2155ms collect: 3310ms
// 22.045s on [rnd({1..100}) : i in [1..1000000]]
//    Generation: 18245ms collect: 4449ms
// 
// Using rnd([1..n]) instead is much faster:
// 4.806s on [rnd([1..10]) : i in [1..1000000]]
//    Generation: 1481ms collect: 3039ms
// 11.467s on [rnd([1..100]) : i in [1..1000000]]
//    Generation: 6560ms collect: 4590ms
collect2b := procedure(a) {
  c := {}; 
  for (i in a) {
    c[i] := ifc(c[i]);
  }
  return c; 
};

// as a one-liner for the shell
// 
// ifc := procedure(c) { if (c == om) { return 1; } else { return c+1; } };
// collect2b := procedure(a) { c := {}; for (i in a) { c[i] := ifc(c[i]); } return c; };


t1 := now();
s := [1..100];
s2 := [1..1000000];
a := [rnd(s) : i in s2];
t2 := now();
m := collect2b(a);
t3 := now();
print(m);
print("Generation: $t2-t1$ms collect: $t3-t2$ms");

print("range(m): ",range(m));
print("domain(m): ",domain(m));

