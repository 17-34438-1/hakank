load("sort_utils.stlx");

generate_string_arrays := procedure(num_elements, max_len) {
  //alpha := "abcdefghijklmnopqrstuvxyzåäö";
  alpha := "abcdefghijklmnopqrstuvxyz";
  tt := [];
  for (i in [1..num_elements]) {
    r := "";
    rlen := random_int(max_len);
    for (j in [1..rlen]) {
      rr := random_int(#alpha);
      r +=alpha[rr];
    }
    tt += [r];
  }
  return tt;
};

a:= "ceasar";
b:= "adam";
print(compare(a,b));

print("\nTesting qsort:");
t1 := ["ceasar", "adam", "christine", "anna", "hakank", "adam", "isaac"];
print(qsort(t1));
t2 := [[4,5,6],[1,2,3],[9],[7,8]];
print(qsort(t2));
t3 := [4,5,6,1,2,3,9,7,8];
print(qsort(t3));
t4 := [[4,5],[6,1],[2,3],[9,7],[8,12]];
print(qsort(t4));

t5 := [4.1,5.2,6.4,1.1,2.6,3.2,9.3,7.3,8.4];

print(qsort(t1));
print(qsort(t2));
print(qsort(t3));
print(qsort(t4));
print(qsort(t5));

// generate a larger string array
t6 := generate_string_arrays(10,10);
print(qsort(t6));

print("\nTesting insertion sort:");
print(insertion_sort(t1));
print(insertion_sort(t2));
print(insertion_sort(t3));
print(insertion_sort(t4));
print(insertion_sort(t5));
print(insertion_sort(t6));

print("\nCompare qsort and insertion_sort on large string arrays:");
t7 := generate_string_arrays(1000,100);
t1 := now();
qsort(t7);
t2 := now();
print("qsort took $t2-t1$ms");
insertion_sort(t7);
t3 := now();
print("insertion_sort took $t3-t2$ms");