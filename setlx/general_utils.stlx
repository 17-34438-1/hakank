//
// General utilities
//


english := procedure(n) {

    // divs      :=  [1.0E9, 1.0E6, 1.0E3, 1.0E2];
    divs      :=  [1000000000, 1000000,  1000,       100];
    divnames  :=  ["billion", "million", "thousand", "hundred"];
    prefixes  :=  ["0", "twen", "thir", "for", "fif", "six", "seven", "eigh", "nine"];
    ordinals  :=  ["first", "second", "third", "fourth", "fifth", "sixth", "seventh",
                   "eighth", "ninth", "tenth", "eleventh", "twelfth", "thirteenth", "fourteenth",
                   "fifteenth", "sixteenth", "seventeenth", "eighteenth", "nineteenth"];
    cardinals :=  ["one", "two", "three", "four", "five", "six", "seven",
                   "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen",
                   "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"];

    sstr := "";
    printed := false;
    if (n < 0) {
        sstr := "minus" + sstr;
        n := -n;
    }

    for (i in [1..#divs]) {
        d := n \ divs[i];
        n := n % divs[i];
        if (d != 0) {
	    sstr += english(d);
            sstr += divnames[i];
	    printed := true;
        }
    }

    if (n > 0 && printed) {
        sstr := sstr + "and";
    }

    if (n == 0) {
        p := p; // dummy
    } else if (n > 19) {
        d := n \ 10;
        n := n % 10;
        sstr += prefixes[d];
        sstr += "ty";
        sstr += english(n);
    } else {
        sstr += cardinals[n];
    }

    return sstr;

};


//
// Converting Julian date <-> Gregorian date from:
// http://www.hermetic.ch/cal_stud/jdn.htm
//
date2julian := procedure(y,m,d) {
    jd := ( 1461 * ( y + 4800 + ( m - 14 ) \ 12 ) )  \  4 +
          ( 367 * ( m - 2 - 12 * ( ( m - 14 )  \  12 ) ) )  \  12 -
          ( 3 * ( ( y + 4900 + ( m - 14 )  \  12 )  \  100 ) )  \  4 +
          d - 32075;
    return jd;
};


//
// Julian date to Gregorian date
//
julian2date := procedure(jd) {
    l := jd + 68569;
    n := ( 4 * l )  \  146097;
    l := l - ( 146097 * n + 3 )  \  4;
    i := ( 4000 * ( l + 1 ) )  \  1461001;
    l := l - ( 1461 * i )  \  4 + 31;
    j := ( 80 * l )  \  2447;
    d := l - ( 2447 * j )  \  80;
    l := j  \  11;
    m := j + 2 - ( 12 * l );
    y := 100 * ( n - 49 ) + i + l;
    return [y, m, d];
};


//
// Day of week, Sakamoto's method
// http://en.wikipedia.org/wiki/Weekday_determination#Sakamoto.27s_Method
//
dow_hash := {[0,"sun"],
             [1,"mon"],
             [2,"tue"],
             [3,"wed"],   
             [4,"thu"],
             [5,"fri"],
             [6,"sat"]};

dow := procedure(y, m, d) {
   t := [0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4];
   if (m < 3) {
      y := y-1;
   }
   return (y + y \ 4 - y \ 100 + y \ 400 + t[m] + d) % 7;
};

next_permutation := procedure(p) {
    n := #p;
    k := n - 1;
    while (p[k] > p[k+1]) {
        k := k - 1; 
        if (k == 0) {
           return om;
        }
    }
    if (k == 0) {
        return om;
    } else {
         j := n;
         while (p[k] > p[j]) { j := j - 1; }
         [p[k],p[j]] := [p[j], p[k]];
         r := n; 
         s := k + 1;
         while (r > s) {
              [p[r],p[s]] := [p[s],p[r]];
              r := r - 1; 
              s := s + 1;
         }
    }
    return p;

};

// Permutations (exhaustive)
perms := procedure(s) {
  if (s == []) {
    return [[]];
  } else {
    return [ [a]+b : a in s, b in perms([ p in s | p != a]) ];
  }

};


// reduce (or fold)
// Usage: reduce(function, array)
reduce := procedure(f, a) {
  tmp := a[1];
  for (i in [2..#a]) {
    tmp := f(a[i], tmp);
  }
  return tmp;
};


//
// timeit(proc) 
// where proc is a string
//
timeit := procedure(ps) {
   t1  := now();
   res := eval(ps);
   t2  := now();

   return [t2-t1, res];
};


// The subsets of set of size size
// npow(set, size) 
// npow(size, set)
// 
// From Robert B. K. Dewar: "The SETL Programming Language", page 104
// 
npow := procedure (a,b) {
  switch {
     case (isInteger(a) && isSet(b)):
         return {x in pow(b) | #x == a};
     case (isSet(a) && isInteger(b)):
         return {x in pow(a) | #x == b};
    }
};

// Is s1 a subset of s2?
// From Robert B. K. Dewar: "The SETL Programming Language", page 107
subset := procedure(s1, s2) {
  if (isSet(s1) && isSet(s2)) {
    return forall(x in s1 | x in s2);
  }
};

// Is s1 a super set of s2
// From Robert B. K. Dewar: "The SETL Programming Language", page 102
incs := procedure(s1,s2) {
   if (isSet(s1) && isSet(s2)) {
     return forall(x in s2 | x in s1);
   }
};

// All subtuples of tuple (array) t
// http://quincy.inria.fr/data/courses/hpl2000/setl-progs/subtuple.stl.html
subtuples := procedure(t) {
    var s;
    if (t == []) {
        return {[]};
    } else {
        s := subtuples(t[2..]);
        return (s + { [t[1]] + y : y in s});
    }
};


//
// tests is a tuple of strings (functions), e.g.
//   tests := ["2+2","perms([1..3])"];
//
testit := procedure(tests) {
  for (t in tests) {
    try {
        print(t, ": ", eval(t)); 
    } catch(error) {
      print("Error: ", error);
    }
  }
};


// argMax|argMin
argM := procedure(a, f) {
  return [i : i in [1..#a] | a[i] == f(a)];
};


argMax := procedure(a) {
  return argM(a, max);
};

argMin := procedure(a) {
  return argM(a, min);
};
