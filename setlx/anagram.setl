#!/usr/bin/env setl
-- 
-- Anagrams in SETL.
--
-- This version checks anagram for a single word from the command lines,
-- (default "later"). Default word list is /usr/dict/words. 
--
-- Syntax:
--    setl anagram2.setl 
--    setl anagram2.setl some_word
--    setl anagram2.setl some_word some_word_list
--
--
-- Compare with http://www.hakank.org/setl/anagrams.setl which
-- finds the largest set of anagrams from a word list.
--
--
-- This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
-- Also see my SETL page: http://www.hakank.org/setl/
--

anagram := command_line(1) ? "later";
anagram := to_lower(anagram);
word_size := #anagram;
-- sorted := qsort(anagram);
sorted := insertion_sort(anagram);

file := command_line(2) ? '/usr/dict/words';
h := open(file, "r");

anagrams := {anagram};
while not eof(h) loop
  geta(h, word);
  if word = om or #word /= word_size then
    continue;
  end if;

  --sorted2 := qsort(word);
  sorted2 := insertion_sort(word);
  if sorted2 = sorted then
    anagrams with:= word;
    print(word);
  end if;
end;

print("Anagrams on", anagram, ": ", anagrams);


--
-- Quick sort
--
proc qsort(a);
  if #a > 1 then
    pivot := a(#a div 2 + 1);
    a := qsort([x in a | x < pivot]) +
         [x in a | x = pivot] +
         qsort([x in a | x > pivot]);
  end if;
  return a;
end proc;


--
-- insertion sort
--
-- Inspired by 
-- http://en.wikipedia.org/wiki/Insertion_sort
--
procedure insertion_sort(A);
   for i in [2..#A] loop
      v := A(i);
      j := i-1;
      while j >= 1 and A(j) > v loop
        A(j+1) := A(j);
        j := j - 1;
      end loop;
      A(j+1) := v; 
   end loop;

   return A;

end procedure;
