#!/usr/bin/env setl
-- 
-- Monte carlo methods in SETL.
--
-- From Rosetta code: 
-- http://rosettacode.org/wiki/Monte_Carlo_methods
-- """
-- A Monte Carlo Simulation is a way of approximating the value of a 
-- function where calculating the actual value is difficult or impossible. 
-- It uses random sampling to define constraints on the value and then makes 
-- a sort of "best guess."
--
-- A simple Monte Carlo Simulation can be used to calculate the value for π. 
-- If you had a circle and a square where the length of a side of the square 
-- was the same as the diameter of the circle, the ratio of the area of the 
-- circle to the area of the square would be π/4. So, if you put this circle 
-- inside the square and select many random points inside the square, the number 
-- of points inside the circle divided by the number of points inside the square 
-- and the circle would be approximately π/4.
--
-- Write a function to run a simulation like this with a variable number of 
-- random points to select. Also, show the results of a few different sample 
-- sizes. For software where the number π is not built-in, we give π to a 
-- couple of digits: 3.141592653589793238462643383280 
-- """
--
-- This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
-- Also see my SETL page: http://www.hakank.org/setl/
--

setrandom(0);
for n in [0..8] loop
  sim_pi(10**n);
end loop;

proc sim_pi(n);
   t1 := time();
   inside := sim(n, routine pi_f);
   t2 := time();
   my_pi := 4*inside/n;
   pi := 4*(1 atan2 1.0);
   print("n:", n, my_pi, " diff:", pi - my_pi, " (time: ", (t2-t1)/1000.0, "s)");

end proc;

-- the simulation function
proc pi_f();
  return if random(1.0)**2 + random(1.0)**2 <= 1 then 1 else 0 end if;
end proc;

-- simple (but general) Monte Carlo simulator
proc sim(n, f);
  c := 0;
  for i in [1..n] loop
    c +:= call(f); 
  end loop;
  return c;
end proc;

-- alternative
proc sim2(n, f);
  return +/[call(f) : i in [1..n]];
end proc;
