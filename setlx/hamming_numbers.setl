-- Specification from
-- http://rosettacode.org/wiki/Hamming_numbers
-- """ 
-- Hamming numbers are numbers of the form
--
-- H = 2^i . 3^j . 5^k where} i, j, k > 0. 
--
-- Generate the sequence of Hamming numbers, in increasing order. In particular:
--
--   1. Show the first twenty Hamming numbers.
--   2. Show the 1691st Hamming number (the last one below 2^31).
--   3. Show the one millionth Hamming number (if the language - 
--      a convenient library -upports arbitrary-precision integers). 
-- """

-- The result should be:
-- 1 2 3 4 5 6 8 9 10 12 15 16 18 20 24 25 27 30 32 36 
-- 2125764000
-- 519312780448388736089589843750000000000000000000000000000000000000000000000000000000
--

print("hamming:");
print([hamming(i) : i in [1..20]]);
print(hamming(1691));
-- t1 := time();
-- print(hamming(1000000));
-- print("hamming(1000000) took ", (time()-t1)/1000.0, "seconds"); -- too slow

print("\nhamming2:");
print([hamming2(i) : i in [1..20]]);
print(hamming2(1691));
t1 := time();
print(hamming2(1000000));
print("hamming2(1000000) took ", (time()-t1)/1000.0, "seconds"); -- 4.488s


-- slower
procedure hamming(n);
  q := {1,2,3,5};
  low := 1;
  for i in [1..n] loop;
    q less:= (low := min/q);
    q +:= {low*2, low*3, low*5};
  end for; 

  return low;

end procedure;


-- Much faster
procedure hamming2(n);

  h := [];
  [next2,next3,next5] := [2,3,5];
  i := j := k := 0; -- counters
  m := 1;
  while m < n loop;
    h(m) := min/[next2,next3,next5];
    -- Note that we might update more than one counters
    if h(m) = next2 then i+:=1; next2 := 2*h(i); end if;
    if h(m) = next3 then j+:=1; next3 := 3*h(j); end if;
    if h(m) = next5 then k+:=1; next5 := 5*h(k); end if;
    m +:= 1;
  end while;

  hh := [1] + h; -- adjust for 1-based
  return hh(n);

end procedure;
