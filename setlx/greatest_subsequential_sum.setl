#!/usr/bin/env setl
-- 
-- Greatest subsequential sum in SETL.
--
-- From http://rosettacode.org/wiki/Greatest_subsequential_sum
-- """
-- Given a sequence of integers, find a continuous subsequence which maximizes 
-- the sum of its elements, that is, the elements of no other single 
-- subsequence add up to a value larger than this one. An empty subsequence 
-- is considered to have the sum 0; thus if all elements are negative, the 
-- result must be the empty sequence. 
-- """
--
-- This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
-- Also see my SETL page: http://www.hakank.org/setl/
--

--
-- some test cases
--
aa := [
       [-1 , -2 , 3 , 5 , 6 , -2 , -1 , 4 , -4 , 2 , -1],
       [-1,-2, 3],
       [-1,-2],
       [0],
       []];

for a in aa loop
   print("Testing:", a);
   [maxsum,beginmax, endmax, seq] :=  greatest_subsequential_sum(a);
   print("maxsum:",maxsum,"begin:",beginmax, "end:",endmax, "seq:",seq);
   [maxsum,beginmax, endmax, seq] :=  greatest_subsequential_sum2(a);
   print("maxsum:",maxsum,"begin:",beginmax, "end:",endmax, "seq:",seq);
end loop;


procedure greatest_subsequential_sum(a);
  if a = [] then return [0,1,1,[]]; end if;
  length := #a;
  sum := 0;
  beginmax := 0;
  endmax := -1;
  maxsum := 0;
  for begin in [1..length] loop
    sum := 0;
    for xend in [begin..length] loop
        sum +:= a(xend);
        if sum > maxsum then
           maxsum := sum;
           beginmax := begin;
           endmax := xend;
        end if;
    end loop;
  end loop;
  if maxsum > 0 then
    return [maxsum, beginmax, endmax, a(beginmax..endmax)];
  else 
    return [0,1,1,[]];
  end if;
end procedure;

--
-- alternative version: 
--  first build a map with all the combinations
--  then pick the one with greatest sum
--
procedure greatest_subsequential_sum2(a);
  if a = [] then return [0,1,1,[]]; end if;
  p := { [+/a(b..e), [b,e]] : b in [1..#a], e in [b..#a]};
  [b,e]:=p(total:=max/[pp : [pp,be] in p]);
  if total > 0 then
    return [total, b, e, a(b..e)];
  else 
    return [0,1,1,[]];
  end if;
end procedure;


