// 
// 99 bottles of beer in SetlX
// 
// From
// http://rosettacode.org/wiki/99_Bottles_of_Beer
// """
// 99 Bottles of Beer

// In this puzzle, write code to print out the entire "99 bottles of 
// beer on the wall" song. For those who do not know the song, the lyrics 
// follow this form:
//
// X bottles of beer on the wall
// X bottles of beer
// Take one down, pass it around
// X-1 bottles of beer on the wall
//
// X-1 bottles of beer on the wall
// ...
// Take one down, pass it around
// 0 bottles of beer on the wall
//
// Where X and X-1 are replaced by numbers of course. Grammatical support for 
// "1 bottle of beer" is optional. As with any puzzle, try to do it in as 
// creative/concise/comical a way as possible (simple, obvious solutions allowed, too).
//-
// See also: http://99-bottles-of-beer.net/ 
// """

//
// These variant are based on my GNU SETL program:
//   http://www.hakank.org/setl/99_bottles_of_beer.setl
// (and that's why I use the if3 thing...)
// 

//
// This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

//
// standard loop version
//
p1 := procedure() {
  beer := 99;
  while (beer > 0) {
    print(beer, " bottles of beer on the wall,");
    print(beer, " bottles of beer.\n");
    print("Take one down, pass it around.");
    print(beer-1, " bottles of beer on the wall.\n");
    beer -= 1;
  }
  print("0 more bottles of beer on the wall.");

};

//
// A helper function: makes if..then an expression.
//
if3 := procedure(c, t) { if (c) { return t; } };


// 
// Alternative
// 
p2 := procedure(b) {
  bb := " bottle";
  bt := bb; 
  if (b > 1) { 
     bb += "s";
  }
  ob := " of beer";
  nl := "\n";
  bw := ob + " on the wall." + nl;
  ob := ob + nl;
  t := "Take one down, pass it around." + nl;

  return b + bt + bw + b + bt + ob + t + 
        if3(b > 0, (b-1) + bt + bw + nl);

};

//
// Recursive version, using p2 for the text.
//
p3 := procedure(b) {
  if (b == 0) { return ""; }
  return p2(b) + p3(b-1);
};


// standard version
print("p1:");
p1();

// Alternative version
print("\np2:");
n := 99;
print(+/[p2(beer) : beer in [n,n-1..1]]);

print("\np3:");
print(p3(99));

