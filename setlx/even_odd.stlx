// 
// Even or odd in SETL.
//
// http://rosettacode.org/wiki/Even_or_odd
// """
// Test whether an integer is even or odd.
//
// There is more than one way to solve this task:
//
//  * Use the even and odd predicates, if the language provides them.
//  * Check the least significant digit. With binary integers, i bitwise-and 
//    1 equals 0 iff i is even, or equals 1 iff i is odd.
//  *  Divide i by 2. The remainder equals 0 iff i is even. The remainder equals 
//    +1 or -1 iff i is odd.
//  * Use modular congruences:
//        i ≡ 0 (mod 2) iff i is even.
//        i ≡ 1 (mod 2) iff i is odd. 
// """
//
// This SETL program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//

// modulo
even := procedure(n) {
  return n % 2 == 0;
};

odd := procedure(n) {
  return n % 2 == 1;
};

even2 := procedure(n) {
  return !odd(n);
};

odd2 := procedure(n) {
  return !even(n);
};

odd3 := procedure(n) {
  match(n % 2) {
    case 1: return true;
    case 0: return false;
  }
};
even3 := procedure(n) { return !odd3(n);};

print("even 11: ", even(11));
print("odd  11: ", odd(11));

print("even2 12: ", even2(12));
print("odd2  12: ", odd2(12));

print("even3 12: ", even3(12));
print("odd3  12: ", odd3(12));
