// 
// Combinations in SetlX.
//
// http://rosettacode.org/wiki/Combinations
// """
// Given non-negative integers m and n, generate all size m combinations of the 
// integers from 0 to n-1 in sorted order (each combination is sorted and the 
// entire table is sorted).
//
// For example, 3 comb 5 is
// 
// 0 1 2
// 0 1 3
// 0 1 4
// 0 2 3
// 0 2 4
// 0 3 4
// 1 2 3
// 1 2 4
// 1 3 4
// 2 3 4
// 
// If it is more "natural" in your language to start counting from 1 instead of 0 
// the combinations can be of the integers from 1 to n. 
// """
//
// This SetlX program was created by Hakan Kjellerstrand (hakank@bonetmail.com)
// Also see my SETL page: http://www.hakank.org/setl/
//



// SetlX don't have SETL's npow operator, so we can't do this:
//   print(3 npow {0..4});

// Instead we use the "full" power function  and restrict
// to those of size k. Also, we convert to a list (instead
// of a set).
comb := procedure(k, n) {
  return [[j : j in i] : i in pow({1..n}) | #i==k ];
};


// Inspired by the Pure program:
// http://rosettacode.org/wiki/Combinations#Pure
//
// comb m n = comb m (0..n-1) with
//   comb 0 _ = [[]];
//   comb _ [] = [];
//   comb m (x:xs) = [x:xs | xs = comb (m-1) xs] + comb m xs;
// end;
// comb 3 5;
//
comb2 := procedure(m, n) {

  comb2b := procedure(m, x) {
    if (m == 0) {
      return [[]];
    } else if (x == []) {
      return [];
    } else {
      return [ [x[1]] + xs : xs in comb2b(m-1, x[2..]) ] + comb2b(m, x[2..]);
    }
  };

  return comb2b(m,[1..n]);
};

// using Prolog style matching
comb3 := procedure(m,n) {

  comb3b := procedure(m, x) {
    match(m) {
    case 0: return [[]];
    }
    match(x) {
    case []: return [];
    case [y|ys]: return [ [y] + ys2 : ys2 in comb3b(m-1, ys) ] + comb3b(m, ys);
    }
  };

  return comb3b(m,[1..n]);
};

// Inspired by the Pascal version
// http://rosettacode.org/wiki/Combinations#Pascal
comb4 := procedure(m, n) {
  var combination;
  var combinations;

  generate := procedure(m, m_max, n_max) {
    if (m > m_max) {
      combinations += [combination];
    } else {
      for(n in [1..n_max]) {
        if (m == 1 || n > combination[m-1]) {
          combination[m] := n;
          generate(m + 1, m_max, n_max);
        }
      }
    }
  };

  combination := [0 : i in [1..m]];
  combinations := [];
  generate(1, m, n); 
  return combinations;

};


// Inspired by the Rexx version: print the permutation of a list
comb5 := procedure(m, n, list) { 
  return [ [list[p[i]] : i in [1..#p]] : p in comb(m,n)];
};


print("comb(3,5):");
[print(c) : c in comb(3,5)];

print("comb2(3,5): $comb2(3,5)$");
print("comb3(3,5): $comb3(3,5)$");
print("comb4(3,5): $comb4(3,5)$");
list := ["a","b","c","d","e"];
print("comb5(3,5,$list$): $comb5(3,5,list)$");


// print("\nNumber of different combinations in comb([0..15], 15):");
// for (k in [0..15]) {
//   print("#comb($k$,15): $#comb(k,15)$");
// }

