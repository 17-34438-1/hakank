/*

  SEND+MORE=MONEY in Picat.

  Solve the alphametic problem 
    SEND+MORE=MONEY
  using distinct digits for the letters.

  sendmore and sendmore2 are using base 10, and sendmore_base
  use "any" base.

  Model created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/

import cp.


main => go.

go =>
        time2(sendmore(Digits)),
        writeln(Digits).

go2 => 
        sendmore2(Digits),
        writeln(Digits).

go3 =>
        Base = 10,
        sendmore_base(Digits, Base),
        writeln(Digits).

%
% Check the number of solutions for different bases.
%
go4 =>
        Lens = [],
        foreach(Base in 2..30)
              writef("Base: %d\n", Base),
              All = findall(Digits, sendmore_base(Digits, Base)),
              Len = length(All),
              Lens := Lens ++ [Len]
        end,
        writef("All lengths: %w\n", Lens).

go5 => 
   sendmore_carry(_Digits,_Carry),
   nl.


scalar_product(A, X,Product)  => 
   Product #= sum([S : I in 1..A.length, S #= A[I]*X[I]]).


%
% Standard problem (in base 10)
%
sendmore(Digits) =>

        Digits = [S,E,N,D,M,O,R,Y],
        Digits :: 0..9,

        % all_different(Digits),
        all_distinct(Digits),
        S #> 0,
        M #> 0,
                     1000*S + 100*E + 10*N + D
        +            1000*M + 100*O + 10*R + E
        #= 10000*M + 1000*O + 100*N + 10*E + Y,
        
        println([s=S,e=E,n=N,d=D,m=M,o=O,r=R,y=Y]),
        println([s=S.fd_dom(),e=E.fd_dom(),n=N.fd_dom(),d=D.fd_dom(),m=M.fd_dom(),o=O.fd_dom(),r=R.fd_dom(),y=Y.fd_dom()]),
        % println(1000*S + 100*E + 10*N + D
        %  +            1000*M + 100*O + 10*R + E
        % #= 10000*M + 1000*O + 100*N + 10*E + Y),

        solve([ffd],Digits).


%
% Using scalar_product
%
sendmore2(Digits) =>

        Digits = [S,E,N,D,M,O,R,Y],
        Digits :: 0..9,

        all_different(Digits),

        S #> 0,
        M #> 0,

        Base4 = [1000,100,10,1],
        Base5 = [10000,1000,100,10,1],
        scalar_product(Base4, [S,E,N,D], SEND),
        scalar_product(Base4, [M,O,R,E], MORE),
        scalar_product(Base5, [M,O,N,E,Y], MONEY),
        SEND + MORE #= MONEY,
        println([s=S,e=E,n=N,d=D,m=M,o=O,r=R,y=Y]),

        solve(Digits).


%
% Solve the SEND + MORE = MONEY problem in base Base
%
sendmore_base(Digits, Base) =>

        Digits = [S,E,N,D,M,O,R,Y],
        Base2 = Base - 1,
        Digits :: 0..Base2,

        all_different(Digits),
        S #> 0,
        M #> 0,
                       Base**3*S + Base**2*E + Base*N + D
        +              Base**3*M + Base**2*O + Base*R + E
        #= Base**4*M + Base**3*O + Base**2*N + Base*E + Y,
        println([s=S,e=E,n=N,d=D,m=M,o=O,r=R,y=Y]),
        
        solve(Digits).


%
% With carry
%
%   C4 C3 C2 C1
%       S  E  N  D
%  +    M  O  R  E
%  ---------------
%  = M  O  N  E  Y
% 

sendmore_carry(Digits, Carry) =>
       Digits = [S,E,N,D,M,O,R,Y],
       Digits :: 0..9,

       Carry = [C1,C2,C3,C4],
       Carry :: 0..1,

       all_different(Digits),

       S #> 0,
       M #> 0,
       
       C4 #= M,
       C3 + S + M #= O + 10 * C4,
       C2 + E + O #= N + 10 * C3,
       C1 + N + R #= E + 10 * C2,
            D + E #= Y + 10 * C1,

       println(digits=Digits), % inferred domains before search
       println(carry=Carry),

       solve([], Digits ++ Carry),
       println(digits=Digits),
       println(carry=Carry),
       nl.
