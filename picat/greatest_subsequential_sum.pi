/*

  Greatest subsequential sum Picat.

  From http://rosettacode.org/wiki/Greatest_subsequential_sum
  """
  Given a sequence of integers, find a continuous subsequence which maximizes 
  the sum of its elements, that is, the elements of no other single 
  subsequence add up to a value larger than this one. An empty subsequence 
  is considered to have the sum 0; thus if all elements are negative, the 
  result must be the empty sequence. 
  """

  Model created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/

import cp.

main => go.

go =>
   LL = [[-1 , -2 , 3 , 5 , 6 , -2 , -1 , 4 , -4 , 2 , -1],
         [-1,-2, 3],
         [-1,-2],
         [0],
         []
        ],

   foreach(L in LL)
     printf("%w: ", L),
     println(greatest_subsequential_sum1(L))
   end,

   foreach(L in LL)
     printf("%w: ", L),
     println(greatest_subsequential_sum2(L))
   end,

   nl.

greatest_subsequential_sum1([]) = [] => true.
greatest_subsequential_sum1(A) = Seq => 
   Len = A.length,
   BeginMax = 0,
   EndMax = -1,
   MaxSum = 0,
   foreach(Begin in 1..Len)
      Sum = 0,
      foreach(End in Begin..Len)
         Sum := Sum + A[End],
         if Sum > MaxSum then
            MaxSum := Sum,
            BeginMax := Begin,
            EndMax := End
         end
      end
   end,
   Seq1 = [],
   if MaxSum > 0 then
     Seq1 := [A[I] : I in BeginMax..EndMax]
   else 
     Seq1 := []
   end,
   Seq = Seq1.


%
% alternative version: 
%  first build a map with all the combinations
%  then pick the one with greatest sum.
%
greatest_subsequential_sum2([]) = [] => true.
greatest_subsequential_sum2(A) = Seq =>

    P = allcomb(A),
    Total = max([Tot : Tot=_T in P]),
    Seq1 = [],
    if Total > 0 then
       [B,E] = P.get(Total),
       Seq1 := [A[I] : I in B..E]
    else 
      Seq1 := []
    end,
    Seq = Seq1.


allcomb(A) = Comb => 
   Len = A.length,
   Comb = new_map([(sum([A[I]:I in B..E])=([B,E])) : B in 1..Len, E in B..Len]).
