/* 

  Mutual recursion (Rosetta code) in Picat.

  http://rosettacode.org/wiki/Mutual_recursion
  """
  Two functions are said to be mutually recursive if the first calls 
  the second, and in turn the second calls the first.

  Write two mutually recursive functions that compute members of the Hofstadter 
  Female and Male sequences defined as:

     F(0) = 1 ; M(0)=0 
     F(n) = n-M(F(n-1)), n>0 
     M(n) = n-F(M(n-1)), n>0

  (If a language does not allow for a solution using mutually recursive functions 
  then state this rather than give a solution by other means).
  """

  This Picat model was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/


main => go.

go =>
  N = 30,
  % tabling is not needed here
  println([f(I) : I in 0..N]),
  println([m(I) : I in 0..N]),  
  nl.


%
% tabling is needed for larger ranges
%
% w/o tabling: N = 100 takes 3.9s
% with tabling:
%   N = 1000 takes 0.024s
%   N = 10000 takes 0.056s
%   N = 100000 takes 0.66s (printing takes about half of this time)
%
go2 =>
  N = 1000,
  println([f(I) : I in 0..N]),
  println([m(I) : I in 0..N]),
  nl.

% the predicate version is faster than the function version
go3 =>
  N = 30,
  println([M : I in 0..N, male(I,M)]),
  println([F : I in 0..N, female(I,F)]),

  % w/o tabling: N = 100 : 4.6s
  % with tabling: 
  %   N = 100 : 0.017s
  %   N = 1000: 0.018s
  %   N = 10000: 0.048s
  %   N = 100000: 0.38s (without printing: 0.145s)
  N2 = 100,
  println([M : I in 0..N2, male(I,M)]),
  println([F : I in 0..N2, female(I,F)]),

  nl.



table
f(0) = 1.
f(N) = N - m(f(N-1)), N > 0 => true. 

table
m(0) = 0.
m(N) = N - f(m(N-1)), N > 0 => true.


% translation of the Prolog solution
table
female(0,N) => N = 1.
female(N,F) => 
  N>0, 
  N1 is N-1, 
  female(N1,R),
  male(R, R1),
  F is N-R1.
 
table
male(0,N) => N = 0.
male(N,F) => 
  N>0, 
  N1 is N-1, 
  male(N1,R),
  female(R, R1),
  F is N-R1.
