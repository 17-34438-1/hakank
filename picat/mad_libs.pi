/* 

  Mad Libs (Rosetta code) in Picat.

  http://rosettacode.org/wiki/Mad_Libs
  """
  Mad Libs is a phrasal template word game where one player prompts another for a list of 
  words to substitute for blanks in a story, usually with funny results.

  Write a program to create a Mad Libs like story. The program should read a multiline 
  story from the input. The story will be terminated with a blank line. Then, find each 
  replacement to be made within the story, ask the user for a word to replace it with, and 
  make all the replacements. Stop when there are none left and print the final story.

  The input should be in the form:

      <name> went for a walk in the park. <he or she>
      found a <noun>. <name> decided to take it home.

  It should then ask for a name, a he or she and a noun (<name> gets replaced 
  both times with the same value.) 
  """

  This Picat model was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/


import util.

main => go.

go =>

  S = "<name> went for a walk in the park. <he or she> 
found a <noun>. <name> decided to take it home.",
  println(replace_tags(S,get_input(get_tags(S)))),
  nl.

% read the story from a file
go2 => 
  S = read_file_chars("mad_libs.txt"),
  println(replace_tags(S,get_input(get_tags(S)))),
  nl.

% Prepared answers
go3 => 
  S = read_file_chars("mad_libs.txt"),
  Map = ["<name>"="Hakan","<he or she>"="He","<noun>"="computer"],
  println(replace_tags(S,Map)),
  nl.



%
% Picat don't (yet) support regular expressions or some function
% which make non-greedy string search easy...
%
get_tags(S) = Tags =>
  Len = S.length,
  StartPos = [P: {C,P} in zip(S,1..Len), C = '<'],
  EndPos   = [P: {C,P} in zip(S,1..Len), C = '>'],
  Tags = [slice(S,Start,End) : {Start,End}  in zip(StartPos,EndPos)].remove_dups().


% Get input from the user
get_input(Tags) = Map =>
  Map = new_map(),
  foreach(Tag in Tags) 
     printf("%w: ", Tag),
     Map.put(Tag,readln())
  end.

%
% Replace all the <tags> with user values.
%
replace_tags(S,Map) = T =>
  T = copy_term(S),
  foreach(Tag=Value in Map) 
    T := replace_string(T,Tag,Value)
  end.

%
% replace/3 does not handle substrings, so we roll our own...
%
replace_string(List,Old,New) = Res =>
  Res = copy_term(List),
  while (find(Res,Old,_,_))
    once(append(Before,Old,After,Res)),
    Res := Before ++ New ++ After
  end.
