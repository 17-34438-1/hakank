/* 

  Longest increasing subsequence (Rosetta code) in Picat.

  From http://rosettacode.org/wiki/Longest_increasing_subsequence
  """
  Calculate and show here a longest increasing subsequence of the list:

    {3,2,6,4,5,1} 

  And of the list:

    {0,8,4,12,2,10,6,14,1,9,5,13,3,11,7,15} 

  Note that a list may have more than one subsequence that is of the maximum length.
  """

  Also, see:
  - http://en.wikipedia.org/wiki/Longest_increasing_subsequence
  - http://www.youtube.com/watch?v=4fQJGoeW5VE
  - http://en.wikipedia.org/wiki/Patience_sorting


  This Picat model was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/

main => go.

go => 
  Ss = [
        [3,2,6,4,5,1],
        [0,8,4,12,2,10,6,14,1,9,5,13,3,11,7,15],
        [1,1,1,1],
        [4,65,2,-31,0,99,83,782,1],
        [f,o,o,b,a,r]
       ],
  foreach(S in Ss)
    lis(S,Lis,N),
    println([S,Lis,N])
  end,
  nl.

go2 =>
  N = 1+random2() mod 100,
  println(n=N),
  S = [(random2() mod 1000)-100 : _ in 1..N],
  println(s=S),
  lis(S,Lis,Len),
  println(lis=Lis),
  println(len=Len),
  nl.

% Inspired by the Prolog version
table(+,+,max)
lis(In, Out,OutLen) =>
  one_is(In, [], Is),
  Out = reverse(Is),
  OutLen = Out.length.

one_is([], Current, Current2) => Current = Current2.
one_is([H|T], Current, Final) =>
	( Current = [], one_is(T, [H], Final));
	( Current = [H1|_], H1 @< H, one_is(T, [H|Current], Final));
	one_is(T, Current, Final).
