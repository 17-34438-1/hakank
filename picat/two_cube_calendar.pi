/* 

  Two Cube Calendar in Picat.

  Martin Gardner (April 1969):
  Construct two cubes which can be used as a calendar, i.e. together can 
  represent the numbers 01..31. One cube has the sides 1,2 and the other 3,4,5.

  Answer:
   cube1 = [0,1,2,6,7,8]
   cube2 = [0,1,2,3,4,5]

  Another solution is 
   cube1 = [0,1,2,7,8,9]
   cube2 = [0,1,2,3,4,5]

  I.e. 6 must be used as both 6 and 9.


  This Picat model was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/


% import util.
import cp.


main => go.


go ?=>
  N = 6,
  M = 31,
  C1 = new_list(N),
  C1 :: 0..9,

  C2 = new_list(N),
  C2 :: 0..9,

  A = new_array(M,3),
  A :: 1..N,

  % "One cube has the sides 1,2 and the other 3,4,5."
  % cube1:
  element(_,C1,1),
  element(_,C1,2),

  % cube2:
  element(_,C2,3),
  element(_,C2,4),
  element(_,C2,5),

  Tmp = [],
  foreach(I in 1..M) 
    T = I div 10,
    D = I mod 10,
    element(J,C1,V1),
    element(K,C2,V2),
    A[I,1] #= J,
    A[I,2] #= K,
    if I mod 10 != 9 then
      (V1 #= T #/\ V2 #= D  #/\ A[I,3] #= 1)
      #\/
      (V2 #= T #/\ V1 #= D  #/\ A[I,3] #= 2)
    else 
      % 6 as 9
      (V2 #= 6 #/\ V1 #= T #/\ A[I,3] #= 3)
      #\/
      (V1 #= 6 #/\ V2 #= T #/\ A[I,3] #= 4)
    end,
    Tmp := Tmp ++ [J,K,V1,V2]
  end,

  % symmetry breaking etc   
  all_different(C1),
  all_different(C2),

  increasing(C1),
  increasing(C2),

  % solve
  Vars = Tmp ++ A.vars() ++ C1 ++ C2,
  solve([split],Vars),

  println(cube1=C1),
  println(cube2=C2),
  foreach(I in 1..M)
    Type = A[I,3],
    if     Type = 1 then Num = [C1[A[I,1]],C2[A[I,2]]]
    elseif Type = 2 then Num = [C2[A[I,2]],C1[A[I,1]]]
    elseif Type = 3 then Num = [9,C1[A[I,1]]]
    else                 Num = [C2[A[I,2]],9]
    end,
    Num := Num[1].to_string() ++ Num[2].to_string(),
    printf("I: %2d  %w |[%d,%d] type:%d\n", I, Num, A[I,1], A[I,2], A[I,3])
  end,

  nl,
  % fail,

  nl.

go => true.
