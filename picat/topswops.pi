/* 

  Topswops (Rosetta Code) in Picat.

  From http://rosettacode.org/wiki/Topswops
  """
  Topswops is a card game created by John Conway in the 1970's.

  Assume you have a particular permutation of a set of n cards numbered 1..n 
  on both of their faces, for example the arrangement of four cards given 
  by [2, 4, 1, 3] where the leftmost card is on top. A round is composed 
  of reversing the first m cards where m is the value of the topmost card. 
  rounds are repeated until the topmost card is the number 1 and the number 
  of swaps is recorded. For our example the swaps produce:

    [2, 4, 1, 3]    # Initial shuffle
    [4, 2, 1, 3]
    [3, 1, 2, 4]
    [2, 1, 3, 4]
    [1, 2, 3, 4]

  For a total of four swaps from the initial ordering to produce the 
  terminating case where 1 is on top.


  For a particular number n of cards, topswops(n) is the maximum swaps needed 
  for any starting permutation of the n cards.

  Task

  The task is to generate and show here a table of n vs topswops(n) for n 
  in the range 1..10 inclusive.

  Note

  Topswops is also known as Fannkuch from the German Pfannkuchen meaning pancake.
  """

  This Picat model was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/


import util.


main => time(go).

go =>
  foreach(N in 1..10)     
      Perm = 1..N,
      Rev = Perm.reverse(),
      Max = 0,
      while(Perm != Rev)
         Perm := next_permutation(Perm),
         C = topswops(Perm),
         if C > Max then Max := C end
      end,
      println([N,Max])
  end,
  
  nl.


go2 =>
  % println(topswops([2,4,1,3])),
  foreach(N in 1..10) 
      Max = 0,
      foreach(Perm in permutations(1..N))
         C = topswops(Perm),
         if C > Max then Max := C end
      end,
      println([N,Max])
  end,
  
  nl.


go3 =>
  % println(topswops([2,4,1,3])),
  foreach(N in 1..10)     
      Max = max([topswops(Perm) : Perm in permutations(1..N)]),
      println([N,Max])
  end,  
  nl.

topswops([]) = 0 => true.
topswops([1]) = 0 => true.
% topswops([1|_]) = 0 => true.
topswops(Perm) = Count =>  
   P = Perm,
   Len = P.length,
   Count = 0,
   while (P[1] > 1)
      Pos = P[1],
      P := [P[I] : I in 1..Pos].reverse() ++ [P[I] : I in Pos+1..Len],
      Count := Count + 1 
   end.

all_placed(Perm) =>
  foreach(I in 1..Perm.length)
     Perm[I] = I
  end.


next_permutation(P) = Perm =>
   Perm1 = P,
   N = Perm1.length,
   K = N - 1,
   while (Perm1[K] > Perm1[K+1], K >= 0) 
      K := K - 1
   end,
   if K > 0 then
      J = N,
      while (Perm1[K] > Perm1[J])  J := J - 1 end,      
      Tmp := Perm1[K],
      Perm1[K] := Perm1[J],
      Perm1[J] := Tmp,
      R = N, 
      S = K + 1,
      while (R > S) 
         Tmp := Perm1[R],
         Perm1[R] := Perm1[S],
         Perm1[S] := Tmp,
         R := R - 1, 
         S := S + 1
      end
   end,
   Perm = Perm1.

