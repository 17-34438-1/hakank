/* 

  Cryptogram (a.k.a. Isomorphic Words) in Picat.

  Given a word, check if any other word(s) in a word list have
  the same "structure".

  Example (from http://www.wolframalpha.com/input/?i=cryptograms+krkrpl&lk=3)
  
  krkrpl -> 

  cacaos
  cocoas
  icicle
  jojoba
  jujube
  lilies 
  mimics
  papacy
  papaws
  piping
  pipits
  reread
  tatami
  titian
  vivify

  Also, compare with my Isomorphic Words program:
     http://hakank.org/isomorphic_words/isomorphic_words.cgi

  Example:

  The word "krkrpl" has the tructure [1,2,1,2,3,4] and so does these 93 words:

  [acacin,alaloi,alalus,ananke,anansi,ananym,azazel,babasu,beberg,bibiru,
   cacaos,cicily,cocoas,cocona,cucule,cuculi,cucurb,cucuta,cucuyo,didier,
   didies,didine,dodoes,dodoma,dodona,egegik,fifine,fifing,fifish,gagaku,
   gagate,icicle,jijiga,jojoba,jujube,kakapo,kokoda,kokopu,kukupa,lalage,
   lalang,lilian,lilias,lilied,lilies,lilith,lilium,lilius,luluai,mimics,
   mimine,miming,mimish,nanako,nonoic,ononis,papacy,papago,papain,papaio,
   papane,papaws,pipier,pipile,pipilo,piping,pipits,popode,pupulo,reread,
   rerent,sasabe,sasani,seseli,sisile,sisith,tatami,tatamy,tatars,tatary,
   teteak,titian,titien,tities,totora,totowa,wewela,vivian,vivica,vivien,
   vivify,vyvyan,zizith]


  This Picat model was created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/


% import util.
% import cp.


main => go.


go =>
  Word1 = "krkrpl",
  % Word1 = "anna",
  % Word1 = "hakank",
  % Word1 = "kjellerstrand",
  % Word1 = "abcde", % [1,2,3,4,5]

  Len = Word1.length,
  Structure1 = structure(Word1),
  println(structure=Structure1),

  Wordlist = "words_lower.txt",
  % Wordlist = "unixdict.txt", 
  FD = open(Wordlist),
  Words = [],
  while (not at_end_of_stream(FD)) 
     Word2 := read_line(FD),
     if Word2.length == Len, structure(Word2) = Structure1 then
       Words := Words ++ [Word2]
     end
  end,
  close(FD),
  
  foreach(W in Words) 
     println(W)
  end,
  println(len=Words.length),
  nl.

%
% Convert a word to a word structure, i.e. where 
% each character gets the index of its first occurrence.
%
% E.g.
% 
%  krkrpl has the structure [1,2,1,2,3,4]
%
%  121234
%  krkrpl
%
%  hakank has the structure [1,2,3,2,4,3]
%  abcde  has the structure [1,2,3,4,5]
%
structure(Word) = S =>
  M = new_map(),
  S1 = [],
  Ix = 1,
  foreach(W in Word) 
    if not(M.has_key(W)) then
      M.put(W,Ix),
      Ix := Ix + 1
    end,
    S1 := S1 ++ [M.get(W)]
  end,
  
  S = S1.

%
% Another approach
%
structure2(Word) = S =>
  U = Word.remove_dups(), 
  M = new_map([C=I : {C,I} in zip(U, 1..U.length)]), 
  S = [M.get(C) : C in Word].