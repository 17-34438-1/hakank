/*

  Broken weights problem in Picat.

  From
  http://www.mathlesstraveled.com/?p=701
  """
  Here's a fantastic problem I recently heard. Apparently it was first 
  posed by Claude Gaspard Bachet de Méziriac in a book of arithmetic problems 
  published in 1612, and can also be found in Heinrich Dorrie’s 100 
  Great Problems of Elementary Mathematics.
  
      A merchant had a forty pound measuring weight that broke 
      into four pieces as the result of a fall. When the pieces were 
      subsequently weighed, it was found that the weight of each piece 
      was a whole number of pounds and that the four pieces could be 
      used to weigh every integral weight between 1 and 40 pounds. What 
      were the weights of the pieces?
  
  Note that since this was a 17th-century merchant, he of course used a 
  balance scale to weigh things. So, for example, he could use a 1-pound 
  weight and a 4-pound weight to weigh a 3-pound object, by placing the 
  3-pound object and 1-pound weight on one side of the scale, and 
  the 4-pound weight on the other side.
  """

  Model created by Hakan Kjellerstrand, hakank@gmail.com
  See also my Picat page: http://www.hakank.org/picat/

*/

import util.
import cp.

main => go.

go =>
   N = 4,
   M = 40,

   broken_weights(N,M,Weights,X),
   writeln(Weights),
   print_matrix(X).


% alternative version of the problem:
% what is the minimal number of weights
% for weighting all values of 1..80.
% Also, we minimize the last value of the
% weights.
go2 =>
   N in 1..40,
   indomain(N),
   writeln(n=N),

   M = 80,

   broken_weights(N,M,Weights,X,true),
   writeln(Weights),
   print_matrix(X).

   
% default call
broken_weights(N,M, Weights, X) =>
   broken_weights(N,M, Weights, X, false).

increasing(List) =>
   foreach(I in 2..List.length) List[I-1] #=< List[I] end.


% Minimize = true -> minimize the last value of Weights
broken_weights(N,M, Weights, X, Minimize) =>

   Weights = new_list(N),
   Weights in 1..M,

   X = new_array(M,N),
   X in -1..1, 

   % symmetry breaking
   increasing(Weights),

   M #= sum(Weights),
   foreach(J in 1..M)
      product_lists([X[J,I] : I in 1..N],Weights,J)
   end,
   
   % search
   Vars = Weights ++ X,

   if Minimize = true then
      % minimize the last weights
      solve([$min(Weights[N])], Vars)
   else
      solve(Vars)
   end.


print_matrix(X) =>
   foreach({I,Row} in zip(1..X.length,X.to_list()))
      writef("%2d: ", I),
      foreach(R in Row) writef("%3d", R) end,
      nl
   end.

product_lists(List1, List2, Sum) =>
   Sum #= sum([L1*L2 : {L1,L2} in zip(List1, List2)]).
