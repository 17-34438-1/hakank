$
$   Survo puzzle in Essence'.
$
$   http://en.wikipedia.org/wiki/Survo_Puzzle
$   """
$   Survo puzzle is a kind of logic puzzle presented (in April 2006) and studied 
$   by Seppo Mustonen. The name of the puzzle is associated to Mustonen's 
$   Survo system which is a general environment for statistical computing and 
$   related areas.
$ 
$   In a Survo puzzle the task is to fill an m * n table by integers 1,2,...,m*n so 
$   that each of these numbers appears only once and their row and column sums are 
$   equal to integers given on the bottom and the right side of the table. 
$   Often some of the integers are given readily in the table in order to 
$   guarantee uniqueness of the solution and/or for making the task easier.
$   """
$ 
$   See also
$   http://www.survo.fi/english/index.html
$   http://www.survo.fi/puzzles/index.html
$
$   References:
$   Mustonen, S. (2006b). "On certain cross sum puzzles"
$   http://www.survo.fi/papers/puzzles.pdf 
$   Mustonen, S. (2007b). "Enumeration of uniquely solvable open Survo puzzles." 
$   http://www.survo.fi/papers/enum_survo_puzzles.pdf 
$   Kimmo Vehkalahti: "Some comments on magic squares and Survo puzzles" 
$   http://www.helsinki.fi/~kvehkala/Kimmo_Vehkalahti_Windsor.pdf
$   R code: http://koti.mbnet.fi/tuimala/tiedostot/survo.R
$
$   Compare with the following models: 
$   * Choco: http://www.hakank.org/choco/SurvoPuzzle.java
$   * Comet: http://www.hakank.org/comet/survo_puzzle.co
$   * ECLiPSE: http://www.hakank.org/eclipse/survo_puzzle.ecl
$   * Gecode: http://www.hakank.org/gecode/survo_puzzle.cpp
$   * Gecode/R: http://www.hakank.org/gecode_r/survo_puzzle.rb
$   * JaCoP: http://www.hakank.org/JaCoP/SurvoPuzzle.java
$   * MiniZinc: http://www.hakank.org/minizinc/survo_puzzle.mzn
$
$  This model was created by Hakan Kjellerstrand (hakank@bonetmail.com)
$  Also, see my Essence'/Tailor page: http://www.hakank.org/minion_tailor/
$


$ Note: I can't get array access to tlimits to work, therefor the hard coding
$ of the limits

ESSENCE' 1.0
given r : int $ rows
given c : int $ columns
given rowsums : matrix indexed by [int(1..r)] of int(1..100000)
given colsums : matrix indexed by [int(1..c)] of int(1..100000)
given game    : matrix indexed by [int(1..r),int(1..c)] of int(0..r*c)

find x : matrix indexed by [int(1..r),int(1..c)] of int(1..r*c)

such that

  alldiff(x),

  $ copy matrix
  forall i : int(1..r) . forall j : int(1..c) . 
      (game[i,j] > 0) => (x[i,j] = game[i,j]),

  forall i : int(1..r) .
       (sum j : int(1..c) . x[i,j]) = rowsums[i],

   forall j : int(1..c) .
       (sum i : int(1..r) . x[i,j]) = colsums[j]

