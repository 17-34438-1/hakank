$
$ Diet problem in Essence'
$
$ Standard Operations Research example.
$
$
$ Minimize the cost for the products:
$ Type of                        Calories   Chocolate    Sugar    Fat
$ Food                                      (ounces)     (ounces) (ounces)
$ Chocolate Cake (1 slice)       400           3            2      2
$ Chocolate ice cream (1 scoop)  200           2            2      4
$ Cola (1 bottle)                150           0            4      1
$ Pineapple cheesecake (1 piece) 500           0            4      5
$
$
$ Compare with the following models:
$ * MiniZinc: http://www.hakank.org/minizinc/diet1.mzn
$ * Choco: http://www.hakank.org/choco/Diet.java
$ * Comet: <a href="/comet/diet.co">diet.co
$ * ECLiPSE: <a href="/eclipse/diet.ecl">diet.ecl
$ * Gecode: <a href="/gecode/diet.cpp">diet.cpp
$ * Gecode/R: <a href="/gecode_r/diet.rb">diet.rb
$ * JaCoP: <a href="/JaCoP/Diet.java">Diet.java
$
$ Model created by Hakan Kjellerstrand, hakank@bonetmail.com
$ See also my Essence'/Tailor page: http://www.hakank.org/minion_tailor
$

$ Note: I can't get array access to tlimits to work, hence the hard coding
$ of the limits

ESSENCE' 1.0
given n : int
given p : int
given price      : matrix indexed by [int(1..p)] of int(1..100)
given tlimits    : matrix indexed by [int(1..p)] of int(1..100)
given calories   : matrix indexed by [int(1..n)] of int(1..1000)
given chocolate : matrix indexed by [int(1..n)] of int(1..100)
given sugar      : matrix indexed by [int(1..n)] of int(1..100)
given fat        : matrix indexed by [int(1..n)] of int(1..100)

find x : matrix indexed by [int(1..p)] of int(0..1000)
find cost : int(0..10000)

param n be 4
param p be 4
param price be     [50, 20, 30, 80]
$ param tlimits be   [500, 6,10,8]
param calories be  [400, 200, 150, 500]
param chocolate be [3,2,0,0]
param sugar be     [2,2,4,4]
param fat be       [2,4,1,5]

minimising cost

such that
   cost = (sum i : int(1..p) . x[i]*price[i]),
   (sum i : int(1..n) . x[i]*calories[i])  >= 500, $ tlimits[1],
   (sum i : int(1..n) . x[i]*chocolate[i]) >= 6, $ tlimits[2],
   (sum i : int(1..n) . x[i]*sugar[i])     >= 10, $ tlimits[3],
   (sum i : int(1..n) . x[i]*fat[i])       >= 8 $ tlimits[4]
