# 
# Problem 26
# """
# A unit fraction contains 1 in the numerator. The decimal representation of the 
# unit fractions with denominators 2 to 10 are given:
#
#     1/2	= 	0.5
#     1/3	= 	0.(3)
#     1/4	= 	0.25
#     1/5	= 	0.2
#     1/6	= 	0.1(6)
#     1/7	= 	0.(142857)
#     1/8	= 	0.125
#     1/9	= 	0.(1)
#     1/10	= 	0.1
#
# Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be 
# seen that 1/7 has a 6-digit recurring cycle.
#
# Find the value of d < 1000 for which 1/d contains the longest recurring cycle in 
# its decimal fraction part.
# """ 
#
# This program was written by Hakan Kjellerstrand (hakank@gmail.com)
# Also see my Icon/Unicon page http://www.hakank.org/icon/
#

# for decimal()
link numbers

procedure main()
    # t1 := &time
    problem26()
    # t2 := &time
    # write("problem26(): ", t2 - t1, "ms")
    # problem26b()
    # t3 := &time
    # write("problem26b(): ", t3 - t2, "ms")
end

#
# decimal(1, i)
# from give a nice representation of recurring cycles
# 
# 1 1.
# 2 0.5
# 3 0.[3]
# 4 0.25
# 5 0.2
# 6 0.1[6]
# 7 0.[142857]
# 8 0.125
# 9 0.[1]
# 
# We are really only interesting in primes here
#
procedure problem26()
    local d, p, i, max_p
    max_p := 0
    every i := 1 to 1000-1 do { #& isprime(i) do {
        d := decimal(1, i)
        p:= ""
        d ? { 
            # for regexpers: 
            #     p = $1 if /\[(.+)\]/
            move(upto("[")) &  
                 move(1) & 
                 p := tab(upto("]")) & 
                 *p > max_p &
                 max_p := i
        }
    }

    write(max_p)
end

# this variant can handle both types of representations,
# i.e. with and without the cycle part ([...])
#    0.5
# and
#    0.[142857]
# 
# Not very surprising, this is slighly slower...
#
procedure problem26b()
    local d, p, i, max_p
    max_p := 0
    every i := 1 to 1000-1 do { # & isprime(i) do {
        d := decimal(1, i)
        p:= ""
        d ? { 
            (p := (p1() | p2()))  & 
                 integer(p) &
                 *p > max_p &
                 max_p := i
        }

    }

    write(max_p)
end

# regexp: /\[(.+)\]/
procedure p1() 
    move(upto("[")) &  
     move(1) & 
     p := tab(upto("]"))
    
    return p
end


# regexp: /\.(.+)$/
procedure p2() 
    move(upto(".")) &  
        move(1) &
     p := move(0)
    return p
end
