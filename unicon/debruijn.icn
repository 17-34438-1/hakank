# 
# Sun Feb  6 17:55:00 2011/hakank@bonetmail.com
# 
# de Bruijn sequence.
# 
# See http://en.wikipedia.org/wiki/De_Bruijn_sequence
# 
# This is a port of the Java version
# http://www.hakank.org/comb/deBruijn.java
# or rather a port of the original C program with
# the following copyright:
#
#   -----------------------------------------------------------------------------
#   | C program to generate necklaces, Lyndon words, and De Bruijn              |
#   | sequences.  The algorithm is CAT and is described in the book             |
#   | "Combinatorial Generation."  This program, was obtained from the          |
#   | (Combinatorial) Object Server, COS, at http://www.theory.csc.uvic.ca/~cos |
#   | The inputs are n, the length of the string, k, the arity of the           |
#   | string, and density, the maximum number of non-0's in the string.         |
#   | The De Bruijn option doesn't make sense unless density >= n.              |
#   | The program can be modified, translated to other languages, etc.,         |
#   | so long as proper acknowledgement is given (author and source).           |
#   | Programmer: Frank Ruskey (1994), translated to C by Joe Sawada            |
#   -----------------------------------------------------------------------------
#
# Compare with my web based programs:
# - http://www.hakank.org/comb/debruijn.cgi   
# - http://www.hakank.org/comb/deBruijnApplet.html
#
#
# This program was written by Hakan Kjellerstrand (hakank@bonetmail.com)
# Also see my Icon/Unicon page http://www.hakank.org/icon/
#

global a, n, k, L
# link ximage, patterns, scan, hakank_utils

procedure main(args)
    
    # the door lock combination solution
    # is k = 10, n = 4
    # Also see: http://www.hakank.org/comb/debruijn_k_10_n_4.html

    # k: language (0..k-1)
    k := args[1] | 2 # 10   

    # n: string length
    n := args[2] | 3 # 4

    # also print the sequence as a flat list?
    print_seq := args[3] | ""

    write("k:", k, " n:", n, ", i.e. language: 0..k-1 (0..", k-1,") and with string len n (", n, ")")

    L := []
    a := list(101)
    a[1] := 0

    Gen(1,1,0)
    
    # flat sequence
    if *print_seq > 0 then {
        write("\nAs a flat sequence:")
        every writes(!L, " ")
        # and wrap the first n-1 items
        writes("(")
        every writes(!L[1+:n-1], " ")
        write(")")
    }

    write("length: ", k,"^", n,"+",n, "-1 = ",  k^n, " + ", n-1, " = ", k^n+n-1 )

end


#
# When to "print" a digit
#
procedure Print(p)
    local j

    if n % p == 0 then {
        every j := 1 to p do {
            t := a[j+1]
            put(L, t) 
            writes(t, " ")
        }
        write()
    }

end


procedure Gen(t, p, ones) 
    local j
    if ones <= n then {
        if t > n then {
            Print(p)
        } else {
            a[t+1] := a[t-p+1]
            if a[t+1] > 0 then {
                Gen(t+1,p,ones+1)
            } else {
                Gen(t+1,p,ones)
            }
            every j := a[t-p+1]+1 to k-1 do {
                a[t+1] := j
                Gen(t+1,t,ones+1)
            }
        }
    }
    
end
