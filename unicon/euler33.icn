# 
# Problem 33
# """
# The fraction 49/98 is a curious fraction, as an inexperienced mathematician in 
# attempting to simplify it may incorrectly believe that 49/98 = 4/8, which is correct, 
# is obtained by cancelling the 9s.
#
# We shall consider fractions like, 30/50 = 3/5, to be trivial examples.
#
# There are exactly four non-trivial examples of this type of fraction, less than 
# one in value, and containing two digits in the numerator and denominator.
#
# If the product of these four fractions is given in its lowest common terms, find 
# the value of the denominator.
# """ 
#
# This program was written by Hakan Kjellerstrand (hakank@gmail.com)
# Also see my Icon/Unicon page http://www.hakank.org/icon/
#
link factors, lists, rational
procedure main()
    # write("problem33()")
    problem33()
    # write("\nproblem33b()")
    # problem33b()
end

procedure problem33()

    s := rational(1,1,1)
    every y := 1 to 9 do {
        every z := y to 9 do {
            x:= 9.0*y*z/(10*y-z)
            if integer(x) = x & 1.0*y/z < 1 & x < 10 then {
                s := mpyrat(s, rational(y, z, 1))
                # write(x, " ", y, " ", z, " ", integer(10*y+x) || "/" || integer(z+10*x), " ",  y || "/" || z)
            }
        }
    }

    # write(rat2str(s), ": ", s.denom)
    write(s.denom)

end



#
# A direct approach...
#
procedure problem33b()
    
    s := rational(1,1,1)
    every a := 10 to 99 do {
        every b := a+1 to 99 do {
            # no trivial reduction
            if a % 10 == 0 | b % 10 == 0 then next
            
            # weed out the pairs that has no common digit
            if !a = !b then {
                # continue...
                # write(a," ", b, " has some common digits...")
            } else {
                next
            }
            
            r1 := rational(a,b,1)
            r1_red := ratred(r1)
            
            aa := []
            bb := []
            every put(aa, !a)
            every put(bb, !b)
            
            if aa[1] == bb[1] then {
                if rat_check(r1_red, aa[2], bb[2]) then {
                    s := mpyrat(s, rat(aa[2], bb[2]))
                    write(a || "/" || b, " -> ", aa[2],"/", bb[2], " SAME1")
                }
            }

            if aa[1] == bb[2] then {
                if rat_check(r1_red, aa[2], bb[1]) then {
                    s := mpyrat(s, rat(aa[2], bb[1]))
                    write(a || "/" || b, " -> ", aa[2],"/", bb[1], " SAME2")
                }
            }

            # All the solutions is of this form
            if aa[2] == bb[1] then {
                if rat_check(r1_red, aa[1], bb[2]) then {
                    s := mpyrat(s, rat(aa[1], bb[2]))
                    write(a || "/" || b, " -> ", aa[1],"/", bb[2], " SAME3")
                }
            }

            if aa[2] == bb[2] then {
                if rat_check(r1_red, aa[1], bb[1]) then {
                    s := mpyrat(s, rat(aa[1], bb[1]))
                    write(a || "/" || b, " -> ", aa[1],"/", bb[1], " SAME4")
                }
            }
        }
    }

    write(rat2str(s), " ", s.denom)
    
end

procedure rat(a, b)
    return rational(integer(a), integer(b), 1)
end

procedure rat_check(r1_red, x,y) 
    # r2 := rational(integer(x), integer(y), 1)
    r2 := str2rat("(" || x || "/" || y || ")")
    r2_red := ratred(r2)
    if (r1_red.numer = r2_red.numer) & (r1_red.denom = r2_red.denom) then {
        return 1
    } else {
        fail
    }

end


procedure prod_rat_list(t)
    s := t[1]
    every i := 2 to *t do {
        s := mpyrat(s, t[i])
    }
    
    return s

end
