#
# Euler problem 12
#
# """
# The sequence of triangle numbers is generated by adding the natural numbers. So the 
# 7^(th) triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
# The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?
# """
#
# This program was written by Hakan Kjellerstrand (hakank@gmail.com)
# Also see my Icon/Unicon page http://www.hakank.org/icon/
#

link numbers

procedure main()
   problem12()
end


procedure problem12()
    local n, m, t, s

    n := 500;
    m := 1;
    repeat {
        # t := triangle_number(m) 
        # s := num_divisors(t)
        # if s > n then break;
        if num_divisors(t:=triangle_number(m)) > n  then break;
        m +:= 1
    }
    
    # write(m, " (t: ", t, ") ", " s: ", s)
    write(t)  

end

#
# This procedure gives the number of divisors below sqrt(n).
#
procedure num_divisors(n)
    local s, i

    if n == 1 then return 1;

    s := 0
    every i := 1 to integer(sqrt(n)) & n % i = 0 do 
        s +:= 1
  
    return 2*s
end


procedure triangle_number(n) 
    local t

    # too slow
    # s := 0
    # every s +:= 1 to n
    # return s

    return n*(n+1) / 2

end
