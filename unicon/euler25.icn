# 
# Problem 25
# """
# The Fibonacci sequence is defined by the recurrence relation:
#
#     Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.
#
# Hence the first 12 terms will be:
#
#     F1 = 1
#     F2 = 1
#     F3 = 2
#     F4 = 3
#     F5 = 5
#     F6 = 8
#     F7 = 13
#     F8 = 21
#     F9 = 34
#     F10 = 55
#     F11 = 89
#     F12 = 144
#
# The 12th term, F12, is the first term to contain three digits.
#
# What is the first term in the Fibonacci sequence to contain 1000 digits?
# """ 
#
# This program was written by Hakan Kjellerstrand (hakank@gmail.com)
# Also see my Icon/Unicon page http://www.hakank.org/icon/
#

link memrfncs

procedure main()
    problem25()
    #  problem25b()
    # problem25c() # slightly slower than prolem25()
end

procedure problem25()
    local n, max_len

    max_len := 1000
    prevfib := 1
    currfib := 1
    n := 2

    # while *string(currfib) < max_len do {
    #     prevfib :=: currfib
    #     currfib +:= prevfib
    #     n +:= 1
    # }

    # alternative formulation
    every |(*currfib < max_len & 
            prevfib :=: currfib &
            currfib +:= prevfib & 
            n +:= 1 )

    write(n)
    
end


#
# slower variant
#
procedure problem25b()
    local n, len, max_len
    n := 0
    max_len := 1000
    while *string(f:=my_fib(n)) < max_len do {
        n +:= 1
    }
    write(n)
end

# slightly slower than problem25(), using suspend
procedure problem25c()
    local n, len, max_len
    n := 2
    max_len := 1000
    every my_fib2(max_len) do n +:= 1
    write(n)
end


procedure my_fib(n)
    local prevfib, currfib, nfib
    nfib := 2
    prevfib :=1
    currfib :=1
    while nfib<n do {
        prevfib :=: currfib
        currfib +:= prevfib
        nfib +:= 1
    }
    return currfib
end

procedure my_fib2(max_val)
    local prevfib, currfib, nfib
    nfib := 2
    prevfib :=1
    currfib :=1
    
    while *currfib < max_val do {
        suspend currfib
        prevfib :=: currfib
        currfib +:= prevfib
        nfib +:= 1
    }

end
