#
# Euler problem 11
#
# """
# In the 20×20 grid below, four numbers along a diagonal line have been 
# marked in red.
# 
# ...
#
# The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
#
# What is the greatest product of four adjacent numbers in any direction 
# (up, down, left, right, or diagonally) in the 20×20 grid?
# """
#
# This program was written by Hakan Kjellerstrand (hakank@bonetmail.com)
# Also see my Icon/Unicon page http://www.hakank.org/icon/
#

link numbers

procedure main()

   problem11()

end


procedure problem11()
    local M, L, L2, col, row, a, s, x;

    # define a string
    s := 
        "08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\n" ||
        "49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\n" || 
        "81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\n" ||
        "52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\n" ||
        "22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\n" ||
        "24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\n" ||
        "32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70\n" ||
        "67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21\n" ||
        "24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72\n" || 
        "21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95\n" ||
        "78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\n" ||
        "16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\n" ||
        "86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\n" ||
        "19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\n" ||
        "04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\n" ||
        "88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\n" ||
        "04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\n" ||
        "20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\n" ||
        "20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\n" ||
        "01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48\n";

    # initiate the matrix
    M := list(20,0)
    every !M := list(20,0)
    row := 1

    s ? 
        while x := trim(tab(y:=upto("\n"))) & move(1)  do {
            L2 := splitx(x, " ") 
            every col := 1 to 20 do {
                M[row][col] := L2[col] 
            } 
            row +:= 1
        }

    L := []
    # across
    every col := 1 to 20 do {
        every a := 1 to 17 do {
            # Note the alternative way of defining a split ([a+:4]) which
            # means start from a and take 4 elements
            put(L,product(M[col][a+:4]))
        }
    }

    # updown
    every row := 1 to 20 do {
        every a := 1 to 17 do {
            # Note: cannot use the same splice principle as for col here.
            # Instead a temporary array, L2, is used.
            L2 := []
            every col := a to a + 3 do {
                push(L2,M[row,col])
            }
            put(L,product(L2))
        }
    }

    # diag_down
    every j :=  1 to 17 do {
        every i := 1 to 17 do {
            L2 := []
            every a := 0 to 3 do {
                push(L2,M[a + i][a+j])
            }
            put(L,product(L2))
        }
    }


    # diag_up
    every j := 1 to 17 do {
        every i := 4 to 20 do {
            L2 := []
            every a := 0 to 3 do {
                push(L2,M[i - a][j + a])
            }
            put(L,product(L2))
        }
    }

    write("max: ", myMax(L))

end


procedure product(L) 
    p := 1
    every p *:= !L
    return p
end

procedure myMax(L)
    local maximum := get(L)
    every maximum <:= !L
    return(maximum)
end


#
# Somewhat general split procedure.
#
# Examples:
#  splitx(str, "")
#  splitx(str, ":")
#  splitx(str, ".;, ")
#  splitx(str, n)      : split str into n length segments
#                      : the last may be shorter 
#  
#
procedure splitx(str, chars) 
  local vec
  
  vec := []
  if *chars = 0 then {
      # split on ""
      every put(vec, !str)
      
  } else if integer(chars) then {
      # split on number (positions)
      str ? {
          repeat {
              # this works but can probably be better
              put(vec, move(chars)) | (put(vec, tab(0)) & break)
          }
      }
      
  } else {
      # split on char or chars
      str ? {
          repeat {
              # tab either to upto(chars) or to end of line (position 0)
              put(vec, tab(upto(chars) | 0))
              move(1) | break
          } 
      }
  }
  
  return vec
  
end
