
/*

  Problem 8
http://projecteuler.net/index.php?section=problems&id=8
Find the greatest product of five consecutive digits in the 1000-digit number.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Solution: 40824

*/

:- lib(lists).
:- lib(listut).
:- lib(util).
:- lib(ic).
:- lib(ic_global).
:- lib(propia).
:- lib(ic_search).
:- lib(hash).

prodlist(L, Res) :-
        % foldr(mult, 1, L, Res).
        %  foldr('*', 1, L, Res).
        (
            foreach(X, L),
            fromto(1, In, Out, Res)
        do
            Out is X*In
        ).

max_list([B|A], C) :-
        max_list(A, B, C).

max_list([], A, A).
max_list([A|C], B, E) :-
        D is max(A, B),
        max_list(C, D, E).



p8("7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450").
        
running_prod(L1, RLen, L2) :-
        length(L1, L1Len),
        To is L1Len - RLen - 1, 
        P =.. [p|L1], % create an "array" which we can access with []
        ( for(I, 1, To),
          foreach(Sum, L2), 
          param(P,RLen) do 
              J is I + RLen -1, 
              Y is P[I..J],
              prodlist(Y, Sum)
        ).

%% Note: Here we use the array notation which need a structure of 
%%       type p(7,3,1,6,7,....)
%%       (the predicate name don't matter)
%%       P =.. [p|L]
%%       creates an array which then can be accessed by 
%%       P[10] for a single value or as a range P[10..15] for a range
%%       of values.
% "There are 1818 delayed goals. .."
% problem8 :-
%         p8(X), 
%         toNum(L, X), 
%         writeln(l:L),
%         P =.. [p|L], 
%         writeln(p:P),
%         ( for(I, 1,996), % 1000-4 = 996
%           foreach(Prod , List), 
%           param(P) 
%         do 
%           J is I + 4, % the range I..I+4
%           Y is P[I..J], 
%           prodlist(Y, Prod)
%         ), 
%         max_list(List, Max),
%         writeln(Max).

% "out of range in arg"
% problem8b :-
%         p8(X),
%         toNum(L,X),
%         running_prod(L, 5, L2),
%         max_list(L2, Max),
%         writeln(Max).

% Using strings instead: p("73...")
%   "123456" -> [49,50,51,52,53,54]
problem8 :-
        p8(P), 
        string_length(P,Len),
        ( for(I,1,Len-4), 
          fromto(List,Out,In,[]), 
          param(P) do 
              substring(P,I,5,S), 
              string_list(S,L), 
              listnum(L,L2), 
              prodlist(L2, Prod), 
              Out = [Prod|In]
        ), 
        max_list(List,Max),
        writeln(Max).

% convert a list of ASCII integer to a list numbers
listnum(List,Num) :- 
        (foreach(L, List),
         foreach(N, Num) do
             N is L - 48
        ).
         

go :-
        writeln('problem8'),
        problem8.