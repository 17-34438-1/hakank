use v6;

say qq/
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that the 7th triangle number, 28, is the first triangle number 
to have over five divisors.

Which is the first triangle number to have over five-hundred divisors?")
/;


# This is based on the SETL program
#  http://www.hakank.org/setl/project_euler12.setl
#

# Triangle numbers
# > [\+] 1..10
# 1 3 6 10 15 21 28 36 45 55

my $max_len = 500;
# my $max_len = 5;
my $c = 1;
for [\+] 1...* -> $n {
    my $num_divisors = num_divisors($n);
    say "n:$n: num_divisors:$num_divisors";# if $c++ % 1000 == 0;
    if $num_divisors > $max_len {
       say "Found $n: num_divisors: $num_divisors (> $max_len))";
       last;
    }
}



sub prime_factors($n) {
    my $m = $n;
    my @factors = ();
    while $m %% 2 { @factors.push(2); $m /= 2; }
    for (3,5...*>(1+sqrt($m)).Int).grep({ $m %% $_}) -> $k {
       while $m %% $k {
          @factors.push($k);      
          $m /= $k;
       }
       last if $m == 1;
    }
    @factors.push($m.Num) if $m > 1;
    return @factors;
}

sub collect_factors(@factors) {
    my %h = ();
    for @factors { %h{$_}++ };
    my @z = gather for %h.kv -> $k, $v { take [$k.Int, $v] };
    return @z;

}

sub num_divisors($n) {
    return [*] gather for collect_factors(prime_factors($n)) -> @p { take @p[1]+1 };
}
